
MIP-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e64  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007f24  08007f24  00008f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f68  08007f68  00009020  2**0
                  CONTENTS
  4 .ARM          00000000  08007f68  08007f68  00009020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007f68  08007f68  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f68  08007f68  00008f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f6c  08007f6c  00008f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08007f70  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000020  08007f90  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08007f90  000091c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001747b  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002549  00000000  00000000  000204c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  00022a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001175  00000000  00000000  000240b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad01  00000000  00000000  0002522d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013942  00000000  00000000  0003ff2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab1e7  00000000  00000000  00053870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fea57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005464  00000000  00000000  000fea9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00103f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007f0c 	.word	0x08007f0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08007f0c 	.word	0x08007f0c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <lsm6dsr_read_reg>:
  *
  */
int32_t __weak lsm6dsr_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	0008      	movs	r0, r1
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	0019      	movs	r1, r3
 800022e:	230b      	movs	r3, #11
 8000230:	18fb      	adds	r3, r7, r3
 8000232:	1c02      	adds	r2, r0, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	2308      	movs	r3, #8
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	1c0a      	adds	r2, r1, #0
 800023c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d102      	bne.n	800024a <lsm6dsr_read_reg+0x2a>
  {
    return -1;
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	e00f      	b.n	800026a <lsm6dsr_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	685c      	ldr	r4, [r3, #4]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	68d8      	ldr	r0, [r3, #12]
 8000252:	2308      	movs	r3, #8
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	881d      	ldrh	r5, [r3, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	230b      	movs	r3, #11
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	7819      	ldrb	r1, [r3, #0]
 8000260:	002b      	movs	r3, r5
 8000262:	47a0      	blx	r4
 8000264:	0003      	movs	r3, r0
 8000266:	617b      	str	r3, [r7, #20]
  return ret;
 8000268:	697b      	ldr	r3, [r7, #20]
}
 800026a:	0018      	movs	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	b006      	add	sp, #24
 8000270:	bdb0      	pop	{r4, r5, r7, pc}

08000272 <lsm6dsr_write_reg>:
  *
  */
int32_t __weak lsm6dsr_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000272:	b5b0      	push	{r4, r5, r7, lr}
 8000274:	b086      	sub	sp, #24
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	0008      	movs	r0, r1
 800027c:	607a      	str	r2, [r7, #4]
 800027e:	0019      	movs	r1, r3
 8000280:	230b      	movs	r3, #11
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	1c02      	adds	r2, r0, #0
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	2308      	movs	r3, #8
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	1c0a      	adds	r2, r1, #0
 800028e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d102      	bne.n	800029c <lsm6dsr_write_reg+0x2a>
  {
    return -1;
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	e00f      	b.n	80002bc <lsm6dsr_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	681c      	ldr	r4, [r3, #0]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	68d8      	ldr	r0, [r3, #12]
 80002a4:	2308      	movs	r3, #8
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	881d      	ldrh	r5, [r3, #0]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	230b      	movs	r3, #11
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	7819      	ldrb	r1, [r3, #0]
 80002b2:	002b      	movs	r3, r5
 80002b4:	47a0      	blx	r4
 80002b6:	0003      	movs	r3, r0
 80002b8:	617b      	str	r3, [r7, #20]
  return ret;
 80002ba:	697b      	ldr	r3, [r7, #20]
}
 80002bc:	0018      	movs	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	b006      	add	sp, #24
 80002c2:	bdb0      	pop	{r4, r5, r7, pc}

080002c4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	000a      	movs	r2, r1
 80002ce:	1cfb      	adds	r3, r7, #3
 80002d0:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL,
 80002d2:	2408      	movs	r4, #8
 80002d4:	193a      	adds	r2, r7, r4
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	2110      	movs	r1, #16
 80002dc:	f7ff ffa0 	bl	8000220 <lsm6dsr_read_reg>
 80002e0:	0003      	movs	r3, r0
 80002e2:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d117      	bne.n	800031a <lsm6dsr_xl_full_scale_set+0x56>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80002ea:	1cfb      	adds	r3, r7, #3
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2203      	movs	r2, #3
 80002f0:	4013      	ands	r3, r2
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2103      	movs	r1, #3
 80002f8:	400a      	ands	r2, r1
 80002fa:	0090      	lsls	r0, r2, #2
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	210c      	movs	r1, #12
 8000300:	438a      	bics	r2, r1
 8000302:	1c11      	adds	r1, r2, #0
 8000304:	1c02      	adds	r2, r0, #0
 8000306:	430a      	orrs	r2, r1
 8000308:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800030a:	193a      	adds	r2, r7, r4
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	2301      	movs	r3, #1
 8000310:	2110      	movs	r1, #16
 8000312:	f7ff ffae 	bl	8000272 <lsm6dsr_write_reg>
 8000316:	0003      	movs	r3, r0
 8000318:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800031a:	68fb      	ldr	r3, [r7, #12]
}
 800031c:	0018      	movs	r0, r3
 800031e:	46bd      	mov	sp, r7
 8000320:	b005      	add	sp, #20
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	000a      	movs	r2, r1
 800032e:	1cfb      	adds	r3, r7, #3
 8000330:	701a      	strb	r2, [r3, #0]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8000332:	2317      	movs	r3, #23
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	1cfa      	adds	r2, r7, #3
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	701a      	strb	r2, [r3, #0]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800033c:	240c      	movs	r4, #12
 800033e:	193a      	adds	r2, r7, r4
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	0011      	movs	r1, r2
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f92f 	bl	80015a8 <lsm6dsr_fsm_enable_get>
 800034a:	0003      	movs	r3, r0
 800034c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d000      	beq.n	8000356 <lsm6dsr_xl_data_rate_set+0x32>
 8000354:	e105      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000356:	0021      	movs	r1, r4
 8000358:	187b      	adds	r3, r7, r1
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	07db      	lsls	r3, r3, #31
 800035e:	0fdb      	lsrs	r3, r3, #31
 8000360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8000362:	187b      	adds	r3, r7, r1
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	079b      	lsls	r3, r3, #30
 8000368:	0fdb      	lsrs	r3, r3, #31
 800036a:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800036c:	4313      	orrs	r3, r2
 800036e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8000370:	187b      	adds	r3, r7, r1
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	075b      	lsls	r3, r3, #29
 8000376:	0fdb      	lsrs	r3, r3, #31
 8000378:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800037a:	4313      	orrs	r3, r2
 800037c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800037e:	187b      	adds	r3, r7, r1
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	071b      	lsls	r3, r3, #28
 8000384:	0fdb      	lsrs	r3, r3, #31
 8000386:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8000388:	4313      	orrs	r3, r2
 800038a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800038c:	187b      	adds	r3, r7, r1
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	06db      	lsls	r3, r3, #27
 8000392:	0fdb      	lsrs	r3, r3, #31
 8000394:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8000396:	4313      	orrs	r3, r2
 8000398:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800039a:	187b      	adds	r3, r7, r1
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	069b      	lsls	r3, r3, #26
 80003a0:	0fdb      	lsrs	r3, r3, #31
 80003a2:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80003a4:	4313      	orrs	r3, r2
 80003a6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	065b      	lsls	r3, r3, #25
 80003ae:	0fdb      	lsrs	r3, r3, #31
 80003b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80003b2:	4313      	orrs	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	061b      	lsls	r3, r3, #24
 80003bc:	0fdb      	lsrs	r3, r3, #31
 80003be:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	785b      	ldrb	r3, [r3, #1]
 80003c8:	07db      	lsls	r3, r3, #31
 80003ca:	0fdb      	lsrs	r3, r3, #31
 80003cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80003ce:	4313      	orrs	r3, r2
 80003d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	785b      	ldrb	r3, [r3, #1]
 80003d6:	079b      	lsls	r3, r3, #30
 80003d8:	0fdb      	lsrs	r3, r3, #31
 80003da:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80003dc:	4313      	orrs	r3, r2
 80003de:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	785b      	ldrb	r3, [r3, #1]
 80003e4:	075b      	lsls	r3, r3, #29
 80003e6:	0fdb      	lsrs	r3, r3, #31
 80003e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	785b      	ldrb	r3, [r3, #1]
 80003f2:	071b      	lsls	r3, r3, #28
 80003f4:	0fdb      	lsrs	r3, r3, #31
 80003f6:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	785b      	ldrb	r3, [r3, #1]
 8000400:	06db      	lsls	r3, r3, #27
 8000402:	0fdb      	lsrs	r3, r3, #31
 8000404:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8000406:	4313      	orrs	r3, r2
 8000408:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800040a:	187b      	adds	r3, r7, r1
 800040c:	785b      	ldrb	r3, [r3, #1]
 800040e:	069b      	lsls	r3, r3, #26
 8000410:	0fdb      	lsrs	r3, r3, #31
 8000412:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8000414:	4313      	orrs	r3, r2
 8000416:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8000418:	187b      	adds	r3, r7, r1
 800041a:	785b      	ldrb	r3, [r3, #1]
 800041c:	065b      	lsls	r3, r3, #25
 800041e:	0fdb      	lsrs	r3, r3, #31
 8000420:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8000422:	4313      	orrs	r3, r2
 8000424:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8000426:	187b      	adds	r3, r7, r1
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	061b      	lsls	r3, r3, #24
 800042c:	0fdb      	lsrs	r3, r3, #31
 800042e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8000430:	4313      	orrs	r3, r2
 8000432:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000434:	2b01      	cmp	r3, #1
 8000436:	d000      	beq.n	800043a <lsm6dsr_xl_data_rate_set+0x116>
 8000438:	e093      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800043a:	240b      	movs	r4, #11
 800043c:	193a      	adds	r2, r7, r4
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0011      	movs	r1, r2
 8000442:	0018      	movs	r0, r3
 8000444:	f001 f8e2 	bl	800160c <lsm6dsr_fsm_data_rate_get>
 8000448:	0003      	movs	r3, r0
 800044a:	613b      	str	r3, [r7, #16]

      if (ret == 0)
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d000      	beq.n	8000454 <lsm6dsr_xl_data_rate_set+0x130>
 8000452:	e086      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 8000454:	193b      	adds	r3, r7, r4
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b03      	cmp	r3, #3
 800045a:	d052      	beq.n	8000502 <lsm6dsr_xl_data_rate_set+0x1de>
 800045c:	dd00      	ble.n	8000460 <lsm6dsr_xl_data_rate_set+0x13c>
 800045e:	e07a      	b.n	8000556 <lsm6dsr_xl_data_rate_set+0x232>
 8000460:	2b02      	cmp	r3, #2
 8000462:	d02d      	beq.n	80004c0 <lsm6dsr_xl_data_rate_set+0x19c>
 8000464:	dd00      	ble.n	8000468 <lsm6dsr_xl_data_rate_set+0x144>
 8000466:	e076      	b.n	8000556 <lsm6dsr_xl_data_rate_set+0x232>
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <lsm6dsr_xl_data_rate_set+0x14e>
 800046c:	2b01      	cmp	r3, #1
 800046e:	d00f      	beq.n	8000490 <lsm6dsr_xl_data_rate_set+0x16c>
 8000470:	e071      	b.n	8000556 <lsm6dsr_xl_data_rate_set+0x232>
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8000472:	1cfb      	adds	r3, r7, #3
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <lsm6dsr_xl_data_rate_set+0x160>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800047a:	2317      	movs	r3, #23
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8000482:	e06e      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
              odr_xl = val;
 8000484:	2317      	movs	r3, #23
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	1cfa      	adds	r2, r7, #3
 800048a:	7812      	ldrb	r2, [r2, #0]
 800048c:	701a      	strb	r2, [r3, #0]
            break;
 800048e:	e068      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8000490:	1cfb      	adds	r3, r7, #3
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d104      	bne.n	80004a2 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8000498:	2317      	movs	r3, #23
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	2202      	movs	r2, #2
 800049e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 80004a0:	e05f      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80004a2:	1cfb      	adds	r3, r7, #3
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d104      	bne.n	80004b4 <lsm6dsr_xl_data_rate_set+0x190>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80004aa:	2317      	movs	r3, #23
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	2202      	movs	r2, #2
 80004b0:	701a      	strb	r2, [r3, #0]
            break;
 80004b2:	e056      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
              odr_xl = val;
 80004b4:	2317      	movs	r3, #23
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	1cfa      	adds	r2, r7, #3
 80004ba:	7812      	ldrb	r2, [r2, #0]
 80004bc:	701a      	strb	r2, [r3, #0]
            break;
 80004be:	e050      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80004c0:	1cfb      	adds	r3, r7, #3
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d104      	bne.n	80004d2 <lsm6dsr_xl_data_rate_set+0x1ae>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80004c8:	2317      	movs	r3, #23
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	2203      	movs	r2, #3
 80004ce:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 80004d0:	e047      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80004d2:	1cfb      	adds	r3, r7, #3
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d104      	bne.n	80004e4 <lsm6dsr_xl_data_rate_set+0x1c0>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80004da:	2317      	movs	r3, #23
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	2203      	movs	r2, #3
 80004e0:	701a      	strb	r2, [r3, #0]
            break;
 80004e2:	e03e      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80004e4:	1cfb      	adds	r3, r7, #3
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d104      	bne.n	80004f6 <lsm6dsr_xl_data_rate_set+0x1d2>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80004ec:	2317      	movs	r3, #23
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	2203      	movs	r2, #3
 80004f2:	701a      	strb	r2, [r3, #0]
            break;
 80004f4:	e035      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
              odr_xl = val;
 80004f6:	2317      	movs	r3, #23
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	1cfa      	adds	r2, r7, #3
 80004fc:	7812      	ldrb	r2, [r2, #0]
 80004fe:	701a      	strb	r2, [r3, #0]
            break;
 8000500:	e02f      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8000502:	1cfb      	adds	r3, r7, #3
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d104      	bne.n	8000514 <lsm6dsr_xl_data_rate_set+0x1f0>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800050a:	2317      	movs	r3, #23
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	2204      	movs	r2, #4
 8000510:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8000512:	e026      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8000514:	1cfb      	adds	r3, r7, #3
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d104      	bne.n	8000526 <lsm6dsr_xl_data_rate_set+0x202>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800051c:	2317      	movs	r3, #23
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	2204      	movs	r2, #4
 8000522:	701a      	strb	r2, [r3, #0]
            break;
 8000524:	e01d      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8000526:	1cfb      	adds	r3, r7, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d104      	bne.n	8000538 <lsm6dsr_xl_data_rate_set+0x214>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800052e:	2317      	movs	r3, #23
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2204      	movs	r2, #4
 8000534:	701a      	strb	r2, [r3, #0]
            break;
 8000536:	e014      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8000538:	1cfb      	adds	r3, r7, #3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b03      	cmp	r3, #3
 800053e:	d104      	bne.n	800054a <lsm6dsr_xl_data_rate_set+0x226>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8000540:	2317      	movs	r3, #23
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	2204      	movs	r2, #4
 8000546:	701a      	strb	r2, [r3, #0]
            break;
 8000548:	e00b      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
              odr_xl = val;
 800054a:	2317      	movs	r3, #23
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	1cfa      	adds	r2, r7, #3
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	701a      	strb	r2, [r3, #0]
            break;
 8000554:	e005      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>

          default:
            odr_xl = val;
 8000556:	2317      	movs	r3, #23
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	1cfa      	adds	r2, r7, #3
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	701a      	strb	r2, [r3, #0]
            break;
 8000560:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d108      	bne.n	800057a <lsm6dsr_xl_data_rate_set+0x256>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL,
 8000568:	2308      	movs	r3, #8
 800056a:	18fa      	adds	r2, r7, r3
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	2110      	movs	r1, #16
 8000572:	f7ff fe55 	bl	8000220 <lsm6dsr_read_reg>
 8000576:	0003      	movs	r3, r0
 8000578:	613b      	str	r3, [r7, #16]
                           (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d117      	bne.n	80005b0 <lsm6dsr_xl_data_rate_set+0x28c>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8000580:	2317      	movs	r3, #23
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	220f      	movs	r2, #15
 8000588:	4013      	ands	r3, r2
 800058a:	b2da      	uxtb	r2, r3
 800058c:	2408      	movs	r4, #8
 800058e:	193b      	adds	r3, r7, r4
 8000590:	0110      	lsls	r0, r2, #4
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	210f      	movs	r1, #15
 8000596:	400a      	ands	r2, r1
 8000598:	1c11      	adds	r1, r2, #0
 800059a:	1c02      	adds	r2, r0, #0
 800059c:	430a      	orrs	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80005a0:	193a      	adds	r2, r7, r4
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	2301      	movs	r3, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	f7ff fe63 	bl	8000272 <lsm6dsr_write_reg>
 80005ac:	0003      	movs	r3, r0
 80005ae:	613b      	str	r3, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80005b0:	693b      	ldr	r3, [r7, #16]
}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b007      	add	sp, #28
 80005b8:	bd90      	pop	{r4, r7, pc}

080005ba <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80005ba:	b590      	push	{r4, r7, lr}
 80005bc:	b087      	sub	sp, #28
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	000a      	movs	r2, r1
 80005c4:	1cfb      	adds	r3, r7, #3
 80005c6:	701a      	strb	r2, [r3, #0]
  lsm6dsr_odr_g_t odr_gy =  val;
 80005c8:	2317      	movs	r3, #23
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	1cfa      	adds	r2, r7, #3
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	701a      	strb	r2, [r3, #0]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80005d2:	240c      	movs	r4, #12
 80005d4:	193a      	adds	r2, r7, r4
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 ffe4 	bl	80015a8 <lsm6dsr_fsm_enable_get>
 80005e0:	0003      	movs	r3, r0
 80005e2:	613b      	str	r3, [r7, #16]

  if (ret == 0)
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d000      	beq.n	80005ec <lsm6dsr_gy_data_rate_set+0x32>
 80005ea:	e105      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80005ec:	0021      	movs	r1, r4
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	07db      	lsls	r3, r3, #31
 80005f4:	0fdb      	lsrs	r3, r3, #31
 80005f6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	079b      	lsls	r3, r3, #30
 80005fe:	0fdb      	lsrs	r3, r3, #31
 8000600:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000602:	4313      	orrs	r3, r2
 8000604:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8000606:	187b      	adds	r3, r7, r1
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	075b      	lsls	r3, r3, #29
 800060c:	0fdb      	lsrs	r3, r3, #31
 800060e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8000610:	4313      	orrs	r3, r2
 8000612:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8000614:	187b      	adds	r3, r7, r1
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	071b      	lsls	r3, r3, #28
 800061a:	0fdb      	lsrs	r3, r3, #31
 800061c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800061e:	4313      	orrs	r3, r2
 8000620:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8000622:	187b      	adds	r3, r7, r1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	06db      	lsls	r3, r3, #27
 8000628:	0fdb      	lsrs	r3, r3, #31
 800062a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800062c:	4313      	orrs	r3, r2
 800062e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8000630:	187b      	adds	r3, r7, r1
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	069b      	lsls	r3, r3, #26
 8000636:	0fdb      	lsrs	r3, r3, #31
 8000638:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800063a:	4313      	orrs	r3, r2
 800063c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800063e:	187b      	adds	r3, r7, r1
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	065b      	lsls	r3, r3, #25
 8000644:	0fdb      	lsrs	r3, r3, #31
 8000646:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8000648:	4313      	orrs	r3, r2
 800064a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800064c:	187b      	adds	r3, r7, r1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	061b      	lsls	r3, r3, #24
 8000652:	0fdb      	lsrs	r3, r3, #31
 8000654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8000656:	4313      	orrs	r3, r2
 8000658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800065a:	187b      	adds	r3, r7, r1
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	07db      	lsls	r3, r3, #31
 8000660:	0fdb      	lsrs	r3, r3, #31
 8000662:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8000664:	4313      	orrs	r3, r2
 8000666:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8000668:	187b      	adds	r3, r7, r1
 800066a:	785b      	ldrb	r3, [r3, #1]
 800066c:	079b      	lsls	r3, r3, #30
 800066e:	0fdb      	lsrs	r3, r3, #31
 8000670:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8000672:	4313      	orrs	r3, r2
 8000674:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8000676:	187b      	adds	r3, r7, r1
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	075b      	lsls	r3, r3, #29
 800067c:	0fdb      	lsrs	r3, r3, #31
 800067e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8000680:	4313      	orrs	r3, r2
 8000682:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8000684:	187b      	adds	r3, r7, r1
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	071b      	lsls	r3, r3, #28
 800068a:	0fdb      	lsrs	r3, r3, #31
 800068c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800068e:	4313      	orrs	r3, r2
 8000690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8000692:	187b      	adds	r3, r7, r1
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	06db      	lsls	r3, r3, #27
 8000698:	0fdb      	lsrs	r3, r3, #31
 800069a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800069c:	4313      	orrs	r3, r2
 800069e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	069b      	lsls	r3, r3, #26
 80006a6:	0fdb      	lsrs	r3, r3, #31
 80006a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	065b      	lsls	r3, r3, #25
 80006b4:	0fdb      	lsrs	r3, r3, #31
 80006b6:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	061b      	lsls	r3, r3, #24
 80006c2:	0fdb      	lsrs	r3, r3, #31
 80006c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d000      	beq.n	80006d0 <lsm6dsr_gy_data_rate_set+0x116>
 80006ce:	e093      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80006d0:	240b      	movs	r4, #11
 80006d2:	193a      	adds	r2, r7, r4
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	0011      	movs	r1, r2
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 ff97 	bl	800160c <lsm6dsr_fsm_data_rate_get>
 80006de:	0003      	movs	r3, r0
 80006e0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d000      	beq.n	80006ea <lsm6dsr_gy_data_rate_set+0x130>
 80006e8:	e086      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d052      	beq.n	8000798 <lsm6dsr_gy_data_rate_set+0x1de>
 80006f2:	dd00      	ble.n	80006f6 <lsm6dsr_gy_data_rate_set+0x13c>
 80006f4:	e07a      	b.n	80007ec <lsm6dsr_gy_data_rate_set+0x232>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d02d      	beq.n	8000756 <lsm6dsr_gy_data_rate_set+0x19c>
 80006fa:	dd00      	ble.n	80006fe <lsm6dsr_gy_data_rate_set+0x144>
 80006fc:	e076      	b.n	80007ec <lsm6dsr_gy_data_rate_set+0x232>
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <lsm6dsr_gy_data_rate_set+0x14e>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d00f      	beq.n	8000726 <lsm6dsr_gy_data_rate_set+0x16c>
 8000706:	e071      	b.n	80007ec <lsm6dsr_gy_data_rate_set+0x232>
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8000708:	1cfb      	adds	r3, r7, #3
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d104      	bne.n	800071a <lsm6dsr_gy_data_rate_set+0x160>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8000710:	2317      	movs	r3, #23
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8000718:	e06e      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
              odr_gy = val;
 800071a:	2317      	movs	r3, #23
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	1cfa      	adds	r2, r7, #3
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	701a      	strb	r2, [r3, #0]
            break;
 8000724:	e068      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8000726:	1cfb      	adds	r3, r7, #3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d104      	bne.n	8000738 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800072e:	2317      	movs	r3, #23
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8000736:	e05f      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8000738:	1cfb      	adds	r3, r7, #3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d104      	bne.n	800074a <lsm6dsr_gy_data_rate_set+0x190>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8000740:	2317      	movs	r3, #23
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	2202      	movs	r2, #2
 8000746:	701a      	strb	r2, [r3, #0]
            break;
 8000748:	e056      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
              odr_gy = val;
 800074a:	2317      	movs	r3, #23
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	1cfa      	adds	r2, r7, #3
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	701a      	strb	r2, [r3, #0]
            break;
 8000754:	e050      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8000756:	1cfb      	adds	r3, r7, #3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d104      	bne.n	8000768 <lsm6dsr_gy_data_rate_set+0x1ae>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800075e:	2317      	movs	r3, #23
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	2203      	movs	r2, #3
 8000764:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8000766:	e047      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8000768:	1cfb      	adds	r3, r7, #3
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <lsm6dsr_gy_data_rate_set+0x1c0>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8000770:	2317      	movs	r3, #23
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2203      	movs	r2, #3
 8000776:	701a      	strb	r2, [r3, #0]
            break;
 8000778:	e03e      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800077a:	1cfb      	adds	r3, r7, #3
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d104      	bne.n	800078c <lsm6dsr_gy_data_rate_set+0x1d2>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8000782:	2317      	movs	r3, #23
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	2203      	movs	r2, #3
 8000788:	701a      	strb	r2, [r3, #0]
            break;
 800078a:	e035      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
              odr_gy = val;
 800078c:	2317      	movs	r3, #23
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	1cfa      	adds	r2, r7, #3
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
            break;
 8000796:	e02f      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8000798:	1cfb      	adds	r3, r7, #3
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d104      	bne.n	80007aa <lsm6dsr_gy_data_rate_set+0x1f0>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80007a0:	2317      	movs	r3, #23
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2204      	movs	r2, #4
 80007a6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 80007a8:	e026      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80007aa:	1cfb      	adds	r3, r7, #3
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d104      	bne.n	80007bc <lsm6dsr_gy_data_rate_set+0x202>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80007b2:	2317      	movs	r3, #23
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	2204      	movs	r2, #4
 80007b8:	701a      	strb	r2, [r3, #0]
            break;
 80007ba:	e01d      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80007bc:	1cfb      	adds	r3, r7, #3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d104      	bne.n	80007ce <lsm6dsr_gy_data_rate_set+0x214>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80007c4:	2317      	movs	r3, #23
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	2204      	movs	r2, #4
 80007ca:	701a      	strb	r2, [r3, #0]
            break;
 80007cc:	e014      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80007ce:	1cfb      	adds	r3, r7, #3
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d104      	bne.n	80007e0 <lsm6dsr_gy_data_rate_set+0x226>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80007d6:	2317      	movs	r3, #23
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2204      	movs	r2, #4
 80007dc:	701a      	strb	r2, [r3, #0]
            break;
 80007de:	e00b      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
              odr_gy = val;
 80007e0:	2317      	movs	r3, #23
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	1cfa      	adds	r2, r7, #3
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	701a      	strb	r2, [r3, #0]
            break;
 80007ea:	e005      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>

          default:
            odr_gy = val;
 80007ec:	2317      	movs	r3, #23
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	1cfa      	adds	r2, r7, #3
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	701a      	strb	r2, [r3, #0]
            break;
 80007f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d108      	bne.n	8000810 <lsm6dsr_gy_data_rate_set+0x256>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G,
 80007fe:	2308      	movs	r3, #8
 8000800:	18fa      	adds	r2, r7, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	2301      	movs	r3, #1
 8000806:	2111      	movs	r1, #17
 8000808:	f7ff fd0a 	bl	8000220 <lsm6dsr_read_reg>
 800080c:	0003      	movs	r3, r0
 800080e:	613b      	str	r3, [r7, #16]
                           (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d117      	bne.n	8000846 <lsm6dsr_gy_data_rate_set+0x28c>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8000816:	2317      	movs	r3, #23
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	220f      	movs	r2, #15
 800081e:	4013      	ands	r3, r2
 8000820:	b2da      	uxtb	r2, r3
 8000822:	2408      	movs	r4, #8
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0110      	lsls	r0, r2, #4
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	210f      	movs	r1, #15
 800082c:	400a      	ands	r2, r1
 800082e:	1c11      	adds	r1, r2, #0
 8000830:	1c02      	adds	r2, r0, #0
 8000832:	430a      	orrs	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G,
 8000836:	193a      	adds	r2, r7, r4
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	2301      	movs	r3, #1
 800083c:	2111      	movs	r1, #17
 800083e:	f7ff fd18 	bl	8000272 <lsm6dsr_write_reg>
 8000842:	0003      	movs	r3, r0
 8000844:	613b      	str	r3, [r7, #16]
                            (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8000846:	693b      	ldr	r3, [r7, #16]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b007      	add	sp, #28
 800084e:	bd90      	pop	{r4, r7, pc}

08000850 <lsm6dsr_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(const stmdev_ctx_t *ctx,
                                      uint8_t val)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	000a      	movs	r2, r1
 800085a:	1cfb      	adds	r3, r7, #3
 800085c:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 800085e:	2408      	movs	r4, #8
 8000860:	193a      	adds	r2, r7, r4
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	2301      	movs	r3, #1
 8000866:	2112      	movs	r1, #18
 8000868:	f7ff fcda 	bl	8000220 <lsm6dsr_read_reg>
 800086c:	0003      	movs	r3, r0
 800086e:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d117      	bne.n	80008a6 <lsm6dsr_block_data_update_set+0x56>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8000876:	1cfb      	adds	r3, r7, #3
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	b2da      	uxtb	r2, r3
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2101      	movs	r1, #1
 8000884:	400a      	ands	r2, r1
 8000886:	0190      	lsls	r0, r2, #6
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	2140      	movs	r1, #64	@ 0x40
 800088c:	438a      	bics	r2, r1
 800088e:	1c11      	adds	r1, r2, #0
 8000890:	1c02      	adds	r2, r0, #0
 8000892:	430a      	orrs	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C,
 8000896:	193a      	adds	r2, r7, r4
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	2301      	movs	r3, #1
 800089c:	2112      	movs	r1, #18
 800089e:	f7ff fce8 	bl	8000272 <lsm6dsr_write_reg>
 80008a2:	0003      	movs	r3, r0
 80008a4:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b005      	add	sp, #20
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <lsm6dsr_gy_power_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_power_mode_set(const stmdev_ctx_t *ctx,
                                  lsm6dsr_g_hm_mode_t val)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	000a      	movs	r2, r1
 80008ba:	1cfb      	adds	r3, r7, #3
 80008bc:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl7_g_t ctrl7_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL7_G,
 80008be:	2408      	movs	r4, #8
 80008c0:	193a      	adds	r2, r7, r4
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	2301      	movs	r3, #1
 80008c6:	2116      	movs	r1, #22
 80008c8:	f7ff fcaa 	bl	8000220 <lsm6dsr_read_reg>
 80008cc:	0003      	movs	r3, r0
 80008ce:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d115      	bne.n	8000902 <lsm6dsr_gy_power_mode_set+0x52>
  {
    ctrl7_g.g_hm_mode = (uint8_t)val;
 80008d6:	1cfb      	adds	r3, r7, #3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	01d0      	lsls	r0, r2, #7
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	217f      	movs	r1, #127	@ 0x7f
 80008e8:	400a      	ands	r2, r1
 80008ea:	1c11      	adds	r1, r2, #0
 80008ec:	1c02      	adds	r2, r0, #0
 80008ee:	430a      	orrs	r2, r1
 80008f0:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL7_G,
 80008f2:	193a      	adds	r2, r7, r4
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	2301      	movs	r3, #1
 80008f8:	2116      	movs	r1, #22
 80008fa:	f7ff fcba 	bl	8000272 <lsm6dsr_write_reg>
 80008fe:	0003      	movs	r3, r0
 8000900:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl7_g, 1);
  }

  return ret;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b005      	add	sp, #20
 800090a:	bd90      	pop	{r4, r7, pc}

0800090c <lsm6dsr_steps_reset>:
  * @param  ctx    Read / write interface definitions.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_steps_reset(const stmdev_ctx_t *ctx)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  lsm6dsr_emb_func_src_t emb_func_src;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2102      	movs	r1, #2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 f82f 	bl	800097c <lsm6dsr_mem_bank_set>
 800091e:	0003      	movs	r3, r0
 8000920:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d108      	bne.n	800093a <lsm6dsr_steps_reset+0x2e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_SRC,
 8000928:	2308      	movs	r3, #8
 800092a:	18fa      	adds	r2, r7, r3
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	2301      	movs	r3, #1
 8000930:	2164      	movs	r1, #100	@ 0x64
 8000932:	f7ff fc75 	bl	8000220 <lsm6dsr_read_reg>
 8000936:	0003      	movs	r3, r0
 8000938:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&emb_func_src, 1);
  }

  if (ret == 0)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10e      	bne.n	800095e <lsm6dsr_steps_reset+0x52>
  {
    emb_func_src.pedo_rst_step = PROPERTY_ENABLE;
 8000940:	2008      	movs	r0, #8
 8000942:	183b      	adds	r3, r7, r0
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	4249      	negs	r1, r1
 800094a:	430a      	orrs	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_SRC,
 800094e:	183a      	adds	r2, r7, r0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	2301      	movs	r3, #1
 8000954:	2164      	movs	r1, #100	@ 0x64
 8000956:	f7ff fc8c 	bl	8000272 <lsm6dsr_write_reg>
 800095a:	0003      	movs	r3, r0
 800095c:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&emb_func_src, 1);
  }

  if (ret == 0)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d106      	bne.n	8000972 <lsm6dsr_steps_reset+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2100      	movs	r1, #0
 8000968:	0018      	movs	r0, r3
 800096a:	f000 f807 	bl	800097c <lsm6dsr_mem_bank_set>
 800096e:	0003      	movs	r3, r0
 8000970:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}

0800097c <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(const stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	000a      	movs	r2, r1
 8000986:	1cfb      	adds	r3, r7, #3
 8000988:	701a      	strb	r2, [r3, #0]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800098a:	2408      	movs	r4, #8
 800098c:	193a      	adds	r2, r7, r4
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	2301      	movs	r3, #1
 8000992:	2101      	movs	r1, #1
 8000994:	f7ff fc44 	bl	8000220 <lsm6dsr_read_reg>
 8000998:	0003      	movs	r3, r0
 800099a:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d115      	bne.n	80009ce <lsm6dsr_mem_bank_set+0x52>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80009a2:	1cfb      	adds	r3, r7, #3
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2203      	movs	r2, #3
 80009a8:	4013      	ands	r3, r2
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0190      	lsls	r0, r2, #6
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	213f      	movs	r1, #63	@ 0x3f
 80009b4:	400a      	ands	r2, r1
 80009b6:	1c11      	adds	r1, r2, #0
 80009b8:	1c02      	adds	r2, r0, #0
 80009ba:	430a      	orrs	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80009be:	193a      	adds	r2, r7, r4
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	2301      	movs	r3, #1
 80009c4:	2101      	movs	r1, #1
 80009c6:	f7ff fc54 	bl	8000272 <lsm6dsr_write_reg>
 80009ca:	0003      	movs	r3, r0
 80009cc:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b005      	add	sp, #20
 80009d6:	bd90      	pop	{r4, r7, pc}

080009d8 <lsm6dsr_ln_pg_write_byte>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_ln_pg_write_byte(const stmdev_ctx_t *ctx, uint16_t add,
                                 uint8_t *val)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	230a      	movs	r3, #10
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	1c0a      	adds	r2, r1, #0
 80009e8:	801a      	strh	r2, [r3, #0]
  lsm6dsr_page_rw_t page_rw;
  lsm6dsr_page_sel_t page_sel;
  lsm6dsr_page_address_t page_address;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2102      	movs	r1, #2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff ffc4 	bl	800097c <lsm6dsr_mem_bank_set>
 80009f4:	0003      	movs	r3, r0
 80009f6:	61fb      	str	r3, [r7, #28]

  if (ret == 0)
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d108      	bne.n	8000a10 <lsm6dsr_ln_pg_write_byte+0x38>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 80009fe:	2318      	movs	r3, #24
 8000a00:	18fa      	adds	r2, r7, r3
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	2301      	movs	r3, #1
 8000a06:	2117      	movs	r1, #23
 8000a08:	f7ff fc0a 	bl	8000220 <lsm6dsr_read_reg>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d110      	bne.n	8000a38 <lsm6dsr_ln_pg_write_byte+0x60>
  {
    page_rw.page_rw = 0x02U; /* page_write enable */
 8000a16:	2018      	movs	r0, #24
 8000a18:	183b      	adds	r3, r7, r0
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	2160      	movs	r1, #96	@ 0x60
 8000a1e:	438a      	bics	r2, r1
 8000a20:	1c11      	adds	r1, r2, #0
 8000a22:	2240      	movs	r2, #64	@ 0x40
 8000a24:	430a      	orrs	r2, r1
 8000a26:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8000a28:	183a      	adds	r2, r7, r0
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2117      	movs	r1, #23
 8000a30:	f7ff fc1f 	bl	8000272 <lsm6dsr_write_reg>
 8000a34:	0003      	movs	r3, r0
 8000a36:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d108      	bne.n	8000a50 <lsm6dsr_ln_pg_write_byte+0x78>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_SEL,
 8000a3e:	2314      	movs	r3, #20
 8000a40:	18fa      	adds	r2, r7, r3
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	2301      	movs	r3, #1
 8000a46:	2102      	movs	r1, #2
 8000a48:	f7ff fbea 	bl	8000220 <lsm6dsr_read_reg>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_sel, 1);
  }

  if (ret == 0)
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d122      	bne.n	8000a9c <lsm6dsr_ln_pg_write_byte+0xc4>
  {
    page_sel.page_sel = (uint8_t)((add / 256U) & 0x0FU);
 8000a56:	230a      	movs	r3, #10
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	1c1a      	adds	r2, r3, #0
 8000a62:	230f      	movs	r3, #15
 8000a64:	4013      	ands	r3, r2
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	2414      	movs	r4, #20
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0110      	lsls	r0, r2, #4
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	210f      	movs	r1, #15
 8000a72:	400a      	ands	r2, r1
 8000a74:	1c11      	adds	r1, r2, #0
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	701a      	strb	r2, [r3, #0]
    page_sel.not_used_01 = 1;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	210f      	movs	r1, #15
 8000a82:	438a      	bics	r2, r1
 8000a84:	1c11      	adds	r1, r2, #0
 8000a86:	2201      	movs	r2, #1
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_SEL,
 8000a8c:	193a      	adds	r2, r7, r4
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	2301      	movs	r3, #1
 8000a92:	2102      	movs	r1, #2
 8000a94:	f7ff fbed 	bl	8000272 <lsm6dsr_write_reg>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_sel, 1);
  }

  if (ret == 0)
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10e      	bne.n	8000ac0 <lsm6dsr_ln_pg_write_byte+0xe8>
  {
    page_address.page_addr = (uint8_t)(add - (page_sel.page_sel * 256U));
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	2110      	movs	r1, #16
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_ADDRESS,
 8000ab0:	187a      	adds	r2, r7, r1
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	f7ff fbdb 	bl	8000272 <lsm6dsr_write_reg>
 8000abc:	0003      	movs	r3, r0
 8000abe:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_address, 1);
  }

  if (ret == 0)
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d107      	bne.n	8000ad6 <lsm6dsr_ln_pg_write_byte+0xfe>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_VALUE, val, 1);
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	2301      	movs	r3, #1
 8000acc:	2109      	movs	r1, #9
 8000ace:	f7ff fbd0 	bl	8000272 <lsm6dsr_write_reg>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	61fb      	str	r3, [r7, #28]
  }

  if (ret == 0)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d108      	bne.n	8000aee <lsm6dsr_ln_pg_write_byte+0x116>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 8000adc:	2318      	movs	r3, #24
 8000ade:	18fa      	adds	r2, r7, r3
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	2117      	movs	r1, #23
 8000ae6:	f7ff fb9b 	bl	8000220 <lsm6dsr_read_reg>
 8000aea:	0003      	movs	r3, r0
 8000aec:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10d      	bne.n	8000b10 <lsm6dsr_ln_pg_write_byte+0x138>
  {
    page_rw.page_rw = 0x00; /* page_write disable */
 8000af4:	2018      	movs	r0, #24
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	2160      	movs	r1, #96	@ 0x60
 8000afc:	438a      	bics	r2, r1
 8000afe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8000b00:	183a      	adds	r2, r7, r0
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	2301      	movs	r3, #1
 8000b06:	2117      	movs	r1, #23
 8000b08:	f7ff fbb3 	bl	8000272 <lsm6dsr_write_reg>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d106      	bne.n	8000b24 <lsm6dsr_ln_pg_write_byte+0x14c>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f7ff ff2e 	bl	800097c <lsm6dsr_mem_bank_set>
 8000b20:	0003      	movs	r3, r0
 8000b22:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8000b24:	69fb      	ldr	r3, [r7, #28]
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b009      	add	sp, #36	@ 0x24
 8000b2c:	bd90      	pop	{r4, r7, pc}

08000b2e <lsm6dsr_ln_pg_read_byte>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_ln_pg_read_byte(const stmdev_ctx_t *ctx, uint16_t add,
                                uint8_t *val)
{
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b089      	sub	sp, #36	@ 0x24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	230a      	movs	r3, #10
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	1c0a      	adds	r2, r1, #0
 8000b3e:	801a      	strh	r2, [r3, #0]
  lsm6dsr_page_rw_t page_rw;
  lsm6dsr_page_sel_t page_sel;
  lsm6dsr_page_address_t page_address;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2102      	movs	r1, #2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ff19 	bl	800097c <lsm6dsr_mem_bank_set>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	61fb      	str	r3, [r7, #28]

  if (ret == 0)
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d108      	bne.n	8000b66 <lsm6dsr_ln_pg_read_byte+0x38>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 8000b54:	2318      	movs	r3, #24
 8000b56:	18fa      	adds	r2, r7, r3
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2117      	movs	r1, #23
 8000b5e:	f7ff fb5f 	bl	8000220 <lsm6dsr_read_reg>
 8000b62:	0003      	movs	r3, r0
 8000b64:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d110      	bne.n	8000b8e <lsm6dsr_ln_pg_read_byte+0x60>
  {
    page_rw.page_rw = 0x01U; /* page_read enable*/
 8000b6c:	2018      	movs	r0, #24
 8000b6e:	183b      	adds	r3, r7, r0
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	2160      	movs	r1, #96	@ 0x60
 8000b74:	438a      	bics	r2, r1
 8000b76:	1c11      	adds	r1, r2, #0
 8000b78:	2220      	movs	r2, #32
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8000b7e:	183a      	adds	r2, r7, r0
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	2301      	movs	r3, #1
 8000b84:	2117      	movs	r1, #23
 8000b86:	f7ff fb74 	bl	8000272 <lsm6dsr_write_reg>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d108      	bne.n	8000ba6 <lsm6dsr_ln_pg_read_byte+0x78>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_SEL,
 8000b94:	2314      	movs	r3, #20
 8000b96:	18fa      	adds	r2, r7, r3
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	f7ff fb3f 	bl	8000220 <lsm6dsr_read_reg>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_sel, 1);
  }

  if (ret == 0)
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d122      	bne.n	8000bf2 <lsm6dsr_ln_pg_read_byte+0xc4>
  {
    page_sel.page_sel = (uint8_t)((add / 256U) & 0x0FU);
 8000bac:	230a      	movs	r3, #10
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	1c1a      	adds	r2, r3, #0
 8000bb8:	230f      	movs	r3, #15
 8000bba:	4013      	ands	r3, r2
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	2414      	movs	r4, #20
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	0110      	lsls	r0, r2, #4
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	400a      	ands	r2, r1
 8000bca:	1c11      	adds	r1, r2, #0
 8000bcc:	1c02      	adds	r2, r0, #0
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
    page_sel.not_used_01 = 1;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	438a      	bics	r2, r1
 8000bda:	1c11      	adds	r1, r2, #0
 8000bdc:	2201      	movs	r2, #1
 8000bde:	430a      	orrs	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_SEL,
 8000be2:	193a      	adds	r2, r7, r4
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	2301      	movs	r3, #1
 8000be8:	2102      	movs	r1, #2
 8000bea:	f7ff fb42 	bl	8000272 <lsm6dsr_write_reg>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_sel, 1);
  }

  if (ret == 0)
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10e      	bne.n	8000c16 <lsm6dsr_ln_pg_read_byte+0xe8>
  {
    page_address.page_addr = (uint8_t)(add - (page_sel.page_sel * 256U));
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	2110      	movs	r1, #16
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_ADDRESS,
 8000c06:	187a      	adds	r2, r7, r1
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	f7ff fb30 	bl	8000272 <lsm6dsr_write_reg>
 8000c12:	0003      	movs	r3, r0
 8000c14:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_address, 1);
  }

  if (ret == 0)
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <lsm6dsr_ln_pg_read_byte+0xfe>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_VALUE, val, 2);
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	2302      	movs	r3, #2
 8000c22:	2109      	movs	r1, #9
 8000c24:	f7ff fafc 	bl	8000220 <lsm6dsr_read_reg>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	61fb      	str	r3, [r7, #28]
  }

  if (ret == 0)
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d108      	bne.n	8000c44 <lsm6dsr_ln_pg_read_byte+0x116>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 8000c32:	2318      	movs	r3, #24
 8000c34:	18fa      	adds	r2, r7, r3
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	2117      	movs	r1, #23
 8000c3c:	f7ff faf0 	bl	8000220 <lsm6dsr_read_reg>
 8000c40:	0003      	movs	r3, r0
 8000c42:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10d      	bne.n	8000c66 <lsm6dsr_ln_pg_read_byte+0x138>
  {
    page_rw.page_rw = 0x00U; /* page_read disable */
 8000c4a:	2018      	movs	r0, #24
 8000c4c:	183b      	adds	r3, r7, r0
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	2160      	movs	r1, #96	@ 0x60
 8000c52:	438a      	bics	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8000c56:	183a      	adds	r2, r7, r0
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	2117      	movs	r1, #23
 8000c5e:	f7ff fb08 	bl	8000272 <lsm6dsr_write_reg>
 8000c62:	0003      	movs	r3, r0
 8000c64:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d106      	bne.n	8000c7a <lsm6dsr_ln_pg_read_byte+0x14c>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2100      	movs	r1, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fe83 	bl	800097c <lsm6dsr_mem_bank_set>
 8000c76:	0003      	movs	r3, r0
 8000c78:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8000c7a:	69fb      	ldr	r3, [r7, #28]
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b009      	add	sp, #36	@ 0x24
 8000c82:	bd90      	pop	{r4, r7, pc}

08000c84 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	2301      	movs	r3, #1
 8000c94:	210f      	movs	r1, #15
 8000c96:	f7ff fac3 	bl	8000220 <lsm6dsr_read_reg>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	60fb      	str	r3, [r7, #12]

  return ret;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b004      	add	sp, #16
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	1cfb      	adds	r3, r7, #3
 8000cb4:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 8000cb6:	2408      	movs	r4, #8
 8000cb8:	193a      	adds	r2, r7, r4
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	2112      	movs	r1, #18
 8000cc0:	f7ff faae 	bl	8000220 <lsm6dsr_read_reg>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d117      	bne.n	8000cfe <lsm6dsr_reset_set+0x56>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8000cce:	1cfb      	adds	r3, r7, #3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2101      	movs	r1, #1
 8000cdc:	400a      	ands	r2, r1
 8000cde:	0010      	movs	r0, r2
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	438a      	bics	r2, r1
 8000ce6:	1c11      	adds	r1, r2, #0
 8000ce8:	1c02      	adds	r2, r0, #0
 8000cea:	430a      	orrs	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C,
 8000cee:	193a      	adds	r2, r7, r4
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	2112      	movs	r1, #18
 8000cf6:	f7ff fabc 	bl	8000272 <lsm6dsr_write_reg>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b005      	add	sp, #20
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 8000d12:	2408      	movs	r4, #8
 8000d14:	193a      	adds	r2, r7, r4
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	2112      	movs	r1, #18
 8000d1c:	f7ff fa80 	bl	8000220 <lsm6dsr_read_reg>
 8000d20:	0003      	movs	r3, r0
 8000d22:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	07db      	lsls	r3, r3, #31
 8000d2a:	0fdb      	lsrs	r3, r3, #31
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	001a      	movs	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	701a      	strb	r2, [r3, #0]

  return ret;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b005      	add	sp, #20
 8000d3c:	bd90      	pop	{r4, r7, pc}

08000d3e <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(const stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8000d3e:	b590      	push	{r4, r7, lr}
 8000d40:	b087      	sub	sp, #28
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	000a      	movs	r2, r1
 8000d48:	1cfb      	adds	r3, r7, #3
 8000d4a:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8000d4c:	2410      	movs	r4, #16
 8000d4e:	193a      	adds	r2, r7, r4
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	2301      	movs	r3, #1
 8000d54:	2118      	movs	r1, #24
 8000d56:	f7ff fa63 	bl	8000220 <lsm6dsr_read_reg>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d11a      	bne.n	8000d9a <lsm6dsr_i3c_disable_set+0x5c>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8000d64:	1cfb      	adds	r3, r7, #3
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	09db      	lsrs	r3, r3, #7
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	1c1a      	adds	r2, r3, #0
 8000d6e:	2301      	movs	r3, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2101      	movs	r1, #1
 8000d78:	400a      	ands	r2, r1
 8000d7a:	1890      	adds	r0, r2, r2
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	2102      	movs	r1, #2
 8000d80:	438a      	bics	r2, r1
 8000d82:	1c11      	adds	r1, r2, #0
 8000d84:	1c02      	adds	r2, r0, #0
 8000d86:	430a      	orrs	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8000d8a:	193a      	adds	r2, r7, r4
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2118      	movs	r1, #24
 8000d92:	f7ff fa6e 	bl	8000272 <lsm6dsr_write_reg>
 8000d96:	0003      	movs	r3, r0
 8000d98:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d108      	bne.n	8000db2 <lsm6dsr_i3c_disable_set+0x74>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8000da0:	230c      	movs	r3, #12
 8000da2:	18fa      	adds	r2, r7, r3
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	2301      	movs	r3, #1
 8000da8:	2162      	movs	r1, #98	@ 0x62
 8000daa:	f7ff fa39 	bl	8000220 <lsm6dsr_read_reg>
 8000dae:	0003      	movs	r3, r0
 8000db0:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d118      	bne.n	8000dea <lsm6dsr_i3c_disable_set+0xac>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8000db8:	1cfb      	adds	r3, r7, #3
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	240c      	movs	r4, #12
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	400a      	ands	r2, r1
 8000dca:	00d0      	lsls	r0, r2, #3
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	2118      	movs	r1, #24
 8000dd0:	438a      	bics	r2, r1
 8000dd2:	1c11      	adds	r1, r2, #0
 8000dd4:	1c02      	adds	r2, r0, #0
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8000dda:	193a      	adds	r2, r7, r4
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	2301      	movs	r3, #1
 8000de0:	2162      	movs	r1, #98	@ 0x62
 8000de2:	f7ff fa46 	bl	8000272 <lsm6dsr_write_reg>
 8000de6:	0003      	movs	r3, r0
 8000de8:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8000dea:	697b      	ldr	r3, [r7, #20]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b007      	add	sp, #28
 8000df2:	bd90      	pop	{r4, r7, pc}

08000df4 <lsm6dsr_pin_int2_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int2_route_set(const stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int2_route_t *val)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  lsm6dsr_tap_cfg2_t tap_cfg2;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2102      	movs	r1, #2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fdba 	bl	800097c <lsm6dsr_mem_bank_set>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <lsm6dsr_pin_int2_route_set+0x30>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT2,
                            (uint8_t *)&val->emb_func_int2, 1);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT2,
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	210e      	movs	r1, #14
 8000e1c:	f7ff fa29 	bl	8000272 <lsm6dsr_write_reg>
 8000e20:	0003      	movs	r3, r0
 8000e22:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d108      	bne.n	8000e3c <lsm6dsr_pin_int2_route_set+0x48>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT2_A,
                            (uint8_t *)&val->fsm_int2_a, 1);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT2_A,
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	2301      	movs	r3, #1
 8000e32:	210f      	movs	r1, #15
 8000e34:	f7ff fa1d 	bl	8000272 <lsm6dsr_write_reg>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d108      	bne.n	8000e54 <lsm6dsr_pin_int2_route_set+0x60>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT2_B,
                            (uint8_t *)&val->fsm_int2_b, 1);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT2_B,
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	f7ff fa11 	bl	8000272 <lsm6dsr_write_reg>
 8000e50:	0003      	movs	r3, r0
 8000e52:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <lsm6dsr_pin_int2_route_set+0x74>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fd8c 	bl	800097c <lsm6dsr_mem_bank_set>
 8000e64:	0003      	movs	r3, r0
 8000e66:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d000      	beq.n	8000e70 <lsm6dsr_pin_int2_route_set+0x7c>
 8000e6e:	e09e      	b.n	8000fae <lsm6dsr_pin_int2_route_set+0x1ba>
  {
    if ((val->emb_func_int2.int2_step_detector |
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	789b      	ldrb	r3, [r3, #2]
 8000e74:	071b      	lsls	r3, r3, #28
 8000e76:	0fdb      	lsrs	r3, r3, #31
 8000e78:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_tilt |
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	789b      	ldrb	r3, [r3, #2]
 8000e7e:	06db      	lsls	r3, r3, #27
 8000e80:	0fdb      	lsrs	r3, r3, #31
 8000e82:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int2.int2_step_detector |
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_sig_mot |
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	069b      	lsls	r3, r3, #26
 8000e8e:	0fdb      	lsrs	r3, r3, #31
 8000e90:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_tilt |
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_fsm_lc |
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	789b      	ldrb	r3, [r3, #2]
 8000e9a:	061b      	lsls	r3, r3, #24
 8000e9c:	0fdb      	lsrs	r3, r3, #31
 8000e9e:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_sig_mot |
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm1 |
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	78db      	ldrb	r3, [r3, #3]
 8000ea8:	07db      	lsls	r3, r3, #31
 8000eaa:	0fdb      	lsrs	r3, r3, #31
 8000eac:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_fsm_lc |
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm2 |
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	78db      	ldrb	r3, [r3, #3]
 8000eb6:	079b      	lsls	r3, r3, #30
 8000eb8:	0fdb      	lsrs	r3, r3, #31
 8000eba:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm1 |
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm3 |
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	78db      	ldrb	r3, [r3, #3]
 8000ec4:	075b      	lsls	r3, r3, #29
 8000ec6:	0fdb      	lsrs	r3, r3, #31
 8000ec8:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm2 |
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm4 |
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	071b      	lsls	r3, r3, #28
 8000ed4:	0fdb      	lsrs	r3, r3, #31
 8000ed6:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm3 |
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm5 |
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	78db      	ldrb	r3, [r3, #3]
 8000ee0:	06db      	lsls	r3, r3, #27
 8000ee2:	0fdb      	lsrs	r3, r3, #31
 8000ee4:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm4 |
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm6 |
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	78db      	ldrb	r3, [r3, #3]
 8000eee:	069b      	lsls	r3, r3, #26
 8000ef0:	0fdb      	lsrs	r3, r3, #31
 8000ef2:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm5 |
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm7 |
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	78db      	ldrb	r3, [r3, #3]
 8000efc:	065b      	lsls	r3, r3, #25
 8000efe:	0fdb      	lsrs	r3, r3, #31
 8000f00:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm6 |
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm8 |
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	78db      	ldrb	r3, [r3, #3]
 8000f0a:	061b      	lsls	r3, r3, #24
 8000f0c:	0fdb      	lsrs	r3, r3, #31
 8000f0e:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm7 |
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm9 |
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	791b      	ldrb	r3, [r3, #4]
 8000f18:	07db      	lsls	r3, r3, #31
 8000f1a:	0fdb      	lsrs	r3, r3, #31
 8000f1c:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm8 |
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm10 |
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	079b      	lsls	r3, r3, #30
 8000f28:	0fdb      	lsrs	r3, r3, #31
 8000f2a:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm9 |
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm11 |
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	791b      	ldrb	r3, [r3, #4]
 8000f34:	075b      	lsls	r3, r3, #29
 8000f36:	0fdb      	lsrs	r3, r3, #31
 8000f38:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm10 |
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm12 |
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	071b      	lsls	r3, r3, #28
 8000f44:	0fdb      	lsrs	r3, r3, #31
 8000f46:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm11 |
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm13 |
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	791b      	ldrb	r3, [r3, #4]
 8000f50:	06db      	lsls	r3, r3, #27
 8000f52:	0fdb      	lsrs	r3, r3, #31
 8000f54:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm12 |
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm14 |
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	069b      	lsls	r3, r3, #26
 8000f60:	0fdb      	lsrs	r3, r3, #31
 8000f62:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm13 |
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm15 |
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	791b      	ldrb	r3, [r3, #4]
 8000f6c:	065b      	lsls	r3, r3, #25
 8000f6e:	0fdb      	lsrs	r3, r3, #31
 8000f70:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm14 |
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	791b      	ldrb	r3, [r3, #4]
 8000f7a:	061b      	lsls	r3, r3, #24
 8000f7c:	0fdb      	lsrs	r3, r3, #31
 8000f7e:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm15 |
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int2.int2_step_detector |
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <lsm6dsr_pin_int2_route_set+0x1a0>
    {
      val->md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	785a      	ldrb	r2, [r3, #1]
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	705a      	strb	r2, [r3, #1]
 8000f92:	e004      	b.n	8000f9e <lsm6dsr_pin_int2_route_set+0x1aa>
    }
    else
    {
      val->md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	785a      	ldrb	r2, [r3, #1]
 8000f98:	2102      	movs	r1, #2
 8000f9a:	438a      	bics	r2, r1
 8000f9c:	705a      	strb	r2, [r3, #1]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT2_CTRL,
                            (uint8_t *)&val->int2_ctrl, 1);
 8000f9e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT2_CTRL,
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	210e      	movs	r1, #14
 8000fa6:	f7ff f964 	bl	8000272 <lsm6dsr_write_reg>
 8000faa:	0003      	movs	r3, r0
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d108      	bne.n	8000fc6 <lsm6dsr_pin_int2_route_set+0x1d2>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD2_CFG,
                            (uint8_t *)&val->md2_cfg, 1);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD2_CFG,
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	215f      	movs	r1, #95	@ 0x5f
 8000fbe:	f7ff f958 	bl	8000272 <lsm6dsr_write_reg>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d108      	bne.n	8000fde <lsm6dsr_pin_int2_route_set+0x1ea>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG2,
 8000fcc:	2308      	movs	r3, #8
 8000fce:	18fa      	adds	r2, r7, r3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2158      	movs	r1, #88	@ 0x58
 8000fd6:	f7ff f923 	bl	8000220 <lsm6dsr_read_reg>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&tap_cfg2, 1);
  }

  if (ret == 0)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d171      	bne.n	80010c8 <lsm6dsr_pin_int2_route_set+0x2d4>
  {
    if ((val->int2_ctrl.int2_drdy_xl |
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	07db      	lsls	r3, r3, #31
 8000fea:	0fdb      	lsrs	r3, r3, #31
 8000fec:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_drdy_g |
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	079b      	lsls	r3, r3, #30
 8000ff4:	0fdb      	lsrs	r3, r3, #31
 8000ff6:	b2db      	uxtb	r3, r3
    if ((val->int2_ctrl.int2_drdy_xl |
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_drdy_temp |
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	075b      	lsls	r3, r3, #29
 8001002:	0fdb      	lsrs	r3, r3, #31
 8001004:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_drdy_g |
 8001006:	4313      	orrs	r3, r2
 8001008:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_th |
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	071b      	lsls	r3, r3, #28
 8001010:	0fdb      	lsrs	r3, r3, #31
 8001012:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_drdy_temp |
 8001014:	4313      	orrs	r3, r2
 8001016:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_ovr |
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	06db      	lsls	r3, r3, #27
 800101e:	0fdb      	lsrs	r3, r3, #31
 8001020:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_th |
 8001022:	4313      	orrs	r3, r2
 8001024:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_full |
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	069b      	lsls	r3, r3, #26
 800102c:	0fdb      	lsrs	r3, r3, #31
 800102e:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_ovr |
 8001030:	4313      	orrs	r3, r2
 8001032:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_cnt_bdr |
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	065b      	lsls	r3, r3, #25
 800103a:	0fdb      	lsrs	r3, r3, #31
 800103c:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_full |
 800103e:	4313      	orrs	r3, r2
 8001040:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_6d |
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	075b      	lsls	r3, r3, #29
 8001048:	0fdb      	lsrs	r3, r3, #31
 800104a:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_cnt_bdr |
 800104c:	4313      	orrs	r3, r2
 800104e:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_double_tap |
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	071b      	lsls	r3, r3, #28
 8001056:	0fdb      	lsrs	r3, r3, #31
 8001058:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_6d |
 800105a:	4313      	orrs	r3, r2
 800105c:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_ff |
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	785b      	ldrb	r3, [r3, #1]
 8001062:	06db      	lsls	r3, r3, #27
 8001064:	0fdb      	lsrs	r3, r3, #31
 8001066:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_double_tap |
 8001068:	4313      	orrs	r3, r2
 800106a:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_wu |
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	069b      	lsls	r3, r3, #26
 8001072:	0fdb      	lsrs	r3, r3, #31
 8001074:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_ff |
 8001076:	4313      	orrs	r3, r2
 8001078:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_single_tap |
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	065b      	lsls	r3, r3, #25
 8001080:	0fdb      	lsrs	r3, r3, #31
 8001082:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_wu |
 8001084:	4313      	orrs	r3, r2
 8001086:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_sleep_change) != PROPERTY_DISABLE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	061b      	lsls	r3, r3, #24
 800108e:	0fdb      	lsrs	r3, r3, #31
 8001090:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_single_tap |
 8001092:	4313      	orrs	r3, r2
 8001094:	b2db      	uxtb	r3, r3
    if ((val->int2_ctrl.int2_drdy_xl |
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <lsm6dsr_pin_int2_route_set+0x2b6>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800109a:	2308      	movs	r3, #8
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	2180      	movs	r1, #128	@ 0x80
 80010a2:	4249      	negs	r1, r1
 80010a4:	430a      	orrs	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e005      	b.n	80010b6 <lsm6dsr_pin_int2_route_set+0x2c2>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 80010aa:	2308      	movs	r3, #8
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	217f      	movs	r1, #127	@ 0x7f
 80010b2:	400a      	ands	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG2,
 80010b6:	2308      	movs	r3, #8
 80010b8:	18fa      	adds	r2, r7, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	2301      	movs	r3, #1
 80010be:	2158      	movs	r1, #88	@ 0x58
 80010c0:	f7ff f8d7 	bl	8000272 <lsm6dsr_write_reg>
 80010c4:	0003      	movs	r3, r0
 80010c6:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <lsm6dsr_pin_int2_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int2_route_get(const stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int2_route_t *val)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2102      	movs	r1, #2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff fc4b 	bl	800097c <lsm6dsr_mem_bank_set>
 80010e6:	0003      	movs	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d108      	bne.n	8001102 <lsm6dsr_pin_int2_route_get+0x30>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT2,
                           (uint8_t *)&val->emb_func_int2, 1);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT2,
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	2301      	movs	r3, #1
 80010f8:	210e      	movs	r1, #14
 80010fa:	f7ff f891 	bl	8000220 <lsm6dsr_read_reg>
 80010fe:	0003      	movs	r3, r0
 8001100:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d108      	bne.n	800111a <lsm6dsr_pin_int2_route_get+0x48>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT2_A,
                           (uint8_t *)&val->fsm_int2_a, 1);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT2_A,
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	2301      	movs	r3, #1
 8001110:	210f      	movs	r1, #15
 8001112:	f7ff f885 	bl	8000220 <lsm6dsr_read_reg>
 8001116:	0003      	movs	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <lsm6dsr_pin_int2_route_get+0x60>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT2_B,
                           (uint8_t *)&val->fsm_int2_b, 1);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT2_B,
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	2301      	movs	r3, #1
 8001128:	2110      	movs	r1, #16
 800112a:	f7ff f879 	bl	8000220 <lsm6dsr_read_reg>
 800112e:	0003      	movs	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <lsm6dsr_pin_int2_route_get+0x74>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2100      	movs	r1, #0
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff fc1d 	bl	800097c <lsm6dsr_mem_bank_set>
 8001142:	0003      	movs	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <lsm6dsr_pin_int2_route_get+0x8a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT2_CTRL,
                           (uint8_t *)&val->int2_ctrl, 1);
 800114c:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT2_CTRL,
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	2301      	movs	r3, #1
 8001152:	210e      	movs	r1, #14
 8001154:	f7ff f864 	bl	8000220 <lsm6dsr_read_reg>
 8001158:	0003      	movs	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d108      	bne.n	8001174 <lsm6dsr_pin_int2_route_get+0xa2>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD2_CFG,
                           (uint8_t *)&val->md2_cfg, 1);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD2_CFG,
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	2301      	movs	r3, #1
 800116a:	215f      	movs	r1, #95	@ 0x5f
 800116c:	f7ff f858 	bl	8000220 <lsm6dsr_read_reg>
 8001170:	0003      	movs	r3, r0
 8001172:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001174:	68fb      	ldr	r3, [r7, #12]
}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}

0800117e <lsm6dsr_pin_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_mode_set(const stmdev_ctx_t *ctx,
                             lsm6dsr_pp_od_t val)
{
 800117e:	b590      	push	{r4, r7, lr}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	000a      	movs	r2, r1
 8001188:	1cfb      	adds	r3, r7, #3
 800118a:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 800118c:	2408      	movs	r4, #8
 800118e:	193a      	adds	r2, r7, r4
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	2301      	movs	r3, #1
 8001194:	2112      	movs	r1, #18
 8001196:	f7ff f843 	bl	8000220 <lsm6dsr_read_reg>
 800119a:	0003      	movs	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d117      	bne.n	80011d4 <lsm6dsr_pin_mode_set+0x56>
  {
    ctrl3_c.pp_od = (uint8_t)val;
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	2101      	movs	r1, #1
 80011b2:	400a      	ands	r2, r1
 80011b4:	0110      	lsls	r0, r2, #4
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	2110      	movs	r1, #16
 80011ba:	438a      	bics	r2, r1
 80011bc:	1c11      	adds	r1, r2, #0
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	430a      	orrs	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C,
 80011c4:	193a      	adds	r2, r7, r4
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2112      	movs	r1, #18
 80011cc:	f7ff f851 	bl	8000272 <lsm6dsr_write_reg>
 80011d0:	0003      	movs	r3, r0
 80011d2:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80011d4:	68fb      	ldr	r3, [r7, #12]
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b005      	add	sp, #20
 80011dc:	bd90      	pop	{r4, r7, pc}

080011de <lsm6dsr_pin_polarity_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_polarity_set(const stmdev_ctx_t *ctx,
                                 lsm6dsr_h_lactive_t val)
{
 80011de:	b590      	push	{r4, r7, lr}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	000a      	movs	r2, r1
 80011e8:	1cfb      	adds	r3, r7, #3
 80011ea:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 80011ec:	2408      	movs	r4, #8
 80011ee:	193a      	adds	r2, r7, r4
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	2301      	movs	r3, #1
 80011f4:	2112      	movs	r1, #18
 80011f6:	f7ff f813 	bl	8000220 <lsm6dsr_read_reg>
 80011fa:	0003      	movs	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d117      	bne.n	8001234 <lsm6dsr_pin_polarity_set+0x56>
  {
    ctrl3_c.h_lactive = (uint8_t)val;
 8001204:	1cfb      	adds	r3, r7, #3
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	4013      	ands	r3, r2
 800120c:	b2da      	uxtb	r2, r3
 800120e:	193b      	adds	r3, r7, r4
 8001210:	2101      	movs	r1, #1
 8001212:	400a      	ands	r2, r1
 8001214:	0150      	lsls	r0, r2, #5
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	2120      	movs	r1, #32
 800121a:	438a      	bics	r2, r1
 800121c:	1c11      	adds	r1, r2, #0
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	430a      	orrs	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C,
 8001224:	193a      	adds	r2, r7, r4
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	2301      	movs	r3, #1
 800122a:	2112      	movs	r1, #18
 800122c:	f7ff f821 	bl	8000272 <lsm6dsr_write_reg>
 8001230:	0003      	movs	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8001234:	68fb      	ldr	r3, [r7, #12]
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b005      	add	sp, #20
 800123c:	bd90      	pop	{r4, r7, pc}

0800123e <lsm6dsr_int_notification_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_int_notification_set(const stmdev_ctx_t *ctx,
                                     lsm6dsr_lir_t val)
{
 800123e:	b590      	push	{r4, r7, lr}
 8001240:	b087      	sub	sp, #28
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	000a      	movs	r2, r1
 8001248:	1cfb      	adds	r3, r7, #3
 800124a:	701a      	strb	r2, [r3, #0]
  lsm6dsr_tap_cfg0_t tap_cfg0;
  lsm6dsr_page_rw_t page_rw;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG0,
 800124c:	2410      	movs	r4, #16
 800124e:	193a      	adds	r2, r7, r4
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	2301      	movs	r3, #1
 8001254:	2156      	movs	r1, #86	@ 0x56
 8001256:	f7fe ffe3 	bl	8000220 <lsm6dsr_read_reg>
 800125a:	0003      	movs	r3, r0
 800125c:	617b      	str	r3, [r7, #20]
                         (uint8_t *)&tap_cfg0, 1);

  if (ret == 0)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d127      	bne.n	80012b4 <lsm6dsr_int_notification_set+0x76>
  {
    tap_cfg0.lir = (uint8_t)val & 0x01U;
 8001264:	1cfb      	adds	r3, r7, #3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	4013      	ands	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2101      	movs	r1, #1
 8001272:	400a      	ands	r2, r1
 8001274:	0010      	movs	r0, r2
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	438a      	bics	r2, r1
 800127c:	1c11      	adds	r1, r2, #0
 800127e:	1c02      	adds	r2, r0, #0
 8001280:	430a      	orrs	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
    tap_cfg0.int_clr_on_read = (uint8_t)val & 0x01U;
 8001284:	1cfb      	adds	r3, r7, #3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	4013      	ands	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	193b      	adds	r3, r7, r4
 8001290:	2101      	movs	r1, #1
 8001292:	400a      	ands	r2, r1
 8001294:	0190      	lsls	r0, r2, #6
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	2140      	movs	r1, #64	@ 0x40
 800129a:	438a      	bics	r2, r1
 800129c:	1c11      	adds	r1, r2, #0
 800129e:	1c02      	adds	r2, r0, #0
 80012a0:	430a      	orrs	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG0,
 80012a4:	193a      	adds	r2, r7, r4
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	2301      	movs	r3, #1
 80012aa:	2156      	movs	r1, #86	@ 0x56
 80012ac:	f7fe ffe1 	bl	8000272 <lsm6dsr_write_reg>
 80012b0:	0003      	movs	r3, r0
 80012b2:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&tap_cfg0, 1);
  }

  if (ret == 0)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <lsm6dsr_int_notification_set+0x8a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2102      	movs	r1, #2
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fb5c 	bl	800097c <lsm6dsr_mem_bank_set>
 80012c4:	0003      	movs	r3, r0
 80012c6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d108      	bne.n	80012e0 <lsm6dsr_int_notification_set+0xa2>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 80012ce:	230c      	movs	r3, #12
 80012d0:	18fa      	adds	r2, r7, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	2301      	movs	r3, #1
 80012d6:	2117      	movs	r1, #23
 80012d8:	f7fe ffa2 	bl	8000220 <lsm6dsr_read_reg>
 80012dc:	0003      	movs	r3, r0
 80012de:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <lsm6dsr_int_notification_set+0xda>
  {
    page_rw.emb_func_lir = ((uint8_t)val & 0x02U) >> 1;
 80012e6:	1cfb      	adds	r3, r7, #3
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	1c1a      	adds	r2, r3, #0
 80012ee:	2301      	movs	r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	240c      	movs	r4, #12
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	01d0      	lsls	r0, r2, #7
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	217f      	movs	r1, #127	@ 0x7f
 80012fe:	400a      	ands	r2, r1
 8001300:	1c11      	adds	r1, r2, #0
 8001302:	1c02      	adds	r2, r0, #0
 8001304:	430a      	orrs	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8001308:	193a      	adds	r2, r7, r4
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	2301      	movs	r3, #1
 800130e:	2117      	movs	r1, #23
 8001310:	f7fe ffaf 	bl	8000272 <lsm6dsr_write_reg>
 8001314:	0003      	movs	r3, r0
 8001316:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <lsm6dsr_int_notification_set+0xee>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2100      	movs	r1, #0
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff fb2a 	bl	800097c <lsm6dsr_mem_bank_set>
 8001328:	0003      	movs	r3, r0
 800132a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800132c:	697b      	ldr	r3, [r7, #20]
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b007      	add	sp, #28
 8001334:	bd90      	pop	{r4, r7, pc}

08001336 <lsm6dsr_pedo_sens_set>:
  * @param  val    Change the values of pedo_en in reg EMB_FUNC_EN_A
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pedo_sens_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001336:	b590      	push	{r4, r7, lr}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	000a      	movs	r2, r1
 8001340:	1cfb      	adds	r3, r7, #3
 8001342:	701a      	strb	r2, [r3, #0]
  lsm6dsr_emb_func_en_a_t emb_func_en_a;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2102      	movs	r1, #2
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fb17 	bl	800097c <lsm6dsr_mem_bank_set>
 800134e:	0003      	movs	r3, r0
 8001350:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d108      	bne.n	800136a <lsm6dsr_pedo_sens_set+0x34>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_EN_A,
 8001358:	2308      	movs	r3, #8
 800135a:	18fa      	adds	r2, r7, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	2301      	movs	r3, #1
 8001360:	2104      	movs	r1, #4
 8001362:	f7fe ff5d 	bl	8000220 <lsm6dsr_read_reg>
 8001366:	0003      	movs	r3, r0
 8001368:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d118      	bne.n	80013a2 <lsm6dsr_pedo_sens_set+0x6c>
  {
    emb_func_en_a.pedo_en = (uint8_t)val;
 8001370:	1cfb      	adds	r3, r7, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	b2da      	uxtb	r2, r3
 800137a:	2408      	movs	r4, #8
 800137c:	193b      	adds	r3, r7, r4
 800137e:	2101      	movs	r1, #1
 8001380:	400a      	ands	r2, r1
 8001382:	00d0      	lsls	r0, r2, #3
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	2108      	movs	r1, #8
 8001388:	438a      	bics	r2, r1
 800138a:	1c11      	adds	r1, r2, #0
 800138c:	1c02      	adds	r2, r0, #0
 800138e:	430a      	orrs	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_EN_A,
 8001392:	193a      	adds	r2, r7, r4
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	2301      	movs	r3, #1
 8001398:	2104      	movs	r1, #4
 800139a:	f7fe ff6a 	bl	8000272 <lsm6dsr_write_reg>
 800139e:	0003      	movs	r3, r0
 80013a0:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <lsm6dsr_pedo_sens_set+0x80>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2100      	movs	r1, #0
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff fae5 	bl	800097c <lsm6dsr_mem_bank_set>
 80013b2:	0003      	movs	r3, r0
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b005      	add	sp, #20
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <lsm6dsr_pedo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pedo_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dsr_pedo_mode_t val)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	000a      	movs	r2, r1
 80013ca:	1cfb      	adds	r3, r7, #3
 80013cc:	701a      	strb	r2, [r3, #0]
  lsm6dsr_adv_pedo_t adv_pedo;
  lsm6dsr_emb_func_en_b_t emb_func_en_b;
  lsm6dsr_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2102      	movs	r1, #2
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fad2 	bl	800097c <lsm6dsr_mem_bank_set>
 80013d8:	0003      	movs	r3, r0
 80013da:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <lsm6dsr_pedo_mode_set+0x34>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_ADV_PEDO, (uint8_t *)&adv_pedo, 1);
 80013e2:	2310      	movs	r3, #16
 80013e4:	18fa      	adds	r2, r7, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	2301      	movs	r3, #1
 80013ea:	2103      	movs	r1, #3
 80013ec:	f7fe ff18 	bl	8000220 <lsm6dsr_read_reg>
 80013f0:	0003      	movs	r3, r0
 80013f2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d11a      	bne.n	8001430 <lsm6dsr_pedo_mode_set+0x70>
  {
    adv_pedo.pedo_fpr_adf_dis = (~((uint8_t)val) & 0x01U);
 80013fa:	1cfb      	adds	r3, r7, #3
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	425a      	negs	r2, r3
 8001404:	4153      	adcs	r3, r2
 8001406:	b2da      	uxtb	r2, r3
 8001408:	2410      	movs	r4, #16
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2101      	movs	r1, #1
 800140e:	400a      	ands	r2, r1
 8001410:	1890      	adds	r0, r2, r2
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	2102      	movs	r1, #2
 8001416:	438a      	bics	r2, r1
 8001418:	1c11      	adds	r1, r2, #0
 800141a:	1c02      	adds	r2, r0, #0
 800141c:	430a      	orrs	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_ADV_PEDO, (uint8_t *)&adv_pedo, 1);
 8001420:	193a      	adds	r2, r7, r4
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	2301      	movs	r3, #1
 8001426:	2103      	movs	r1, #3
 8001428:	f7fe ff23 	bl	8000272 <lsm6dsr_write_reg>
 800142c:	0003      	movs	r3, r0
 800142e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d108      	bne.n	8001448 <lsm6dsr_pedo_mode_set+0x88>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_EN_B,
 8001436:	230c      	movs	r3, #12
 8001438:	18fa      	adds	r2, r7, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	2301      	movs	r3, #1
 800143e:	2105      	movs	r1, #5
 8001440:	f7fe feee 	bl	8000220 <lsm6dsr_read_reg>
 8001444:	0003      	movs	r3, r0
 8001446:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <lsm6dsr_pedo_mode_set+0xc0>
  {
    emb_func_en_b.pedo_adv_en = (uint8_t)val & 0x01U;
 800144e:	1cfb      	adds	r3, r7, #3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	b2da      	uxtb	r2, r3
 8001458:	240c      	movs	r4, #12
 800145a:	193b      	adds	r3, r7, r4
 800145c:	2101      	movs	r1, #1
 800145e:	400a      	ands	r2, r1
 8001460:	0110      	lsls	r0, r2, #4
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	2110      	movs	r1, #16
 8001466:	438a      	bics	r2, r1
 8001468:	1c11      	adds	r1, r2, #0
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	430a      	orrs	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_EN_B,
 8001470:	193a      	adds	r2, r7, r4
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	2301      	movs	r3, #1
 8001476:	2105      	movs	r1, #5
 8001478:	f7fe fefb 	bl	8000272 <lsm6dsr_write_reg>
 800147c:	0003      	movs	r3, r0
 800147e:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <lsm6dsr_pedo_mode_set+0xd4>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2100      	movs	r1, #0
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fa76 	bl	800097c <lsm6dsr_mem_bank_set>
 8001490:	0003      	movs	r3, r0
 8001492:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d12c      	bne.n	80014f4 <lsm6dsr_pedo_mode_set+0x134>
  {
    ret = lsm6dsr_ln_pg_read_byte(ctx, LSM6DSR_PEDO_CMD_REG,
 800149a:	2408      	movs	r4, #8
 800149c:	193a      	adds	r2, r7, r4
 800149e:	2384      	movs	r3, #132	@ 0x84
 80014a0:	33ff      	adds	r3, #255	@ 0xff
 80014a2:	0019      	movs	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff fb41 	bl	8000b2e <lsm6dsr_ln_pg_read_byte>
 80014ac:	0003      	movs	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]
                                  (uint8_t *)&pedo_cmd_reg);
    pedo_cmd_reg.fp_rejection_en = ((uint8_t)val & 0x01U);
 80014b0:	1cfb      	adds	r3, r7, #3
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2101      	movs	r1, #1
 80014be:	400a      	ands	r2, r1
 80014c0:	0090      	lsls	r0, r2, #2
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	2104      	movs	r1, #4
 80014c6:	438a      	bics	r2, r1
 80014c8:	1c11      	adds	r1, r2, #0
 80014ca:	1c02      	adds	r2, r0, #0
 80014cc:	430a      	orrs	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x02U) >> 1;
 80014d0:	1cfb      	adds	r3, r7, #3
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	1c1a      	adds	r2, r3, #0
 80014d8:	2301      	movs	r3, #1
 80014da:	4013      	ands	r3, r2
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2101      	movs	r1, #1
 80014e2:	400a      	ands	r2, r1
 80014e4:	0010      	movs	r0, r2
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	438a      	bics	r2, r1
 80014ec:	1c11      	adds	r1, r2, #0
 80014ee:	1c02      	adds	r2, r0, #0
 80014f0:	430a      	orrs	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]
  }

  if (ret == 0)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <lsm6dsr_pedo_mode_set+0x150>
  {
    ret = lsm6dsr_ln_pg_write_byte(ctx, LSM6DSR_PEDO_CMD_REG,
 80014fa:	2308      	movs	r3, #8
 80014fc:	18fa      	adds	r2, r7, r3
 80014fe:	2384      	movs	r3, #132	@ 0x84
 8001500:	33ff      	adds	r3, #255	@ 0xff
 8001502:	0019      	movs	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fa66 	bl	80009d8 <lsm6dsr_ln_pg_write_byte>
 800150c:	0003      	movs	r3, r0
 800150e:	617b      	str	r3, [r7, #20]
                                   (uint8_t *)&pedo_cmd_reg);
  }

  return ret;
 8001510:	697b      	ldr	r3, [r7, #20]
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b007      	add	sp, #28
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <lsm6dsr_pedo_debounce_steps_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pedo_debounce_steps_set(const stmdev_ctx_t *ctx,
                                        uint8_t *buff)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_ln_pg_write_byte(ctx, LSM6DSR_PEDO_DEB_STEPS_CONF,
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	23c2      	movs	r3, #194	@ 0xc2
 8001528:	0059      	lsls	r1, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff fa53 	bl	80009d8 <lsm6dsr_ln_pg_write_byte>
 8001532:	0003      	movs	r3, r0
 8001534:	60fb      	str	r3, [r7, #12]
                                 buff);

  return ret;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b004      	add	sp, #16
 800153e:	bd80      	pop	{r7, pc}

08001540 <lsm6dsr_pedo_int_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pedo_int_mode_set(const stmdev_ctx_t *ctx,
                                  lsm6dsr_carry_count_en_t val)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	000a      	movs	r2, r1
 800154a:	1cfb      	adds	r3, r7, #3
 800154c:	701a      	strb	r2, [r3, #0]
  lsm6dsr_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dsr_ln_pg_read_byte(ctx, LSM6DSR_PEDO_CMD_REG,
 800154e:	2408      	movs	r4, #8
 8001550:	193a      	adds	r2, r7, r4
 8001552:	2384      	movs	r3, #132	@ 0x84
 8001554:	33ff      	adds	r3, #255	@ 0xff
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	0018      	movs	r0, r3
 800155c:	f7ff fae7 	bl	8000b2e <lsm6dsr_ln_pg_read_byte>
 8001560:	0003      	movs	r3, r0
 8001562:	60fb      	str	r3, [r7, #12]
                                (uint8_t *)&pedo_cmd_reg);

  if (ret == 0)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d119      	bne.n	800159e <lsm6dsr_pedo_int_mode_set+0x5e>
  {
    pedo_cmd_reg.carry_count_en = (uint8_t)val;
 800156a:	1cfb      	adds	r3, r7, #3
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2201      	movs	r2, #1
 8001570:	4013      	ands	r3, r2
 8001572:	b2da      	uxtb	r2, r3
 8001574:	193b      	adds	r3, r7, r4
 8001576:	2101      	movs	r1, #1
 8001578:	400a      	ands	r2, r1
 800157a:	00d0      	lsls	r0, r2, #3
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	2108      	movs	r1, #8
 8001580:	438a      	bics	r2, r1
 8001582:	1c11      	adds	r1, r2, #0
 8001584:	1c02      	adds	r2, r0, #0
 8001586:	430a      	orrs	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_ln_pg_write_byte(ctx, LSM6DSR_PEDO_CMD_REG,
 800158a:	193a      	adds	r2, r7, r4
 800158c:	2384      	movs	r3, #132	@ 0x84
 800158e:	33ff      	adds	r3, #255	@ 0xff
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fa1f 	bl	80009d8 <lsm6dsr_ln_pg_write_byte>
 800159a:	0003      	movs	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]
                                   (uint8_t *)&pedo_cmd_reg);
  }

  return ret;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b005      	add	sp, #20
 80015a6:	bd90      	pop	{r4, r7, pc}

080015a8 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(const stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2102      	movs	r1, #2
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff f9e0 	bl	800097c <lsm6dsr_mem_bank_set>
 80015bc:	0003      	movs	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <lsm6dsr_fsm_enable_get+0x2e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80015c6:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	2301      	movs	r3, #1
 80015cc:	2146      	movs	r1, #70	@ 0x46
 80015ce:	f7fe fe27 	bl	8000220 <lsm6dsr_read_reg>
 80015d2:	0003      	movs	r3, r0
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <lsm6dsr_fsm_enable_get+0x46>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	2301      	movs	r3, #1
 80015e4:	2147      	movs	r1, #71	@ 0x47
 80015e6:	f7fe fe1b 	bl	8000220 <lsm6dsr_read_reg>
 80015ea:	0003      	movs	r3, r0
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <lsm6dsr_fsm_enable_get+0x5a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2100      	movs	r1, #0
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff f9bf 	bl	800097c <lsm6dsr_mem_bank_set>
 80015fe:	0003      	movs	r3, r0
 8001600:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b004      	add	sp, #16
 800160a:	bd80      	pop	{r7, pc}

0800160c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2102      	movs	r1, #2
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff f9ae 	bl	800097c <lsm6dsr_mem_bank_set>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <lsm6dsr_fsm_data_rate_get+0x30>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800162a:	2308      	movs	r3, #8
 800162c:	18fa      	adds	r2, r7, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	2301      	movs	r3, #1
 8001632:	215f      	movs	r1, #95	@ 0x5f
 8001634:	f7fe fdf4 	bl	8000220 <lsm6dsr_read_reg>
 8001638:	0003      	movs	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <lsm6dsr_fsm_data_rate_get+0x44>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2100      	movs	r1, #0
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff f998 	bl	800097c <lsm6dsr_mem_bank_set>
 800164c:	0003      	movs	r3, r0
 800164e:	60fb      	str	r3, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8001650:	2308      	movs	r3, #8
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	06db      	lsls	r3, r3, #27
 8001658:	0f9b      	lsrs	r3, r3, #30
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b03      	cmp	r3, #3
 800165e:	d014      	beq.n	800168a <lsm6dsr_fsm_data_rate_get+0x7e>
 8001660:	dc17      	bgt.n	8001692 <lsm6dsr_fsm_data_rate_get+0x86>
 8001662:	2b02      	cmp	r3, #2
 8001664:	d00d      	beq.n	8001682 <lsm6dsr_fsm_data_rate_get+0x76>
 8001666:	dc14      	bgt.n	8001692 <lsm6dsr_fsm_data_rate_get+0x86>
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <lsm6dsr_fsm_data_rate_get+0x66>
 800166c:	2b01      	cmp	r3, #1
 800166e:	d004      	beq.n	800167a <lsm6dsr_fsm_data_rate_get+0x6e>
 8001670:	e00f      	b.n	8001692 <lsm6dsr_fsm_data_rate_get+0x86>
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
      break;
 8001678:	e00f      	b.n	800169a <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
      break;
 8001680:	e00b      	b.n	800169a <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2202      	movs	r2, #2
 8001686:	701a      	strb	r2, [r3, #0]
      break;
 8001688:	e007      	b.n	800169a <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2203      	movs	r2, #3
 800168e:	701a      	strb	r2, [r3, #0]
      break;
 8001690:	e003      	b.n	800169a <lsm6dsr_fsm_data_rate_get+0x8e>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
      break;
 8001698:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f001 fe45 	bl	8003336 <HAL_Init>

  /* USER CODE BEGIN Init */
//   reconfigure_interupts(0); // Configure IMU interrupt pins as GPIO outputs set to 0
//   __HAL_RCC_GPIOA_CLK_ENABLE();
  clear_I2C_bus();
 80016ac:	f000 fcfa 	bl	80020a4 <clear_I2C_bus>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f882 	bl	80017b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f000 f9a0 	bl	80019f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016b8:	f000 f980 	bl	80019bc <MX_DMA_Init>
  MX_I2C3_Init();
 80016bc:	f000 f8d2 	bl	8001864 <MX_I2C3_Init>
  MX_RTC_Init();
 80016c0:	f000 f910 	bl	80018e4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  DMArunning 	= 0;
 80016c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001780 <main+0xdc>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
  tapsInQueue = 0;
 80016ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001784 <main+0xe0>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
  stepsInQueue = 0;
 80016d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <main+0xe4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
  timeInQueue = 0;
 80016d6:	4b2d      	ldr	r3, [pc, #180]	@ (800178c <main+0xe8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
  
  TickDMAflag 	= 0;
 80016dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001790 <main+0xec>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
  TickRXcomp 	= 0;
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <main+0xf0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]

  TapDMAflag 	= 0;
 80016e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001798 <main+0xf4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
  TapRXcomp 	= 0;
 80016ee:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <main+0xf8>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
  
  StepDMAflag 	= 0;
 80016f4:	4b2a      	ldr	r3, [pc, #168]	@ (80017a0 <main+0xfc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
  StepRXcomp 	= 0;
 80016fa:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <main+0x100>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]

  inStopMode  = 0;
 8001700:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <main+0x104>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
  inSleepMode = 0;
 8001706:	4b29      	ldr	r3, [pc, #164]	@ (80017ac <main+0x108>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]

  LSM6DSR_Init();
 800170c:	f000 fd20 	bl	8002150 <LSM6DSR_Init>
//   reconfigure_interupts(1); // Configure IMU interrupt pins as EXTI
  
  MAX31331_Init();
 8001710:	f000 fdea 	bl	80022e8 <MAX31331_Init>

  initJobQueue(&jobQueue);
 8001714:	4b26      	ldr	r3, [pc, #152]	@ (80017b0 <main+0x10c>)
 8001716:	0018      	movs	r0, r3
 8001718:	f000 fa48 	bl	8001bac <initJobQueue>
    /* USER CODE BEGIN 3 */

//    HAL_Delay(1);

    // Parse data from complete jobs
    processJob();
 800171c:	f000 fb92 	bl	8001e44 <processJob>
    
    // If DMA is free and job queue !empty, start job
    if(!DMArunning) {
 8001720:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <main+0xdc>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d11b      	bne.n	8001762 <main+0xbe>
      if (dequeueJob(&jobQueue, &job)) {
 800172a:	4a22      	ldr	r2, [pc, #136]	@ (80017b4 <main+0x110>)
 800172c:	4b20      	ldr	r3, [pc, #128]	@ (80017b0 <main+0x10c>)
 800172e:	0011      	movs	r1, r2
 8001730:	0018      	movs	r0, r3
 8001732:	f000 fa97 	bl	8001c64 <dequeueJob>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d005      	beq.n	8001746 <main+0xa2>
        startJob(job);
 800173a:	4b1e      	ldr	r3, [pc, #120]	@ (80017b4 <main+0x110>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	0018      	movs	r0, r3
 8001740:	f000 fabe 	bl	8001cc0 <startJob>
 8001744:	e7ea      	b.n	800171c <main+0x78>
      } else {// else job queue is empty, go back to STOP mode while we wait for next interrupt
	 	inStopMode = 1;
 8001746:	4b18      	ldr	r3, [pc, #96]	@ (80017a8 <main+0x104>)
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
	 	HAL_SuspendTick();
 800174c:	f001 fe90 	bl	8003470 <HAL_SuspendTick>
	 	HAL_PWREx_EnterSTOP2Mode(PWR_SLEEPENTRY_WFI);
 8001750:	2001      	movs	r0, #1
 8001752:	f005 f8d5 	bl	8006900 <HAL_PWREx_EnterSTOP2Mode>

	 	HAL_ResumeTick();
 8001756:	f001 fe99 	bl	800348c <HAL_ResumeTick>
	 	inStopMode = 0;
 800175a:	4b13      	ldr	r3, [pc, #76]	@ (80017a8 <main+0x104>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	e7dc      	b.n	800171c <main+0x78>
	   }
    } else {// Waiting for DMA to finish, go back to SLEEP mode while we wait for I2C callback
	 	inSleepMode = 1;
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <main+0x108>)
 8001764:	2201      	movs	r2, #1
 8001766:	701a      	strb	r2, [r3, #0]
	 	HAL_SuspendTick();
 8001768:	f001 fe82 	bl	8003470 <HAL_SuspendTick>
	 	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
 800176c:	2101      	movs	r1, #1
 800176e:	2000      	movs	r0, #0
 8001770:	f004 ffd6 	bl	8006720 <HAL_PWR_EnterSLEEPMode>

	 	HAL_ResumeTick();
 8001774:	f001 fe8a 	bl	800348c <HAL_ResumeTick>
	 	inSleepMode = 0;
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <main+0x108>)
 800177a:	2200      	movs	r2, #0
 800177c:	701a      	strb	r2, [r3, #0]
    processJob();
 800177e:	e7cd      	b.n	800171c <main+0x78>
 8001780:	20000193 	.word	0x20000193
 8001784:	20000190 	.word	0x20000190
 8001788:	20000191 	.word	0x20000191
 800178c:	20000192 	.word	0x20000192
 8001790:	20000194 	.word	0x20000194
 8001794:	20000195 	.word	0x20000195
 8001798:	20000196 	.word	0x20000196
 800179c:	20000197 	.word	0x20000197
 80017a0:	20000198 	.word	0x20000198
 80017a4:	20000199 	.word	0x20000199
 80017a8:	200001b8 	.word	0x200001b8
 80017ac:	200001b9 	.word	0x200001b9
 80017b0:	20000144 	.word	0x20000144
 80017b4:	20000010 	.word	0x20000010

080017b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b097      	sub	sp, #92	@ 0x5c
 80017bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017be:	2410      	movs	r4, #16
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	0018      	movs	r0, r3
 80017c4:	2348      	movs	r3, #72	@ 0x48
 80017c6:	001a      	movs	r2, r3
 80017c8:	2100      	movs	r1, #0
 80017ca:	f006 fb73 	bl	8007eb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ce:	003b      	movs	r3, r7
 80017d0:	0018      	movs	r0, r3
 80017d2:	2310      	movs	r3, #16
 80017d4:	001a      	movs	r2, r3
 80017d6:	2100      	movs	r1, #0
 80017d8:	f006 fb6c 	bl	8007eb4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	0018      	movs	r0, r3
 80017e2:	f004 ffd7 	bl	8006794 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80017e6:	193b      	adds	r3, r7, r4
 80017e8:	220b      	movs	r2, #11
 80017ea:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	2280      	movs	r2, #128	@ 0x80
 80017f0:	0252      	lsls	r2, r2, #9
 80017f2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f4:	193b      	adds	r3, r7, r4
 80017f6:	2280      	movs	r2, #128	@ 0x80
 80017f8:	0052      	lsls	r2, r2, #1
 80017fa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	2240      	movs	r2, #64	@ 0x40
 8001800:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001802:	193b      	adds	r3, r7, r4
 8001804:	2201      	movs	r2, #1
 8001806:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001808:	193b      	adds	r3, r7, r4
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180e:	193b      	adds	r3, r7, r4
 8001810:	0018      	movs	r0, r3
 8001812:	f005 f8a9 	bl	8006968 <HAL_RCC_OscConfig>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800181a:	f000 ff5f 	bl	80026dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181e:	003b      	movs	r3, r7
 8001820:	2207      	movs	r2, #7
 8001822:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001824:	003b      	movs	r3, r7
 8001826:	2201      	movs	r2, #1
 8001828:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800182a:	003b      	movs	r3, r7
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001830:	003b      	movs	r3, r7
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001836:	003b      	movs	r3, r7
 8001838:	2101      	movs	r1, #1
 800183a:	0018      	movs	r0, r3
 800183c:	f005 fc7a 	bl	8007134 <HAL_RCC_ClockConfig>
 8001840:	1e03      	subs	r3, r0, #0
 8001842:	d001      	beq.n	8001848 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001844:	f000 ff4a 	bl	80026dc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCO2DIV_32);
 8001848:	23a0      	movs	r3, #160	@ 0xa0
 800184a:	03da      	lsls	r2, r3, #15
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	02db      	lsls	r3, r3, #11
 8001850:	4803      	ldr	r0, [pc, #12]	@ (8001860 <SystemClock_Config+0xa8>)
 8001852:	0019      	movs	r1, r3
 8001854:	f005 fd5a 	bl	800730c <HAL_RCC_MCOConfig>
}
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b017      	add	sp, #92	@ 0x5c
 800185e:	bd90      	pop	{r4, r7, pc}
 8001860:	10020004 	.word	0x10020004

08001864 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001868:	4b1b      	ldr	r3, [pc, #108]	@ (80018d8 <MX_I2C3_Init+0x74>)
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <MX_I2C3_Init+0x78>)
 800186c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800186e:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001870:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <MX_I2C3_Init+0x7c>)
 8001872:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001874:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800187a:	4b17      	ldr	r3, [pc, #92]	@ (80018d8 <MX_I2C3_Init+0x74>)
 800187c:	2201      	movs	r2, #1
 800187e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001880:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001886:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800188c:	4b12      	ldr	r3, [pc, #72]	@ (80018d8 <MX_I2C3_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001892:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <MX_I2C3_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001898:	4b0f      	ldr	r3, [pc, #60]	@ (80018d8 <MX_I2C3_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800189e:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <MX_I2C3_Init+0x74>)
 80018a0:	0018      	movs	r0, r3
 80018a2:	f002 fc33 	bl	800410c <HAL_I2C_Init>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018aa:	f000 ff17 	bl	80026dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <MX_I2C3_Init+0x74>)
 80018b0:	2100      	movs	r1, #0
 80018b2:	0018      	movs	r0, r3
 80018b4:	f004 fe9c 	bl	80065f0 <HAL_I2CEx_ConfigAnalogFilter>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018bc:	f000 ff0e 	bl	80026dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <MX_I2C3_Init+0x74>)
 80018c2:	2100      	movs	r1, #0
 80018c4:	0018      	movs	r0, r3
 80018c6:	f004 fedf 	bl	8006688 <HAL_I2CEx_ConfigDigitalFilter>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d001      	beq.n	80018d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f000 ff05 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  /* USER CODE END I2C3_Init 2 */

}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000003c 	.word	0x2000003c
 80018dc:	40008800 	.word	0x40008800
 80018e0:	00303d5b 	.word	0x00303d5b

080018e4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	0018      	movs	r0, r3
 80018ee:	2314      	movs	r3, #20
 80018f0:	001a      	movs	r2, r3
 80018f2:	2100      	movs	r1, #0
 80018f4:	f006 fade 	bl	8007eb4 <memset>
  RTC_DateTypeDef sDate = {0};
 80018f8:	003b      	movs	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018fe:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <MX_RTC_Init+0xd0>)
 8001900:	4a2d      	ldr	r2, [pc, #180]	@ (80019b8 <MX_RTC_Init+0xd4>)
 8001902:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001904:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <MX_RTC_Init+0xd0>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800190a:	4b2a      	ldr	r3, [pc, #168]	@ (80019b4 <MX_RTC_Init+0xd0>)
 800190c:	227f      	movs	r2, #127	@ 0x7f
 800190e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001910:	4b28      	ldr	r3, [pc, #160]	@ (80019b4 <MX_RTC_Init+0xd0>)
 8001912:	22ff      	movs	r2, #255	@ 0xff
 8001914:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001916:	4b27      	ldr	r3, [pc, #156]	@ (80019b4 <MX_RTC_Init+0xd0>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800191c:	4b25      	ldr	r3, [pc, #148]	@ (80019b4 <MX_RTC_Init+0xd0>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001922:	4b24      	ldr	r3, [pc, #144]	@ (80019b4 <MX_RTC_Init+0xd0>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001928:	4b22      	ldr	r3, [pc, #136]	@ (80019b4 <MX_RTC_Init+0xd0>)
 800192a:	2280      	movs	r2, #128	@ 0x80
 800192c:	05d2      	lsls	r2, r2, #23
 800192e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001930:	4b20      	ldr	r3, [pc, #128]	@ (80019b4 <MX_RTC_Init+0xd0>)
 8001932:	2200      	movs	r2, #0
 8001934:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001936:	4b1f      	ldr	r3, [pc, #124]	@ (80019b4 <MX_RTC_Init+0xd0>)
 8001938:	2200      	movs	r2, #0
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800193c:	4b1d      	ldr	r3, [pc, #116]	@ (80019b4 <MX_RTC_Init+0xd0>)
 800193e:	0018      	movs	r0, r3
 8001940:	f006 f832 	bl	80079a8 <HAL_RTC_Init>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d001      	beq.n	800194c <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001948:	f000 fec8 	bl	80026dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800194c:	1d3b      	adds	r3, r7, #4
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	2200      	movs	r2, #0
 8001956:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	2200      	movs	r2, #0
 800195c:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800196a:	1d39      	adds	r1, r7, #4
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_RTC_Init+0xd0>)
 800196e:	2201      	movs	r2, #1
 8001970:	0018      	movs	r0, r3
 8001972:	f006 f8bf 	bl	8007af4 <HAL_RTC_SetTime>
 8001976:	1e03      	subs	r3, r0, #0
 8001978:	d001      	beq.n	800197e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800197a:	f000 feaf 	bl	80026dc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800197e:	003b      	movs	r3, r7
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001984:	003b      	movs	r3, r7
 8001986:	2201      	movs	r2, #1
 8001988:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800198a:	003b      	movs	r3, r7
 800198c:	2201      	movs	r2, #1
 800198e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8001990:	003b      	movs	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001996:	0039      	movs	r1, r7
 8001998:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_RTC_Init+0xd0>)
 800199a:	2201      	movs	r2, #1
 800199c:	0018      	movs	r0, r3
 800199e:	f006 f969 	bl	8007c74 <HAL_RTC_SetDate>
 80019a2:	1e03      	subs	r3, r0, #0
 80019a4:	d001      	beq.n	80019aa <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80019a6:	f000 fe99 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	46bd      	mov	sp, r7
 80019ae:	b006      	add	sp, #24
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			@ (mov r8, r8)
 80019b4:	200000ec 	.word	0x200000ec
 80019b8:	40002800 	.word	0x40002800

080019bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019c2:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <MX_DMA_Init+0x38>)
 80019c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <MX_DMA_Init+0x38>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	430a      	orrs	r2, r1
 80019cc:	649a      	str	r2, [r3, #72]	@ 0x48
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <MX_DMA_Init+0x38>)
 80019d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019d2:	2201      	movs	r2, #1
 80019d4:	4013      	ands	r3, r2
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2100      	movs	r1, #0
 80019de:	2009      	movs	r0, #9
 80019e0:	f001 fe0e 	bl	8003600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019e4:	2009      	movs	r0, #9
 80019e6:	f001 fe20 	bl	800362a <HAL_NVIC_EnableIRQ>

}
 80019ea:	46c0      	nop			@ (mov r8, r8)
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	40021000 	.word	0x40021000

080019f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fe:	240c      	movs	r4, #12
 8001a00:	193b      	adds	r3, r7, r4
 8001a02:	0018      	movs	r0, r3
 8001a04:	2314      	movs	r3, #20
 8001a06:	001a      	movs	r2, r3
 8001a08:	2100      	movs	r1, #0
 8001a0a:	f006 fa53 	bl	8007eb4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */

  /*Configure GPIO pin : IMU_INT1_Float_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Float_Pin;
 8001a0e:	193b      	adds	r3, r7, r4
 8001a10:	2202      	movs	r2, #2
 8001a12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	193b      	adds	r3, r7, r4
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a1a:	193b      	adds	r3, r7, r4
 8001a1c:	2202      	movs	r2, #2
 8001a1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_INT1_Float_GPIO_Port, &GPIO_InitStruct);
 8001a20:	193a      	adds	r2, r7, r4
 8001a22:	23a0      	movs	r3, #160	@ 0xa0
 8001a24:	05db      	lsls	r3, r3, #23
 8001a26:	0011      	movs	r1, r2
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f002 f8e3 	bl	8003bf4 <HAL_GPIO_Init>
  
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a30:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a32:	4b5a      	ldr	r3, [pc, #360]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a34:	2120      	movs	r1, #32
 8001a36:	430a      	orrs	r2, r1
 8001a38:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a3a:	4b58      	ldr	r3, [pc, #352]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	2220      	movs	r2, #32
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b55      	ldr	r3, [pc, #340]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a4a:	4b54      	ldr	r3, [pc, #336]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a52:	4b52      	ldr	r3, [pc, #328]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b4f      	ldr	r3, [pc, #316]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a62:	4b4e      	ldr	r3, [pc, #312]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a64:	2102      	movs	r1, #2
 8001a66:	430a      	orrs	r2, r1
 8001a68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b9c <MX_GPIO_Init+0x1a4>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4013      	ands	r3, r2
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Vcom_Sel_Pin|XRST_Pin|ENBS_Pin|SI7_Pin
 8001a76:	494a      	ldr	r1, [pc, #296]	@ (8001ba0 <MX_GPIO_Init+0x1a8>)
 8001a78:	4b4a      	ldr	r3, [pc, #296]	@ (8001ba4 <MX_GPIO_Init+0x1ac>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f002 fafd 	bl	800407c <HAL_GPIO_WritePin>
                          |SI6_Pin|SI5_Pin|SI4_Pin|DBG_SWO_Pin
                          |ENBG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SI3_Pin|SI2_Pin|SI1_Pin|SI0_Pin
 8001a82:	239e      	movs	r3, #158	@ 0x9e
 8001a84:	0219      	lsls	r1, r3, #8
 8001a86:	23a0      	movs	r3, #160	@ 0xa0
 8001a88:	05db      	lsls	r3, r3, #23
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f002 faf5 	bl	800407c <HAL_GPIO_WritePin>
                          |DEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NRST_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = NRST_Pin|BOOT0_Pin;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	220c      	movs	r2, #12
 8001a96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	193b      	adds	r3, r7, r4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	4a40      	ldr	r2, [pc, #256]	@ (8001ba8 <MX_GPIO_Init+0x1b0>)
 8001aa8:	0019      	movs	r1, r3
 8001aaa:	0010      	movs	r0, r2
 8001aac:	f002 f8a2 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001ab0:	193b      	adds	r3, r7, r4
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab6:	193b      	adds	r3, r7, r4
 8001ab8:	2288      	movs	r2, #136	@ 0x88
 8001aba:	0352      	lsls	r2, r2, #13
 8001abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	193b      	adds	r3, r7, r4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001ac4:	193a      	adds	r2, r7, r4
 8001ac6:	23a0      	movs	r3, #160	@ 0xa0
 8001ac8:	05db      	lsls	r3, r3, #23
 8001aca:	0011      	movs	r1, r2
 8001acc:	0018      	movs	r0, r3
 8001ace:	f002 f891 	bl	8003bf4 <HAL_GPIO_Init>
//   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//   GPIO_InitStruct.Pull = GPIO_PULLDOWN;
//   HAL_GPIO_Init(IMU_INT1_Float_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	2204      	movs	r2, #4
 8001ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	2284      	movs	r2, #132	@ 0x84
 8001adc:	0392      	lsls	r2, r2, #14
 8001ade:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	193a      	adds	r2, r7, r4
 8001ae8:	23a0      	movs	r3, #160	@ 0xa0
 8001aea:	05db      	lsls	r3, r3, #23
 8001aec:	0011      	movs	r1, r2
 8001aee:	0018      	movs	r0, r3
 8001af0:	f002 f880 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Vcom_Sel_Pin XRST_Pin ENBS_Pin SI7_Pin
                           SI6_Pin SI5_Pin SI4_Pin DBG_SWO_Pin
                           ENBG_Pin */
  GPIO_InitStruct.Pin = Vcom_Sel_Pin|XRST_Pin|ENBS_Pin|SI7_Pin
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	4a2a      	ldr	r2, [pc, #168]	@ (8001ba0 <MX_GPIO_Init+0x1a8>)
 8001af8:	601a      	str	r2, [r3, #0]
                          |SI6_Pin|SI5_Pin|SI4_Pin|DBG_SWO_Pin
                          |ENBG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	2201      	movs	r2, #1
 8001afe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	193b      	adds	r3, r7, r4
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	193b      	adds	r3, r7, r4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	193b      	adds	r3, r7, r4
 8001b0e:	4a25      	ldr	r2, [pc, #148]	@ (8001ba4 <MX_GPIO_Init+0x1ac>)
 8001b10:	0019      	movs	r1, r3
 8001b12:	0010      	movs	r0, r2
 8001b14:	f002 f86e 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_SCLK_Pin */
  GPIO_InitStruct.Pin = DISP_SCLK_Pin;
 8001b18:	0021      	movs	r1, r4
 8001b1a:	187b      	adds	r3, r7, r1
 8001b1c:	2280      	movs	r2, #128	@ 0x80
 8001b1e:	0052      	lsls	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	000c      	movs	r4, r1
 8001b24:	193b      	adds	r3, r7, r4
 8001b26:	2202      	movs	r2, #2
 8001b28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	193b      	adds	r3, r7, r4
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	193b      	adds	r3, r7, r4
 8001b32:	2200      	movs	r2, #0
 8001b34:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SWD;
 8001b36:	193b      	adds	r3, r7, r4
 8001b38:	2200      	movs	r2, #0
 8001b3a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(DISP_SCLK_GPIO_Port, &GPIO_InitStruct);
 8001b3c:	193a      	adds	r2, r7, r4
 8001b3e:	23a0      	movs	r3, #160	@ 0xa0
 8001b40:	05db      	lsls	r3, r3, #23
 8001b42:	0011      	movs	r1, r2
 8001b44:	0018      	movs	r0, r3
 8001b46:	f002 f855 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI3_Pin SI2_Pin SI1_Pin SI0_Pin
                           DEN_Pin */
  GPIO_InitStruct.Pin = SI3_Pin|SI2_Pin|SI1_Pin|SI0_Pin
 8001b4a:	0021      	movs	r1, r4
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	229e      	movs	r2, #158	@ 0x9e
 8001b50:	0212      	lsls	r2, r2, #8
 8001b52:	601a      	str	r2, [r3, #0]
                          |DEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	2201      	movs	r2, #1
 8001b58:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	187b      	adds	r3, r7, r1
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	187b      	adds	r3, r7, r1
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	187a      	adds	r2, r7, r1
 8001b68:	23a0      	movs	r3, #160	@ 0xa0
 8001b6a:	05db      	lsls	r3, r3, #23
 8001b6c:	0011      	movs	r1, r2
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f002 f840 	bl	8003bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2100      	movs	r1, #0
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f001 fd41 	bl	8003600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001b7e:	2005      	movs	r0, #5
 8001b80:	f001 fd53 	bl	800362a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2006      	movs	r0, #6
 8001b8a:	f001 fd39 	bl	8003600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001b8e:	2006      	movs	r0, #6
 8001b90:	f001 fd4b 	bl	800362a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b009      	add	sp, #36	@ 0x24
 8001b9a:	bd90      	pop	{r4, r7, pc}
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	0000fc1a 	.word	0x0000fc1a
 8001ba4:	50000400 	.word	0x50000400
 8001ba8:	50001400 	.word	0x50001400

08001bac <initJobQueue>:

/* USER CODE BEGIN 4 */
/* ============== JOB QUEUE ============== */
void initJobQueue(volatile JobQueue *q) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
    q->front = 0;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	641a      	str	r2, [r3, #64]	@ 0x40
    q->rear = -1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	4252      	negs	r2, r2
 8001bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    q->count = 0;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001bc8:	46c0      	nop			@ (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <isJobsEmpty>:

int isJobsEmpty(volatile JobQueue *q) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    return q->count == 0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bdc:	425a      	negs	r2, r3
 8001bde:	4153      	adcs	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
}
 8001be2:	0018      	movs	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	b002      	add	sp, #8
 8001be8:	bd80      	pop	{r7, pc}

08001bea <isJobsFull>:

int isJobsFull(volatile JobQueue *q) {
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
    return q->count == QUEUE_SIZE;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf6:	3b10      	subs	r3, #16
 8001bf8:	425a      	negs	r2, r3
 8001bfa:	4153      	adcs	r3, r2
 8001bfc:	b2db      	uxtb	r3, r3
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <enqueueJob>:

int enqueueJob(volatile JobQueue *q, int value){
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	if (isJobsFull(q)) {
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff ffe8 	bl	8001bea <isJobsFull>
 8001c1a:	1e03      	subs	r3, r0, #0
 8001c1c:	d001      	beq.n	8001c22 <enqueueJob+0x1a>
        // printf("Queue is full! Cannot enqueue %d\n", value);
        return 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e019      	b.n	8001c56 <enqueueJob+0x4e>
    }
    
    q->rear = (q->rear + 1) % QUEUE_SIZE;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	3301      	adds	r3, #1
 8001c28:	4a0d      	ldr	r2, [pc, #52]	@ (8001c60 <enqueueJob+0x58>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	d504      	bpl.n	8001c38 <enqueueJob+0x30>
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	2210      	movs	r2, #16
 8001c32:	4252      	negs	r2, r2
 8001c34:	4313      	orrs	r3, r2
 8001c36:	3301      	adds	r3, #1
 8001c38:	001a      	movs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	645a      	str	r2, [r3, #68]	@ 0x44
    q->data[q->rear] = value;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	50d1      	str	r1, [r2, r3]
    q->count++;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	649a      	str	r2, [r3, #72]	@ 0x48
    
    return 1;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	8000000f 	.word	0x8000000f

08001c64 <dequeueJob>:

int dequeueJob(volatile JobQueue *q, int *value){
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
	if (isJobsEmpty(q)) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff ffad 	bl	8001bd0 <isJobsEmpty>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d001      	beq.n	8001c7e <dequeueJob+0x1a>
        // printf("Queue is empty! Cannot dequeue\n");
        return 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e01a      	b.n	8001cb4 <dequeueJob+0x50>
    }
    
    *value = q->data[q->front];
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	58d2      	ldr	r2, [r2, r3]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	601a      	str	r2, [r3, #0]
    q->front = (q->front + 1) % QUEUE_SIZE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	3301      	adds	r3, #1
 8001c92:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <dequeueJob+0x58>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	d504      	bpl.n	8001ca2 <dequeueJob+0x3e>
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	2210      	movs	r2, #16
 8001c9c:	4252      	negs	r2, r2
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    q->count--;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	649a      	str	r2, [r3, #72]	@ 0x48
    
    return 1;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b002      	add	sp, #8
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	8000000f 	.word	0x8000000f

08001cc0 <startJob>:

// Start DMA read
static void startJob(int job)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af04      	add	r7, sp, #16
 8001cc6:	6078      	str	r0, [r7, #4]
	lsm6dsr_func_cfg_access_t func_cfg_access = {0};
 8001cc8:	230c      	movs	r3, #12
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
	switch (job) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d100      	bne.n	8001cd8 <startJob+0x18>
 8001cd6:	e070      	b.n	8001dba <startJob+0xfa>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	dd00      	ble.n	8001ce0 <startJob+0x20>
 8001cde:	e090      	b.n	8001e02 <startJob+0x142>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <startJob+0x2e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d035      	beq.n	8001d58 <startJob+0x98>
			DMArunning = 1;
			TickDMAflag = 1;
			HAL_I2C_Mem_Read_DMA(&hi2c3, MAX31331_I2C_ADD, MAX31331_SECONDS_1_128, I2C_MEMADD_SIZE_8BIT, s_rtc_rx_buf, 8); // Read sec_128 to year in one go
			break;
		default:
			break;		
 8001cec:	e089      	b.n	8001e02 <startJob+0x142>
			if (stepsInQueue) stepsInQueue--;
 8001cee:	4b49      	ldr	r3, [pc, #292]	@ (8001e14 <startJob+0x154>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d006      	beq.n	8001d06 <startJob+0x46>
 8001cf8:	4b46      	ldr	r3, [pc, #280]	@ (8001e14 <startJob+0x154>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	4b44      	ldr	r3, [pc, #272]	@ (8001e14 <startJob+0x154>)
 8001d04:	701a      	strb	r2, [r3, #0]
			func_cfg_access.reg_access = LSM6DSR_EMBEDDED_FUNC_BANK; // Enable standard register bank
 8001d06:	240c      	movs	r4, #12
 8001d08:	193b      	adds	r3, r7, r4
 8001d0a:	781a      	ldrb	r2, [r3, #0]
 8001d0c:	213f      	movs	r1, #63	@ 0x3f
 8001d0e:	400a      	ands	r2, r1
 8001d10:	1c11      	adds	r1, r2, #0
 8001d12:	2280      	movs	r2, #128	@ 0x80
 8001d14:	4252      	negs	r2, r2
 8001d16:	430a      	orrs	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
			if (!HAL_I2C_Mem_Write(&hi2c3, LSM6DSR_I2C_ADD_L, LSM6DSR_FUNC_CFG_ACCESS, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&func_cfg_access, 1, 5)) {
 8001d1a:	483f      	ldr	r0, [pc, #252]	@ (8001e18 <startJob+0x158>)
 8001d1c:	2305      	movs	r3, #5
 8001d1e:	9302      	str	r3, [sp, #8]
 8001d20:	2301      	movs	r3, #1
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	193b      	adds	r3, r7, r4
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	21d4      	movs	r1, #212	@ 0xd4
 8001d2e:	f002 fa93 	bl	8004258 <HAL_I2C_Mem_Write>
 8001d32:	1e03      	subs	r3, r0, #0
 8001d34:	d167      	bne.n	8001e06 <startJob+0x146>
				DMArunning = 1;
 8001d36:	4b39      	ldr	r3, [pc, #228]	@ (8001e1c <startJob+0x15c>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
				StepDMAflag = 1;
 8001d3c:	4b38      	ldr	r3, [pc, #224]	@ (8001e20 <startJob+0x160>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Read_DMA(&hi2c3, LSM6DSR_I2C_ADD_L, LSM6DSR_STEP_COUNTER_L, I2C_MEMADD_SIZE_8BIT, s_step_rx_buf, 2);
 8001d42:	4835      	ldr	r0, [pc, #212]	@ (8001e18 <startJob+0x158>)
 8001d44:	2302      	movs	r3, #2
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <startJob+0x164>)
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	2262      	movs	r2, #98	@ 0x62
 8001d50:	21d4      	movs	r1, #212	@ 0xd4
 8001d52:	f002 fce3 	bl	800471c <HAL_I2C_Mem_Read_DMA>
			break;
 8001d56:	e056      	b.n	8001e06 <startJob+0x146>
			if (tapsInQueue) tapsInQueue--;
 8001d58:	4b33      	ldr	r3, [pc, #204]	@ (8001e28 <startJob+0x168>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <startJob+0xb0>
 8001d62:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <startJob+0x168>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <startJob+0x168>)
 8001d6e:	701a      	strb	r2, [r3, #0]
			func_cfg_access.reg_access = LSM6DSR_USER_BANK; // Enable standard register bank
 8001d70:	240c      	movs	r4, #12
 8001d72:	193b      	adds	r3, r7, r4
 8001d74:	781a      	ldrb	r2, [r3, #0]
 8001d76:	213f      	movs	r1, #63	@ 0x3f
 8001d78:	400a      	ands	r2, r1
 8001d7a:	701a      	strb	r2, [r3, #0]
			if(!HAL_I2C_Mem_Write(&hi2c3, LSM6DSR_I2C_ADD_L, LSM6DSR_FUNC_CFG_ACCESS, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&func_cfg_access, 1, 5)) {
 8001d7c:	4826      	ldr	r0, [pc, #152]	@ (8001e18 <startJob+0x158>)
 8001d7e:	2305      	movs	r3, #5
 8001d80:	9302      	str	r3, [sp, #8]
 8001d82:	2301      	movs	r3, #1
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	193b      	adds	r3, r7, r4
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	21d4      	movs	r1, #212	@ 0xd4
 8001d90:	f002 fa62 	bl	8004258 <HAL_I2C_Mem_Write>
 8001d94:	1e03      	subs	r3, r0, #0
 8001d96:	d138      	bne.n	8001e0a <startJob+0x14a>
				DMArunning = 1;
 8001d98:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <startJob+0x15c>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	701a      	strb	r2, [r3, #0]
				TapDMAflag = 1;
 8001d9e:	4b23      	ldr	r3, [pc, #140]	@ (8001e2c <startJob+0x16c>)
 8001da0:	2201      	movs	r2, #1
 8001da2:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Read_DMA(&hi2c3, LSM6DSR_I2C_ADD_L, LSM6DSR_TAP_SRC, I2C_MEMADD_SIZE_8BIT, s_tap_rx_buf, 1);
 8001da4:	481c      	ldr	r0, [pc, #112]	@ (8001e18 <startJob+0x158>)
 8001da6:	2301      	movs	r3, #1
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	4b21      	ldr	r3, [pc, #132]	@ (8001e30 <startJob+0x170>)
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2301      	movs	r3, #1
 8001db0:	221c      	movs	r2, #28
 8001db2:	21d4      	movs	r1, #212	@ 0xd4
 8001db4:	f002 fcb2 	bl	800471c <HAL_I2C_Mem_Read_DMA>
			break;
 8001db8:	e027      	b.n	8001e0a <startJob+0x14a>
			if (timeInQueue) timeInQueue--;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	@ (8001e34 <startJob+0x174>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d006      	beq.n	8001dd2 <startJob+0x112>
 8001dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <startJob+0x174>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <startJob+0x174>)
 8001dd0:	701a      	strb	r2, [r3, #0]
			max31331_get_status(&s_max_ctx, &status); // Clears interrupt
 8001dd2:	230b      	movs	r3, #11
 8001dd4:	18fa      	adds	r2, r7, r3
 8001dd6:	4b18      	ldr	r3, [pc, #96]	@ (8001e38 <startJob+0x178>)
 8001dd8:	0011      	movs	r1, r2
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 fd1a 	bl	8002814 <max31331_get_status>
			DMArunning = 1;
 8001de0:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <startJob+0x15c>)
 8001de2:	2201      	movs	r2, #1
 8001de4:	701a      	strb	r2, [r3, #0]
			TickDMAflag = 1;
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <startJob+0x17c>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read_DMA(&hi2c3, MAX31331_I2C_ADD, MAX31331_SECONDS_1_128, I2C_MEMADD_SIZE_8BIT, s_rtc_rx_buf, 8); // Read sec_128 to year in one go
 8001dec:	480a      	ldr	r0, [pc, #40]	@ (8001e18 <startJob+0x158>)
 8001dee:	2308      	movs	r3, #8
 8001df0:	9301      	str	r3, [sp, #4]
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <startJob+0x180>)
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	2207      	movs	r2, #7
 8001dfa:	21d0      	movs	r1, #208	@ 0xd0
 8001dfc:	f002 fc8e 	bl	800471c <HAL_I2C_Mem_Read_DMA>
			break;
 8001e00:	e004      	b.n	8001e0c <startJob+0x14c>
			break;		
 8001e02:	46c0      	nop			@ (mov r8, r8)
 8001e04:	e002      	b.n	8001e0c <startJob+0x14c>
			break;
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	e000      	b.n	8001e0c <startJob+0x14c>
			break;
 8001e0a:	46c0      	nop			@ (mov r8, r8)
		// DMA started, we can go to sleep while we wait for I2C callback
	}
}
 8001e0c:	46c0      	nop			@ (mov r8, r8)
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	b005      	add	sp, #20
 8001e12:	bd90      	pop	{r4, r7, pc}
 8001e14:	20000191 	.word	0x20000191
 8001e18:	2000003c 	.word	0x2000003c
 8001e1c:	20000193 	.word	0x20000193
 8001e20:	20000198 	.word	0x20000198
 8001e24:	2000019c 	.word	0x2000019c
 8001e28:	20000190 	.word	0x20000190
 8001e2c:	20000196 	.word	0x20000196
 8001e30:	200001a0 	.word	0x200001a0
 8001e34:	20000192 	.word	0x20000192
 8001e38:	20000130 	.word	0x20000130
 8001e3c:	20000194 	.word	0x20000194
 8001e40:	200001a8 	.word	0x200001a8

08001e44 <processJob>:

// Process DMA data
static void processJob(void) {
 8001e44:	b5b0      	push	{r4, r5, r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
	if (TickRXcomp) { // Update Time
 8001e4a:	4b8c      	ldr	r3, [pc, #560]	@ (800207c <processJob+0x238>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d100      	bne.n	8001e56 <processJob+0x12>
 8001e54:	e0d5      	b.n	8002002 <processJob+0x1be>
		uint8_t s128 = s_rtc_rx_buf[0]; // Unused for now
 8001e56:	230f      	movs	r3, #15
 8001e58:	18fb      	adds	r3, r7, r3
 8001e5a:	4a89      	ldr	r2, [pc, #548]	@ (8002080 <processJob+0x23c>)
 8001e5c:	7812      	ldrb	r2, [r2, #0]
 8001e5e:	701a      	strb	r2, [r3, #0]
		uint8_t s  	 = bin2dec_bcd(s_rtc_rx_buf[1] & MAX31331_SECONDS_MSK);
 8001e60:	4b87      	ldr	r3, [pc, #540]	@ (8002080 <processJob+0x23c>)
 8001e62:	785b      	ldrb	r3, [r3, #1]
 8001e64:	227f      	movs	r2, #127	@ 0x7f
 8001e66:	4013      	ands	r3, r2
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	220e      	movs	r2, #14
 8001e6c:	18bc      	adds	r4, r7, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f000 fc96 	bl	80027a0 <bin2dec_bcd>
 8001e74:	0003      	movs	r3, r0
 8001e76:	7023      	strb	r3, [r4, #0]
		uint8_t m  	 = bin2dec_bcd(s_rtc_rx_buf[2] & MAX31331_MINUTES_MSK);
 8001e78:	4b81      	ldr	r3, [pc, #516]	@ (8002080 <processJob+0x23c>)
 8001e7a:	789b      	ldrb	r3, [r3, #2]
 8001e7c:	227f      	movs	r2, #127	@ 0x7f
 8001e7e:	4013      	ands	r3, r2
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	220d      	movs	r2, #13
 8001e84:	18bc      	adds	r4, r7, r2
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 fc8a 	bl	80027a0 <bin2dec_bcd>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	7023      	strb	r3, [r4, #0]
		uint8_t h  	 = s_rtc_rx_buf[3];
 8001e90:	200c      	movs	r0, #12
 8001e92:	183b      	adds	r3, r7, r0
 8001e94:	4a7a      	ldr	r2, [pc, #488]	@ (8002080 <processJob+0x23c>)
 8001e96:	78d2      	ldrb	r2, [r2, #3]
 8001e98:	701a      	strb	r2, [r3, #0]

		uint8_t format  = (h & MAX31331_TS_F24_12_MSK) >> MAX31331_TS_F24_12_POS;
 8001e9a:	183b      	adds	r3, r7, r0
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	099b      	lsrs	r3, r3, #6
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	240b      	movs	r4, #11
 8001ea4:	193b      	adds	r3, r7, r4
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
		
		int hour;

		if (format == HOUR24) {
 8001eac:	193b      	adds	r3, r7, r4
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d11c      	bne.n	8001eee <processJob+0xaa>
			hour = ((h & MAX31331_HOURS_HOUR_MSK) 		>> MAX31331_HOURS_HOUR_POS) + 
 8001eb4:	183b      	adds	r3, r7, r0
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	220f      	movs	r2, #15
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
				   (((h & MAX31331_HOURS_HR10_MSK) 		>> MAX31331_HOURS_HR10_POS) * 10) +
				   (((h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS) * 20);
 8001ebe:	0004      	movs	r4, r0
 8001ec0:	183b      	adds	r3, r7, r0
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	095b      	lsrs	r3, r3, #5
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	401a      	ands	r2, r3
 8001eca:	0013      	movs	r3, r2
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	189b      	adds	r3, r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	0018      	movs	r0, r3
				   (((h & MAX31331_HOURS_HR10_MSK) 		>> MAX31331_HOURS_HR10_POS) * 10) +
 8001ed4:	193b      	adds	r3, r7, r4
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	2201      	movs	r2, #1
 8001edc:	401a      	ands	r2, r3
 8001ede:	0013      	movs	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	189b      	adds	r3, r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	18c3      	adds	r3, r0, r3
 8001ee8:	18cb      	adds	r3, r1, r3
			hour = ((h & MAX31331_HOURS_HOUR_MSK) 		>> MAX31331_HOURS_HOUR_POS) + 
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	e037      	b.n	8001f5e <processJob+0x11a>
		} else {
			uint8_t h12 = ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8001eee:	200c      	movs	r0, #12
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	091b      	lsrs	r3, r3, #4
						+ ((h & MAX31331_HOURS_HOUR_MSK) >> MAX31331_HOURS_HOUR_POS);
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	1c1a      	adds	r2, r3, #0
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	18d3      	adds	r3, r2, r3
 8001f04:	18db      	adds	r3, r3, r3
 8001f06:	b2d9      	uxtb	r1, r3
 8001f08:	183b      	adds	r3, r7, r0
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	220f      	movs	r2, #15
 8001f0e:	4013      	ands	r3, r2
 8001f10:	b2da      	uxtb	r2, r3
			uint8_t h12 = ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8001f12:	240a      	movs	r4, #10
 8001f14:	193b      	adds	r3, r7, r4
 8001f16:	188a      	adds	r2, r1, r2
 8001f18:	701a      	strb	r2, [r3, #0]
			uint8_t am_pm = (h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS;
 8001f1a:	183b      	adds	r3, r7, r0
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	2009      	movs	r0, #9
 8001f24:	183b      	adds	r3, r7, r0
 8001f26:	2101      	movs	r1, #1
 8001f28:	400a      	ands	r2, r1
 8001f2a:	701a      	strb	r2, [r3, #0]
			if (am_pm == AM) {          // AM
 8001f2c:	183b      	adds	r3, r7, r0
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <processJob+0x104>
				hour = (h12 == 12) ? 0 : h12;
 8001f34:	193b      	adds	r3, r7, r4
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	d002      	beq.n	8001f42 <processJob+0xfe>
 8001f3c:	193b      	adds	r3, r7, r4
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	e000      	b.n	8001f44 <processJob+0x100>
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e00a      	b.n	8001f5e <processJob+0x11a>
			} else {                    // PM
				hour = (h12 == 12) ? 12 : h12 + 12;
 8001f48:	220a      	movs	r2, #10
 8001f4a:	18bb      	adds	r3, r7, r2
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b0c      	cmp	r3, #12
 8001f50:	d003      	beq.n	8001f5a <processJob+0x116>
 8001f52:	18bb      	adds	r3, r7, r2
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	330c      	adds	r3, #12
 8001f58:	e000      	b.n	8001f5c <processJob+0x118>
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	617b      	str	r3, [r7, #20]
			}
		}

		uint8_t dy 	 = s_rtc_rx_buf[4] & MAX31331_DAY_MSK;
 8001f5e:	4b48      	ldr	r3, [pc, #288]	@ (8002080 <processJob+0x23c>)
 8001f60:	791a      	ldrb	r2, [r3, #4]
 8001f62:	2508      	movs	r5, #8
 8001f64:	197b      	adds	r3, r7, r5
 8001f66:	2107      	movs	r1, #7
 8001f68:	400a      	ands	r2, r1
 8001f6a:	701a      	strb	r2, [r3, #0]
		uint8_t dt 	 = bin2dec_bcd(s_rtc_rx_buf[5] & MAX31331_DATE_MSK);
 8001f6c:	4b44      	ldr	r3, [pc, #272]	@ (8002080 <processJob+0x23c>)
 8001f6e:	795b      	ldrb	r3, [r3, #5]
 8001f70:	223f      	movs	r2, #63	@ 0x3f
 8001f72:	4013      	ands	r3, r2
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	1dfc      	adds	r4, r7, #7
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 fc11 	bl	80027a0 <bin2dec_bcd>
 8001f7e:	0003      	movs	r3, r0
 8001f80:	7023      	strb	r3, [r4, #0]
		uint8_t mn 	 = bin2dec_bcd(s_rtc_rx_buf[6] & MAX31331_MONTH_MSK);
 8001f82:	4b3f      	ldr	r3, [pc, #252]	@ (8002080 <processJob+0x23c>)
 8001f84:	799b      	ldrb	r3, [r3, #6]
 8001f86:	220f      	movs	r2, #15
 8001f88:	4013      	ands	r3, r2
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	1dbc      	adds	r4, r7, #6
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 fc06 	bl	80027a0 <bin2dec_bcd>
 8001f94:	0003      	movs	r3, r0
 8001f96:	7023      	strb	r3, [r4, #0]
		uint8_t yr 	 = bin2dec_bcd(s_rtc_rx_buf[7] & MAX31331_YEAR_MSK);
 8001f98:	4b39      	ldr	r3, [pc, #228]	@ (8002080 <processJob+0x23c>)
 8001f9a:	79db      	ldrb	r3, [r3, #7]
 8001f9c:	1d7c      	adds	r4, r7, #5
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f000 fbfe 	bl	80027a0 <bin2dec_bcd>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	7023      	strb	r3, [r4, #0]

		g_RTC_time[0] = s128;
 8001fa8:	4b36      	ldr	r3, [pc, #216]	@ (8002084 <processJob+0x240>)
 8001faa:	220f      	movs	r2, #15
 8001fac:	18ba      	adds	r2, r7, r2
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	701a      	strb	r2, [r3, #0]
		g_RTC_time[1] = s;
 8001fb2:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <processJob+0x240>)
 8001fb4:	220e      	movs	r2, #14
 8001fb6:	18ba      	adds	r2, r7, r2
 8001fb8:	7812      	ldrb	r2, [r2, #0]
 8001fba:	705a      	strb	r2, [r3, #1]
		g_RTC_time[2] = m;
 8001fbc:	4b31      	ldr	r3, [pc, #196]	@ (8002084 <processJob+0x240>)
 8001fbe:	220d      	movs	r2, #13
 8001fc0:	18ba      	adds	r2, r7, r2
 8001fc2:	7812      	ldrb	r2, [r2, #0]
 8001fc4:	709a      	strb	r2, [r3, #2]
		g_RTC_time[3] = hour;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	4b2e      	ldr	r3, [pc, #184]	@ (8002084 <processJob+0x240>)
 8001fcc:	70da      	strb	r2, [r3, #3]
		g_RTC_time[4] = dy;
 8001fce:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <processJob+0x240>)
 8001fd0:	197a      	adds	r2, r7, r5
 8001fd2:	7812      	ldrb	r2, [r2, #0]
 8001fd4:	711a      	strb	r2, [r3, #4]
		g_RTC_time[5] = dt;
 8001fd6:	4b2b      	ldr	r3, [pc, #172]	@ (8002084 <processJob+0x240>)
 8001fd8:	1dfa      	adds	r2, r7, #7
 8001fda:	7812      	ldrb	r2, [r2, #0]
 8001fdc:	715a      	strb	r2, [r3, #5]
		g_RTC_time[6] = mn;
 8001fde:	4b29      	ldr	r3, [pc, #164]	@ (8002084 <processJob+0x240>)
 8001fe0:	1dba      	adds	r2, r7, #6
 8001fe2:	7812      	ldrb	r2, [r2, #0]
 8001fe4:	719a      	strb	r2, [r3, #6]
		g_RTC_time[7] = yr;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <processJob+0x240>)
 8001fe8:	1d7a      	adds	r2, r7, #5
 8001fea:	7812      	ldrb	r2, [r2, #0]
 8001fec:	71da      	strb	r2, [r3, #7]
		uint8_t status;
		max31331_get_status(&s_max_ctx, &status); // Clears interrupt
 8001fee:	1d3a      	adds	r2, r7, #4
 8001ff0:	4b25      	ldr	r3, [pc, #148]	@ (8002088 <processJob+0x244>)
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f000 fc0d 	bl	8002814 <max31331_get_status>

		TickRXcomp = 0;
 8001ffa:	4b20      	ldr	r3, [pc, #128]	@ (800207c <processJob+0x238>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
	} else if (StepRXcomp) { // Update Step Count
		g_step_count = (uint16_t)s_step_rx_buf[1] << 8 | (uint16_t)s_step_rx_buf[0];
		StepRXcomp = 0;
		
	}
}
 8002000:	e037      	b.n	8002072 <processJob+0x22e>
	} else if (TapRXcomp) { // Handle Tap/DoubleTap
 8002002:	4b22      	ldr	r3, [pc, #136]	@ (800208c <processJob+0x248>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01e      	beq.n	800204a <processJob+0x206>
		lsm6dsr_tap_src_t *tap_data = (lsm6dsr_tap_src_t *)s_tap_rx_buf;
 800200c:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <processJob+0x24c>)
 800200e:	613b      	str	r3, [r7, #16]
		if (tap_data->double_tap) {
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2210      	movs	r2, #16
 8002016:	4013      	ands	r3, r2
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <processJob+0x1e2>
			g_num_taps = 2;
 800201e:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <processJob+0x250>)
 8002020:	2202      	movs	r2, #2
 8002022:	801a      	strh	r2, [r3, #0]
 8002024:	e00d      	b.n	8002042 <processJob+0x1fe>
		} else if (tap_data->single_tap) {
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2220      	movs	r2, #32
 800202c:	4013      	ands	r3, r2
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d003      	beq.n	800203c <processJob+0x1f8>
			g_num_taps = 1;
 8002034:	4b17      	ldr	r3, [pc, #92]	@ (8002094 <processJob+0x250>)
 8002036:	2201      	movs	r2, #1
 8002038:	801a      	strh	r2, [r3, #0]
 800203a:	e002      	b.n	8002042 <processJob+0x1fe>
			g_num_taps = 0;
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <processJob+0x250>)
 800203e:	2200      	movs	r2, #0
 8002040:	801a      	strh	r2, [r3, #0]
		TapRXcomp = 0;
 8002042:	4b12      	ldr	r3, [pc, #72]	@ (800208c <processJob+0x248>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
}
 8002048:	e013      	b.n	8002072 <processJob+0x22e>
	} else if (StepRXcomp) { // Update Step Count
 800204a:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <processJob+0x254>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00e      	beq.n	8002072 <processJob+0x22e>
		g_step_count = (uint16_t)s_step_rx_buf[1] << 8 | (uint16_t)s_step_rx_buf[0];
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <processJob+0x258>)
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b0f      	ldr	r3, [pc, #60]	@ (800209c <processJob+0x258>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21b      	sxth	r3, r3
 8002066:	b29a      	uxth	r2, r3
 8002068:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <processJob+0x25c>)
 800206a:	801a      	strh	r2, [r3, #0]
		StepRXcomp = 0;
 800206c:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <processJob+0x254>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	46bd      	mov	sp, r7
 8002076:	b006      	add	sp, #24
 8002078:	bdb0      	pop	{r4, r5, r7, pc}
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	20000195 	.word	0x20000195
 8002080:	200001a8 	.word	0x200001a8
 8002084:	200001b0 	.word	0x200001b0
 8002088:	20000130 	.word	0x20000130
 800208c:	20000197 	.word	0x20000197
 8002090:	200001a0 	.word	0x200001a0
 8002094:	200001a4 	.word	0x200001a4
 8002098:	20000199 	.word	0x20000199
 800209c:	2000019c 	.word	0x2000019c
 80020a0:	200001a2 	.word	0x200001a2

080020a4 <clear_I2C_bus>:

/* ============== I2C Device Initialization ============== */
static void clear_I2C_bus(void) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020aa:	003b      	movs	r3, r7
 80020ac:	0018      	movs	r0, r3
 80020ae:	2314      	movs	r3, #20
 80020b0:	001a      	movs	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	f005 fefe 	bl	8007eb4 <memset>
	/* Configure SCL and SDA as Open-Drain GPIO outputs (we assume external pull-ups present) */
    GPIO_InitStruct.Pin = I2C3_SCL_PIN | I2C3_SDA_PIN;
 80020b8:	003b      	movs	r3, r7
 80020ba:	22c0      	movs	r2, #192	@ 0xc0
 80020bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020be:	003b      	movs	r3, r7
 80020c0:	2211      	movs	r2, #17
 80020c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	003b      	movs	r3, r7
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ca:	003b      	movs	r3, r7
 80020cc:	2202      	movs	r2, #2
 80020ce:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(I2C3_PORT, &GPIO_InitStruct);
 80020d0:	003a      	movs	r2, r7
 80020d2:	23a0      	movs	r3, #160	@ 0xa0
 80020d4:	05db      	lsls	r3, r3, #23
 80020d6:	0011      	movs	r1, r2
 80020d8:	0018      	movs	r0, r3
 80020da:	f001 fd8b 	bl	8003bf4 <HAL_GPIO_Init>

	/* Make sure SDA & SCL released high (external pull-ups will pull them high) */
    HAL_GPIO_WritePin(I2C3_PORT, I2C3_SDA_PIN, GPIO_PIN_SET);
 80020de:	23a0      	movs	r3, #160	@ 0xa0
 80020e0:	05db      	lsls	r3, r3, #23
 80020e2:	2201      	movs	r2, #1
 80020e4:	2140      	movs	r1, #64	@ 0x40
 80020e6:	0018      	movs	r0, r3
 80020e8:	f001 ffc8 	bl	800407c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C3_PORT, I2C3_SCL_PIN, GPIO_PIN_SET);
 80020ec:	23a0      	movs	r3, #160	@ 0xa0
 80020ee:	05db      	lsls	r3, r3, #23
 80020f0:	2201      	movs	r2, #1
 80020f2:	2180      	movs	r1, #128	@ 0x80
 80020f4:	0018      	movs	r0, r3
 80020f6:	f001 ffc1 	bl	800407c <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80020fa:	2001      	movs	r0, #1
 80020fc:	f001 f996 	bl	800342c <HAL_Delay>

	for (int i = 0; i < 9; i++)
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e016      	b.n	8002134 <clear_I2C_bus+0x90>
	{
		HAL_GPIO_WritePin(I2C3_PORT, I2C3_SCL_PIN, GPIO_PIN_RESET);
 8002106:	23a0      	movs	r3, #160	@ 0xa0
 8002108:	05db      	lsls	r3, r3, #23
 800210a:	2200      	movs	r2, #0
 800210c:	2180      	movs	r1, #128	@ 0x80
 800210e:	0018      	movs	r0, r3
 8002110:	f001 ffb4 	bl	800407c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8002114:	200a      	movs	r0, #10
 8002116:	f001 f989 	bl	800342c <HAL_Delay>
		HAL_GPIO_WritePin(I2C3_PORT, I2C3_SCL_PIN, GPIO_PIN_SET);
 800211a:	23a0      	movs	r3, #160	@ 0xa0
 800211c:	05db      	lsls	r3, r3, #23
 800211e:	2201      	movs	r2, #1
 8002120:	2180      	movs	r1, #128	@ 0x80
 8002122:	0018      	movs	r0, r3
 8002124:	f001 ffaa 	bl	800407c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8002128:	200a      	movs	r0, #10
 800212a:	f001 f97f 	bl	800342c <HAL_Delay>
	for (int i = 0; i < 9; i++)
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	3301      	adds	r3, #1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b08      	cmp	r3, #8
 8002138:	dde5      	ble.n	8002106 <clear_I2C_bus+0x62>
	}

	HAL_GPIO_DeInit(I2C3_PORT, I2C3_SCL_PIN | I2C3_SDA_PIN); // Return pins to default state
 800213a:	23a0      	movs	r3, #160	@ 0xa0
 800213c:	05db      	lsls	r3, r3, #23
 800213e:	21c0      	movs	r1, #192	@ 0xc0
 8002140:	0018      	movs	r0, r3
 8002142:	f001 fec3 	bl	8003ecc <HAL_GPIO_DeInit>
}
 8002146:	46c0      	nop			@ (mov r8, r8)
 8002148:	46bd      	mov	sp, r7
 800214a:	b006      	add	sp, #24
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <LSM6DSR_Init>:
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}

static void LSM6DSR_Init(void) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	uint8_t rst = 1;
 8002156:	1cfb      	adds	r3, r7, #3
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
	uint8_t who = 0;
 800215c:	1cbb      	adds	r3, r7, #2
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]

	// Platform initialization
	s_lsm_ctx.write_reg = platform_write;
 8002162:	4b3c      	ldr	r3, [pc, #240]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002164:	4a3c      	ldr	r2, [pc, #240]	@ (8002258 <LSM6DSR_Init+0x108>)
 8002166:	601a      	str	r2, [r3, #0]
	s_lsm_ctx.read_reg  = platform_read;
 8002168:	4b3a      	ldr	r3, [pc, #232]	@ (8002254 <LSM6DSR_Init+0x104>)
 800216a:	4a3c      	ldr	r2, [pc, #240]	@ (800225c <LSM6DSR_Init+0x10c>)
 800216c:	605a      	str	r2, [r3, #4]
	s_lsm_ctx.mdelay    = HAL_Delay;
 800216e:	4b39      	ldr	r3, [pc, #228]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002170:	4a3b      	ldr	r2, [pc, #236]	@ (8002260 <LSM6DSR_Init+0x110>)
 8002172:	609a      	str	r2, [r3, #8]
	s_lsm_ctx.handle    = &g_imu_bus;
 8002174:	4b37      	ldr	r3, [pc, #220]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002176:	4a3b      	ldr	r2, [pc, #236]	@ (8002264 <LSM6DSR_Init+0x114>)
 8002178:	60da      	str	r2, [r3, #12]

	HAL_Delay(100); // Initial power-on delay
 800217a:	2064      	movs	r0, #100	@ 0x64
 800217c:	f001 f956 	bl	800342c <HAL_Delay>

	// Perform software reset with proper timing
	do {
		if (lsm6dsr_reset_set(&s_lsm_ctx, 1) != 0) {
 8002180:	4b34      	ldr	r3, [pc, #208]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002182:	2101      	movs	r1, #1
 8002184:	0018      	movs	r0, r3
 8002186:	f7fe fd8f 	bl	8000ca8 <lsm6dsr_reset_set>
 800218a:	1e03      	subs	r3, r0, #0
 800218c:	d001      	beq.n	8002192 <LSM6DSR_Init+0x42>
			Error_Handler();
 800218e:	f000 faa5 	bl	80026dc <Error_Handler>
		}
		HAL_Delay(50); // Extended delay for reset completion
 8002192:	2032      	movs	r0, #50	@ 0x32
 8002194:	f001 f94a 	bl	800342c <HAL_Delay>
	} while (lsm6dsr_reset_get(&s_lsm_ctx, &rst) != 0 || rst != 0);
 8002198:	1cfa      	adds	r2, r7, #3
 800219a:	4b2e      	ldr	r3, [pc, #184]	@ (8002254 <LSM6DSR_Init+0x104>)
 800219c:	0011      	movs	r1, r2
 800219e:	0018      	movs	r0, r3
 80021a0:	f7fe fdb2 	bl	8000d08 <lsm6dsr_reset_get>
 80021a4:	1e03      	subs	r3, r0, #0
 80021a6:	d1eb      	bne.n	8002180 <LSM6DSR_Init+0x30>
 80021a8:	1cfb      	adds	r3, r7, #3
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e7      	bne.n	8002180 <LSM6DSR_Init+0x30>

	// Verify device ID with retries
	for (int attempt = 0; attempt < 10; attempt++) {
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	e011      	b.n	80021da <LSM6DSR_Init+0x8a>
		if (lsm6dsr_device_id_get(&s_lsm_ctx, &who) == 0 && who == LSM6DSR_ID) {
 80021b6:	1cba      	adds	r2, r7, #2
 80021b8:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <LSM6DSR_Init+0x104>)
 80021ba:	0011      	movs	r1, r2
 80021bc:	0018      	movs	r0, r3
 80021be:	f7fe fd61 	bl	8000c84 <lsm6dsr_device_id_get>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d103      	bne.n	80021ce <LSM6DSR_Init+0x7e>
 80021c6:	1cbb      	adds	r3, r7, #2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b6b      	cmp	r3, #107	@ 0x6b
 80021cc:	d009      	beq.n	80021e2 <LSM6DSR_Init+0x92>
			break;
		}
		HAL_Delay(20);
 80021ce:	2014      	movs	r0, #20
 80021d0:	f001 f92c 	bl	800342c <HAL_Delay>
	for (int attempt = 0; attempt < 10; attempt++) {
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3301      	adds	r3, #1
 80021d8:	607b      	str	r3, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b09      	cmp	r3, #9
 80021de:	ddea      	ble.n	80021b6 <LSM6DSR_Init+0x66>
 80021e0:	e000      	b.n	80021e4 <LSM6DSR_Init+0x94>
			break;
 80021e2:	46c0      	nop			@ (mov r8, r8)
	}

	if (who != LSM6DSR_ID) {
 80021e4:	1cbb      	adds	r3, r7, #2
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b6b      	cmp	r3, #107	@ 0x6b
 80021ea:	d001      	beq.n	80021f0 <LSM6DSR_Init+0xa0>
		Error_Handler();
 80021ec:	f000 fa76 	bl	80026dc <Error_Handler>
	}

	// Disable I3C interface
	if (lsm6dsr_i3c_disable_set(&s_lsm_ctx, LSM6DSR_I3C_DISABLE) != 0) {
 80021f0:	4b18      	ldr	r3, [pc, #96]	@ (8002254 <LSM6DSR_Init+0x104>)
 80021f2:	2180      	movs	r1, #128	@ 0x80
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7fe fda2 	bl	8000d3e <lsm6dsr_i3c_disable_set>
 80021fa:	1e03      	subs	r3, r0, #0
 80021fc:	d001      	beq.n	8002202 <LSM6DSR_Init+0xb2>
		Error_Handler();
 80021fe:	f000 fa6d 	bl	80026dc <Error_Handler>
	}

	/* Disable I3C (Mode 1: IMU is I2C slave) */
	lsm6dsr_i3c_disable_set(&s_lsm_ctx, LSM6DSR_I3C_DISABLE);
 8002202:	4b14      	ldr	r3, [pc, #80]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002204:	2180      	movs	r1, #128	@ 0x80
 8002206:	0018      	movs	r0, r3
 8002208:	f7fe fd99 	bl	8000d3e <lsm6dsr_i3c_disable_set>

	/* Put gyroscope into power-down */
	lsm6dsr_gy_data_rate_set(&s_lsm_ctx, LSM6DSR_GY_ODR_OFF);
 800220c:	4b11      	ldr	r3, [pc, #68]	@ (8002254 <LSM6DSR_Init+0x104>)
 800220e:	2100      	movs	r1, #0
 8002210:	0018      	movs	r0, r3
 8002212:	f7fe f9d2 	bl	80005ba <lsm6dsr_gy_data_rate_set>
	/* Gryo power mode should be irrelevant (set to normal for safe default) */
	lsm6dsr_gy_power_mode_set(&s_lsm_ctx, LSM6DSR_GY_NORMAL);
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002218:	2101      	movs	r1, #1
 800221a:	0018      	movs	r0, r3
 800221c:	f7fe fb48 	bl	80008b0 <lsm6dsr_gy_power_mode_set>
	/* BDU: Blocks of registers can't be updated mid-read */
	lsm6dsr_block_data_update_set(&s_lsm_ctx, 1);
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002222:	2101      	movs	r1, #1
 8002224:	0018      	movs	r0, r3
 8002226:	f7fe fb13 	bl	8000850 <lsm6dsr_block_data_update_set>

	LSM6DSR_Init_Pedo_INT2();
 800222a:	f000 f81d 	bl	8002268 <LSM6DSR_Init_Pedo_INT2>
	/* TAP detection overrides ODR to 416Hz, setting accel to high power mode */
	// LSM6DSR_Init_Tap_INT2();

	/* Configure pin mode/polarity */
	lsm6dsr_pin_mode_set(&s_lsm_ctx, LSM6DSR_PUSH_PULL);
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002230:	2100      	movs	r1, #0
 8002232:	0018      	movs	r0, r3
 8002234:	f7fe ffa3 	bl	800117e <lsm6dsr_pin_mode_set>
	lsm6dsr_pin_polarity_set(&s_lsm_ctx, LSM6DSR_ACTIVE_HIGH);
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <LSM6DSR_Init+0x104>)
 800223a:	2100      	movs	r1, #0
 800223c:	0018      	movs	r0, r3
 800223e:	f7fe ffce 	bl	80011de <lsm6dsr_pin_polarity_set>
	lsm6dsr_int_notification_set(&s_lsm_ctx, LSM6DSR_ALL_INT_PULSED);
 8002242:	4b04      	ldr	r3, [pc, #16]	@ (8002254 <LSM6DSR_Init+0x104>)
 8002244:	2100      	movs	r1, #0
 8002246:	0018      	movs	r0, r3
 8002248:	f7fe fff9 	bl	800123e <lsm6dsr_int_notification_set>

}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b002      	add	sp, #8
 8002252:	bd80      	pop	{r7, pc}
 8002254:	2000011c 	.word	0x2000011c
 8002258:	0800262d 	.word	0x0800262d
 800225c:	08002685 	.word	0x08002685
 8002260:	0800342d 	.word	0x0800342d
 8002264:	20000000 	.word	0x20000000

08002268 <LSM6DSR_Init_Pedo_INT2>:

// Pedometer Config based on Application Note 5358
static void LSM6DSR_Init_Pedo_INT2(void) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
	/* Pedometer works at accelerometer 2g Full Scale (STMicroelectronics/lsm6dsr-pid) */
	lsm6dsr_xl_full_scale_set(&s_lsm_ctx, LSM6DSR_4g);
 800226e:	4b1d      	ldr	r3, [pc, #116]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 8002270:	2102      	movs	r1, #2
 8002272:	0018      	movs	r0, r3
 8002274:	f7fe f826 	bl	80002c4 <lsm6dsr_xl_full_scale_set>
	/* 6.1 Pedometer functions: ODR >= 26Hz for step counter*/
	lsm6dsr_xl_data_rate_set(&s_lsm_ctx, LSM6DSR_XL_ODR_26Hz);
 8002278:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 800227a:	2102      	movs	r1, #2
 800227c:	0018      	movs	r0, r3
 800227e:	f7fe f851 	bl	8000324 <lsm6dsr_xl_data_rate_set>

	/* Enable pedometer with false-step rejection */
	lsm6dsr_pedo_sens_set(&s_lsm_ctx, PROPERTY_ENABLE);
 8002282:	4b18      	ldr	r3, [pc, #96]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 8002284:	2101      	movs	r1, #1
 8002286:	0018      	movs	r0, r3
 8002288:	f7ff f855 	bl	8001336 <lsm6dsr_pedo_sens_set>
	lsm6dsr_pedo_mode_set(&s_lsm_ctx, LSM6DSR_PEDO_ADV_FALSE_STEP_REJ);
 800228c:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 800228e:	2103      	movs	r1, #3
 8002290:	0018      	movs	r0, r3
 8002292:	f7ff f895 	bl	80013c0 <lsm6dsr_pedo_mode_set>
	lsm6dsr_pedo_int_mode_set(&s_lsm_ctx, LSM6DSR_EVERY_STEP);
 8002296:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 8002298:	2100      	movs	r1, #0
 800229a:	0018      	movs	r0, r3
 800229c:	f7ff f950 	bl	8001540 <lsm6dsr_pedo_int_mode_set>
	lsm6dsr_steps_reset(&s_lsm_ctx);
 80022a0:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7fe fb32 	bl	800090c <lsm6dsr_steps_reset>
	uint8_t debounce = STEP_DEBOUNCE_THRESHOLD;
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	2208      	movs	r2, #8
 80022ac:	701a      	strb	r2, [r3, #0]
	lsm6dsr_pedo_debounce_steps_set(&s_lsm_ctx, &debounce);
 80022ae:	1dfa      	adds	r2, r7, #7
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 80022b2:	0011      	movs	r1, r2
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff f930 	bl	800151a <lsm6dsr_pedo_debounce_steps_set>

	/* Route Step Detector interrupt to INT1 */
	lsm6dsr_pin_int2_route_t int2_route;
	lsm6dsr_pin_int2_route_get(&s_lsm_ctx, &int2_route);
 80022ba:	003a      	movs	r2, r7
 80022bc:	4b09      	ldr	r3, [pc, #36]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 80022be:	0011      	movs	r1, r2
 80022c0:	0018      	movs	r0, r3
 80022c2:	f7fe ff06 	bl	80010d2 <lsm6dsr_pin_int2_route_get>
	int2_route.emb_func_int2.int2_step_detector = 1;
 80022c6:	003b      	movs	r3, r7
 80022c8:	789a      	ldrb	r2, [r3, #2]
 80022ca:	2108      	movs	r1, #8
 80022cc:	430a      	orrs	r2, r1
 80022ce:	709a      	strb	r2, [r3, #2]
	lsm6dsr_pin_int2_route_set(&s_lsm_ctx, &int2_route);
 80022d0:	003a      	movs	r2, r7
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 80022d4:	0011      	movs	r1, r2
 80022d6:	0018      	movs	r0, r3
 80022d8:	f7fe fd8c 	bl	8000df4 <lsm6dsr_pin_int2_route_set>
}
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000011c 	.word	0x2000011c

080022e8 <MAX31331_Init>:
	int2_route.md2_cfg.int2_single_tap = 1;
	int2_route.md2_cfg.int2_double_tap = 1;
	lsm6dsr_pin_int2_route_set(&s_lsm_ctx, &int2_route);
}

static void MAX31331_Init(void) {
 80022e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ea:	b089      	sub	sp, #36	@ 0x24
 80022ec:	af04      	add	r7, sp, #16
	uint8_t seconds = 0;
 80022ee:	240f      	movs	r4, #15
 80022f0:	193b      	adds	r3, r7, r4
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
	uint8_t minutes = 0;
 80022f6:	250e      	movs	r5, #14
 80022f8:	197b      	adds	r3, r7, r5
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
	uint8_t hours   = 14;  // Example: 2PM
 80022fe:	230d      	movs	r3, #13
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	220e      	movs	r2, #14
 8002304:	701a      	strb	r2, [r3, #0]
	uint8_t day     = 3;   // WEDNESDAY
 8002306:	260c      	movs	r6, #12
 8002308:	19bb      	adds	r3, r7, r6
 800230a:	2203      	movs	r2, #3
 800230c:	701a      	strb	r2, [r3, #0]
	uint8_t date    = 27;  // 27th
 800230e:	220b      	movs	r2, #11
 8002310:	18bb      	adds	r3, r7, r2
 8002312:	221b      	movs	r2, #27
 8002314:	701a      	strb	r2, [r3, #0]
	uint8_t month   = 8;   // January
 8002316:	210a      	movs	r1, #10
 8002318:	187b      	adds	r3, r7, r1
 800231a:	2208      	movs	r2, #8
 800231c:	701a      	strb	r2, [r3, #0]
	uint8_t year    = 25;  // Year = 2025 (last two digits)
 800231e:	2009      	movs	r0, #9
 8002320:	183b      	adds	r3, r7, r0
 8002322:	2219      	movs	r2, #25
 8002324:	701a      	strb	r2, [r3, #0]
	uint8_t century = 0;   // 0 = 21st century, 1 = 22nd century
 8002326:	2108      	movs	r1, #8
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2200      	movs	r2, #0
 800232c:	701a      	strb	r2, [r3, #0]

	s_max_ctx.write_reg = platform_write;
 800232e:	4b67      	ldr	r3, [pc, #412]	@ (80024cc <MAX31331_Init+0x1e4>)
 8002330:	4a67      	ldr	r2, [pc, #412]	@ (80024d0 <MAX31331_Init+0x1e8>)
 8002332:	601a      	str	r2, [r3, #0]
	s_max_ctx.read_reg  = platform_read;
 8002334:	4b65      	ldr	r3, [pc, #404]	@ (80024cc <MAX31331_Init+0x1e4>)
 8002336:	4a67      	ldr	r2, [pc, #412]	@ (80024d4 <MAX31331_Init+0x1ec>)
 8002338:	605a      	str	r2, [r3, #4]
	s_max_ctx.mdelay    = HAL_Delay;
 800233a:	4b64      	ldr	r3, [pc, #400]	@ (80024cc <MAX31331_Init+0x1e4>)
 800233c:	4a66      	ldr	r2, [pc, #408]	@ (80024d8 <MAX31331_Init+0x1f0>)
 800233e:	609a      	str	r2, [r3, #8]
	s_max_ctx.handle    = &g_rtc_bus;
 8002340:	4b62      	ldr	r3, [pc, #392]	@ (80024cc <MAX31331_Init+0x1e4>)
 8002342:	4a66      	ldr	r2, [pc, #408]	@ (80024dc <MAX31331_Init+0x1f4>)
 8002344:	60da      	str	r2, [r3, #12]

	HAL_Delay(20);
 8002346:	2014      	movs	r0, #20
 8002348:	f001 f870 	bl	800342c <HAL_Delay>

	max31331_reset_rtc(&s_max_ctx);
 800234c:	4b5f      	ldr	r3, [pc, #380]	@ (80024cc <MAX31331_Init+0x1e4>)
 800234e:	0018      	movs	r0, r3
 8002350:	f000 fa79 	bl	8002846 <max31331_reset_rtc>
	HAL_Delay(5);
 8002354:	2005      	movs	r0, #5
 8002356:	f001 f869 	bl	800342c <HAL_Delay>

	max31331_set_time(&s_max_ctx, seconds, minutes, hours);
 800235a:	193b      	adds	r3, r7, r4
 800235c:	7819      	ldrb	r1, [r3, #0]
 800235e:	002e      	movs	r6, r5
 8002360:	19bb      	adds	r3, r7, r6
 8002362:	781a      	ldrb	r2, [r3, #0]
 8002364:	230d      	movs	r3, #13
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4858      	ldr	r0, [pc, #352]	@ (80024cc <MAX31331_Init+0x1e4>)
 800236c:	f000 fa9b 	bl	80028a6 <max31331_set_time>
	seconds 	= 0xFF;
 8002370:	0025      	movs	r5, r4
 8002372:	193b      	adds	r3, r7, r4
 8002374:	22ff      	movs	r2, #255	@ 0xff
 8002376:	701a      	strb	r2, [r3, #0]
	minutes 	= 0xFF;
 8002378:	19bb      	adds	r3, r7, r6
 800237a:	22ff      	movs	r2, #255	@ 0xff
 800237c:	701a      	strb	r2, [r3, #0]
	hours   	= 0xFF;
 800237e:	240d      	movs	r4, #13
 8002380:	193b      	adds	r3, r7, r4
 8002382:	22ff      	movs	r2, #255	@ 0xff
 8002384:	701a      	strb	r2, [r3, #0]
	uint8_t format 	= 0xFF;
 8002386:	1dfb      	adds	r3, r7, #7
 8002388:	22ff      	movs	r2, #255	@ 0xff
 800238a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 800238c:	2005      	movs	r0, #5
 800238e:	f001 f84d 	bl	800342c <HAL_Delay>
	
	max31331_get_time(&s_max_ctx, &seconds, &minutes, &hours, &format);
 8002392:	193c      	adds	r4, r7, r4
 8002394:	19ba      	adds	r2, r7, r6
 8002396:	1979      	adds	r1, r7, r5
 8002398:	484c      	ldr	r0, [pc, #304]	@ (80024cc <MAX31331_Init+0x1e4>)
 800239a:	1dfb      	adds	r3, r7, #7
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	0023      	movs	r3, r4
 80023a0:	f000 fb18 	bl	80029d4 <max31331_get_time>
	HAL_Delay(5);
 80023a4:	2005      	movs	r0, #5
 80023a6:	f001 f841 	bl	800342c <HAL_Delay>

	max31331_set_date(&s_max_ctx, day, date, month, century, year);
 80023aa:	260c      	movs	r6, #12
 80023ac:	19bb      	adds	r3, r7, r6
 80023ae:	7819      	ldrb	r1, [r3, #0]
 80023b0:	220b      	movs	r2, #11
 80023b2:	18bb      	adds	r3, r7, r2
 80023b4:	781c      	ldrb	r4, [r3, #0]
 80023b6:	230a      	movs	r3, #10
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	781d      	ldrb	r5, [r3, #0]
 80023bc:	2308      	movs	r3, #8
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2009      	movs	r0, #9
 80023c4:	183a      	adds	r2, r7, r0
 80023c6:	7812      	ldrb	r2, [r2, #0]
 80023c8:	4840      	ldr	r0, [pc, #256]	@ (80024cc <MAX31331_Init+0x1e4>)
 80023ca:	9201      	str	r2, [sp, #4]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	002b      	movs	r3, r5
 80023d0:	0022      	movs	r2, r4
 80023d2:	f000 fbc7 	bl	8002b64 <max31331_set_date>
	day     = 0xFF;
 80023d6:	0035      	movs	r5, r6
 80023d8:	197b      	adds	r3, r7, r5
 80023da:	22ff      	movs	r2, #255	@ 0xff
 80023dc:	701a      	strb	r2, [r3, #0]
	date    = 0xFF;
 80023de:	260b      	movs	r6, #11
 80023e0:	19bb      	adds	r3, r7, r6
 80023e2:	22ff      	movs	r2, #255	@ 0xff
 80023e4:	701a      	strb	r2, [r3, #0]
	month   = 0xFF;
 80023e6:	240a      	movs	r4, #10
 80023e8:	193b      	adds	r3, r7, r4
 80023ea:	22ff      	movs	r2, #255	@ 0xff
 80023ec:	701a      	strb	r2, [r3, #0]
	year    = 0xFF;
 80023ee:	2009      	movs	r0, #9
 80023f0:	183b      	adds	r3, r7, r0
 80023f2:	22ff      	movs	r2, #255	@ 0xff
 80023f4:	701a      	strb	r2, [r3, #0]
	century = 0xFF;
 80023f6:	2108      	movs	r1, #8
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	22ff      	movs	r2, #255	@ 0xff
 80023fc:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 80023fe:	2005      	movs	r0, #5
 8002400:	f001 f814 	bl	800342c <HAL_Delay>
	
	max31331_get_date(&s_max_ctx, &day, &date, &month, &century, &year);
 8002404:	193c      	adds	r4, r7, r4
 8002406:	19ba      	adds	r2, r7, r6
 8002408:	1979      	adds	r1, r7, r5
 800240a:	4830      	ldr	r0, [pc, #192]	@ (80024cc <MAX31331_Init+0x1e4>)
 800240c:	2309      	movs	r3, #9
 800240e:	18fb      	adds	r3, r7, r3
 8002410:	9301      	str	r3, [sp, #4]
 8002412:	2308      	movs	r3, #8
 8002414:	18fb      	adds	r3, r7, r3
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	0023      	movs	r3, r4
 800241a:	f000 fc29 	bl	8002c70 <max31331_get_date>
	HAL_Delay(5);
 800241e:	2005      	movs	r0, #5
 8002420:	f001 f804 	bl	800342c <HAL_Delay>

	max31331_set_clko(&s_max_ctx, 1, CLKO_1Hz);
 8002424:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <MAX31331_Init+0x1e4>)
 8002426:	2200      	movs	r2, #0
 8002428:	2101      	movs	r1, #1
 800242a:	0018      	movs	r0, r3
 800242c:	f000 fc97 	bl	8002d5e <max31331_set_clko>
	HAL_Delay(5);
 8002430:	2005      	movs	r0, #5
 8002432:	f000 fffb 	bl	800342c <HAL_Delay>

	max31331_set_timer_config(&s_max_ctx, 0, 0, 1, TIMER_64Hz); // Disable timer and "resume" to change init
 8002436:	4825      	ldr	r0, [pc, #148]	@ (80024cc <MAX31331_Init+0x1e4>)
 8002438:	2302      	movs	r3, #2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2301      	movs	r3, #1
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	f000 fcc6 	bl	8002dd2 <max31331_set_timer_config>
	HAL_Delay(5);
 8002446:	2005      	movs	r0, #5
 8002448:	f000 fff0 	bl	800342c <HAL_Delay>
	max31331_set_timer_init(&s_max_ctx, 2);                    	// Update init to get interrupts every 2 ticks
 800244c:	4b1f      	ldr	r3, [pc, #124]	@ (80024cc <MAX31331_Init+0x1e4>)
 800244e:	2102      	movs	r1, #2
 8002450:	0018      	movs	r0, r3
 8002452:	f000 fd19 	bl	8002e88 <max31331_set_timer_init>
	HAL_Delay(5);
 8002456:	2005      	movs	r0, #5
 8002458:	f000 ffe8 	bl	800342c <HAL_Delay>
	max31331_set_timer_config(&s_max_ctx, 1, 0, 1, TIMER_64Hz); // 64hz timer every 2 ticks => 32hz interrupts
 800245c:	481b      	ldr	r0, [pc, #108]	@ (80024cc <MAX31331_Init+0x1e4>)
 800245e:	2302      	movs	r3, #2
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2301      	movs	r3, #1
 8002464:	2200      	movs	r2, #0
 8002466:	2101      	movs	r1, #1
 8002468:	f000 fcb3 	bl	8002dd2 <max31331_set_timer_config>
	HAL_Delay(5);
 800246c:	2005      	movs	r0, #5
 800246e:	f000 ffdd 	bl	800342c <HAL_Delay>
	
	max31331_set_int_en(&s_max_ctx, 0, 0, 0, 0, 1, 0, 0);      // Enable timer interrupt only
 8002472:	4816      	ldr	r0, [pc, #88]	@ (80024cc <MAX31331_Init+0x1e4>)
 8002474:	2300      	movs	r3, #0
 8002476:	9303      	str	r3, [sp, #12]
 8002478:	2300      	movs	r3, #0
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2301      	movs	r3, #1
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	2200      	movs	r2, #0
 8002488:	2100      	movs	r1, #0
 800248a:	f000 fd15 	bl	8002eb8 <max31331_set_int_en>
	uint8_t int_en = 0xFF;
 800248e:	1dbb      	adds	r3, r7, #6
 8002490:	22ff      	movs	r2, #255	@ 0xff
 8002492:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002494:	2005      	movs	r0, #5
 8002496:	f000 ffc9 	bl	800342c <HAL_Delay>
	max31331_get_int_en(&s_max_ctx, &int_en);
 800249a:	1dba      	adds	r2, r7, #6
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <MAX31331_Init+0x1e4>)
 800249e:	0011      	movs	r1, r2
 80024a0:	0018      	movs	r0, r3
 80024a2:	f000 fd94 	bl	8002fce <max31331_get_int_en>
	HAL_Delay(5);
 80024a6:	2005      	movs	r0, #5
 80024a8:	f000 ffc0 	bl	800342c <HAL_Delay>
	uint8_t rtc_status = 0xFF;
 80024ac:	1d7b      	adds	r3, r7, #5
 80024ae:	22ff      	movs	r2, #255	@ 0xff
 80024b0:	701a      	strb	r2, [r3, #0]
	max31331_get_status(&s_max_ctx, &rtc_status);
 80024b2:	1d7a      	adds	r2, r7, #5
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <MAX31331_Init+0x1e4>)
 80024b6:	0011      	movs	r1, r2
 80024b8:	0018      	movs	r0, r3
 80024ba:	f000 f9ab 	bl	8002814 <max31331_get_status>
	HAL_Delay(5);
 80024be:	2005      	movs	r0, #5
 80024c0:	f000 ffb4 	bl	800342c <HAL_Delay>
}
 80024c4:	46c0      	nop			@ (mov r8, r8)
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b005      	add	sp, #20
 80024ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024cc:	20000130 	.word	0x20000130
 80024d0:	0800262d 	.word	0x0800262d
 80024d4:	08002685 	.word	0x08002685
 80024d8:	0800342d 	.word	0x0800342d
 80024dc:	20000008 	.word	0x20000008

080024e0 <HAL_GPIO_EXTI_Falling_Callback>:

/* ============== EXTI IRQ Handler ============== */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	0002      	movs	r2, r0
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == RTC_INT_Pin) {
 80024ec:	1dbb      	adds	r3, r7, #6
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d112      	bne.n	800251a <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		if (timeInQueue < 2) {
 80024f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002524 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d80d      	bhi.n	800251a <HAL_GPIO_EXTI_Falling_Callback+0x3a>
			if (enqueueJob(&jobQueue, timeJob)) {
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 8002500:	2102      	movs	r1, #2
 8002502:	0018      	movs	r0, r3
 8002504:	f7ff fb80 	bl	8001c08 <enqueueJob>
 8002508:	1e03      	subs	r3, r0, #0
 800250a:	d006      	beq.n	800251a <HAL_GPIO_EXTI_Falling_Callback+0x3a>
				timeInQueue++;
 800250c:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	3301      	adds	r3, #1
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 8002518:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			@ (mov r8, r8)
 8002524:	20000192 	.word	0x20000192
 8002528:	20000144 	.word	0x20000144

0800252c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	0002      	movs	r2, r0
 8002534:	1dbb      	adds	r3, r7, #6
 8002536:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == IMU_INT2_Pin) {
 8002538:	1dbb      	adds	r3, r7, #6
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d112      	bne.n	8002566 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
		if (stepsInQueue < 2) {
 8002540:	4b16      	ldr	r3, [pc, #88]	@ (800259c <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d80d      	bhi.n	8002566 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
			if (enqueueJob(&jobQueue, stepJob)) {
 800254a:	4b15      	ldr	r3, [pc, #84]	@ (80025a0 <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 800254c:	2100      	movs	r1, #0
 800254e:	0018      	movs	r0, r3
 8002550:	f7ff fb5a 	bl	8001c08 <enqueueJob>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d006      	beq.n	8002566 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
				stepsInQueue++;
 8002558:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	b2db      	uxtb	r3, r3
 800255e:	3301      	adds	r3, #1
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4b0e      	ldr	r3, [pc, #56]	@ (800259c <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8002564:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (GPIO_Pin == IMU_INT1_Pin) { // INT 1 is disabled for now
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d112      	bne.n	8002594 <HAL_GPIO_EXTI_Rising_Callback+0x68>
		if (tapsInQueue < 2) {
 800256e:	4b0d      	ldr	r3, [pc, #52]	@ (80025a4 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d80d      	bhi.n	8002594 <HAL_GPIO_EXTI_Rising_Callback+0x68>
			if (enqueueJob(&jobQueue, tapJob)) {
 8002578:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 800257a:	2101      	movs	r1, #1
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff fb43 	bl	8001c08 <enqueueJob>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d006      	beq.n	8002594 <HAL_GPIO_EXTI_Rising_Callback+0x68>
				tapsInQueue++;
 8002586:	4b07      	ldr	r3, [pc, #28]	@ (80025a4 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	3301      	adds	r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 8002592:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8002594:	46c0      	nop			@ (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	b002      	add	sp, #8
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20000191 	.word	0x20000191
 80025a0:	20000144 	.word	0x20000144
 80025a4:	20000190 	.word	0x20000190

080025a8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c3) {
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4b16      	ldr	r3, [pc, #88]	@ (800260c <HAL_I2C_MemRxCpltCallback+0x64>)
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d122      	bne.n	80025fe <HAL_I2C_MemRxCpltCallback+0x56>
		// Step counter DMA finished
		if (TickDMAflag) {
 80025b8:	4b15      	ldr	r3, [pc, #84]	@ (8002610 <HAL_I2C_MemRxCpltCallback+0x68>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d006      	beq.n	80025d0 <HAL_I2C_MemRxCpltCallback+0x28>
			TickDMAflag = 0;
 80025c2:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <HAL_I2C_MemRxCpltCallback+0x68>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
			TickRXcomp = 1;
 80025c8:	4b12      	ldr	r3, [pc, #72]	@ (8002614 <HAL_I2C_MemRxCpltCallback+0x6c>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	e016      	b.n	80025fe <HAL_I2C_MemRxCpltCallback+0x56>
		} else if (TapDMAflag) {
 80025d0:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <HAL_I2C_MemRxCpltCallback+0x70>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <HAL_I2C_MemRxCpltCallback+0x40>
			TapDMAflag = 0;
 80025da:	4b0f      	ldr	r3, [pc, #60]	@ (8002618 <HAL_I2C_MemRxCpltCallback+0x70>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
			TapRXcomp = 1;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <HAL_I2C_MemRxCpltCallback+0x74>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e00a      	b.n	80025fe <HAL_I2C_MemRxCpltCallback+0x56>
		} else if (StepDMAflag) {
 80025e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002620 <HAL_I2C_MemRxCpltCallback+0x78>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d005      	beq.n	80025fe <HAL_I2C_MemRxCpltCallback+0x56>
			StepDMAflag = 0;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <HAL_I2C_MemRxCpltCallback+0x78>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
			StepRXcomp = 1;
 80025f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002624 <HAL_I2C_MemRxCpltCallback+0x7c>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
		}
    }
	DMArunning = 0;
 80025fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_I2C_MemRxCpltCallback+0x80>)
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]
}
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000003c 	.word	0x2000003c
 8002610:	20000194 	.word	0x20000194
 8002614:	20000195 	.word	0x20000195
 8002618:	20000196 	.word	0x20000196
 800261c:	20000197 	.word	0x20000197
 8002620:	20000198 	.word	0x20000198
 8002624:	20000199 	.word	0x20000199
 8002628:	20000193 	.word	0x20000193

0800262c <platform_write>:

/* ============== Platform Specific Read/Write ============== */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 800262c:	b5b0      	push	{r4, r5, r7, lr}
 800262e:	b08a      	sub	sp, #40	@ 0x28
 8002630:	af04      	add	r7, sp, #16
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	0008      	movs	r0, r1
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	0019      	movs	r1, r3
 800263a:	240b      	movs	r4, #11
 800263c:	193b      	adds	r3, r7, r4
 800263e:	1c02      	adds	r2, r0, #0
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	2508      	movs	r5, #8
 8002644:	197b      	adds	r3, r7, r5
 8002646:	1c0a      	adds	r2, r1, #0
 8002648:	801a      	strh	r2, [r3, #0]
	i2c_dev_t *dev = (i2c_dev_t *)handle;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(dev->i2c, (dev->addr_8bit), reg,
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	8899      	ldrh	r1, [r3, #4]
 8002656:	193b      	adds	r3, r7, r4
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b29a      	uxth	r2, r3
 800265c:	2364      	movs	r3, #100	@ 0x64
 800265e:	9302      	str	r3, [sp, #8]
 8002660:	197b      	adds	r3, r7, r5
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	9300      	str	r3, [sp, #0]
 800266a:	2301      	movs	r3, #1
 800266c:	f001 fdf4 	bl	8004258 <HAL_I2C_Mem_Write>
 8002670:	1e03      	subs	r3, r0, #0
 8002672:	d002      	beq.n	800267a <platform_write+0x4e>
							I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 100) != HAL_OK)
		return -1;
 8002674:	2301      	movs	r3, #1
 8002676:	425b      	negs	r3, r3
 8002678:	e000      	b.n	800267c <platform_write+0x50>
	return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bdb0      	pop	{r4, r5, r7, pc}

08002684 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002684:	b5b0      	push	{r4, r5, r7, lr}
 8002686:	b08a      	sub	sp, #40	@ 0x28
 8002688:	af04      	add	r7, sp, #16
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	0008      	movs	r0, r1
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	0019      	movs	r1, r3
 8002692:	240b      	movs	r4, #11
 8002694:	193b      	adds	r3, r7, r4
 8002696:	1c02      	adds	r2, r0, #0
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	2508      	movs	r5, #8
 800269c:	197b      	adds	r3, r7, r5
 800269e:	1c0a      	adds	r2, r1, #0
 80026a0:	801a      	strh	r2, [r3, #0]
	i2c_dev_t *dev = (i2c_dev_t *)handle;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(dev->i2c, (dev->addr_8bit), reg,
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	8899      	ldrh	r1, [r3, #4]
 80026ae:	193b      	adds	r3, r7, r4
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	2364      	movs	r3, #100	@ 0x64
 80026b6:	9302      	str	r3, [sp, #8]
 80026b8:	197b      	adds	r3, r7, r5
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2301      	movs	r3, #1
 80026c4:	f001 fef6 	bl	80044b4 <HAL_I2C_Mem_Read>
 80026c8:	1e03      	subs	r3, r0, #0
 80026ca:	d002      	beq.n	80026d2 <platform_read+0x4e>
							I2C_MEMADD_SIZE_8BIT, bufp, len, 100) != HAL_OK)
	return -1;
 80026cc:	2301      	movs	r3, #1
 80026ce:	425b      	negs	r3, r3
 80026d0:	e000      	b.n	80026d4 <platform_read+0x50>
	return 0;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b006      	add	sp, #24
 80026da:	bdb0      	pop	{r4, r5, r7, pc}

080026dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026e4:	46c0      	nop			@ (mov r8, r8)
 80026e6:	e7fd      	b.n	80026e4 <Error_Handler+0x8>

080026e8 <max31331_read_reg>:
  * @param  reg   register to read
  * @param  data  pointer to buffer that store the data read(ptr)
  * @param  len   number of consecutive register to read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  */
int32_t max31331_read_reg(const max31331_ctx_t *ctx, uint8_t reg, uint8_t *data, uint16_t len) {
 80026e8:	b5b0      	push	{r4, r5, r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	0008      	movs	r0, r1
 80026f2:	607a      	str	r2, [r7, #4]
 80026f4:	0019      	movs	r1, r3
 80026f6:	230b      	movs	r3, #11
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	1c02      	adds	r2, r0, #0
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	2308      	movs	r3, #8
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	1c0a      	adds	r2, r1, #0
 8002704:	801a      	strh	r2, [r3, #0]
    if (ctx == NULL || data == NULL || ctx->read_reg == NULL) {
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <max31331_read_reg+0x32>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <max31331_read_reg+0x32>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <max31331_read_reg+0x38>
        return -1;
 800271a:	2301      	movs	r3, #1
 800271c:	425b      	negs	r3, r3
 800271e:	e00d      	b.n	800273c <max31331_read_reg+0x54>
    }
    return ctx->read_reg(ctx->handle, reg, data, len);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685c      	ldr	r4, [r3, #4]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	68d8      	ldr	r0, [r3, #12]
 8002728:	2308      	movs	r3, #8
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	881d      	ldrh	r5, [r3, #0]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	230b      	movs	r3, #11
 8002732:	18fb      	adds	r3, r7, r3
 8002734:	7819      	ldrb	r1, [r3, #0]
 8002736:	002b      	movs	r3, r5
 8002738:	47a0      	blx	r4
 800273a:	0003      	movs	r3, r0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b004      	add	sp, #16
 8002742:	bdb0      	pop	{r4, r5, r7, pc}

08002744 <max31331_write_reg>:
  * @param  reg   register to write
  * @param  data  pointer to data to write in register reg(ptr)
  * @param  len   number of consecutive register to write
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  */
int32_t max31331_write_reg(const max31331_ctx_t *ctx, uint8_t reg, uint8_t *data, uint16_t len) {
 8002744:	b5b0      	push	{r4, r5, r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	0008      	movs	r0, r1
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	0019      	movs	r1, r3
 8002752:	230b      	movs	r3, #11
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	1c02      	adds	r2, r0, #0
 8002758:	701a      	strb	r2, [r3, #0]
 800275a:	2308      	movs	r3, #8
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	1c0a      	adds	r2, r1, #0
 8002760:	801a      	strh	r2, [r3, #0]
    if (ctx == NULL || data == NULL || ctx->write_reg == NULL) {
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <max31331_write_reg+0x32>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <max31331_write_reg+0x32>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d102      	bne.n	800277c <max31331_write_reg+0x38>
        return -1;
 8002776:	2301      	movs	r3, #1
 8002778:	425b      	negs	r3, r3
 800277a:	e00d      	b.n	8002798 <max31331_write_reg+0x54>
    }
    return ctx->write_reg(ctx->handle, reg, data, len);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681c      	ldr	r4, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	68d8      	ldr	r0, [r3, #12]
 8002784:	2308      	movs	r3, #8
 8002786:	18fb      	adds	r3, r7, r3
 8002788:	881d      	ldrh	r5, [r3, #0]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	230b      	movs	r3, #11
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	7819      	ldrb	r1, [r3, #0]
 8002792:	002b      	movs	r3, r5
 8002794:	47a0      	blx	r4
 8002796:	0003      	movs	r3, r0
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b004      	add	sp, #16
 800279e:	bdb0      	pop	{r4, r5, r7, pc}

080027a0 <bin2dec_bcd>:

/* ============ Helper Functions ============ */
uint8_t bin2dec_bcd(uint8_t bcd) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	0002      	movs	r2, r0
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	701a      	strb	r2, [r3, #0]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	091b      	lsrs	r3, r3, #4
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	1c1a      	adds	r2, r3, #0
 80027b6:	0092      	lsls	r2, r2, #2
 80027b8:	18d3      	adds	r3, r2, r3
 80027ba:	18db      	adds	r3, r3, r3
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	210f      	movs	r1, #15
 80027c4:	400b      	ands	r3, r1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	18d3      	adds	r3, r2, r3
 80027ca:	b2db      	uxtb	r3, r3
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b002      	add	sp, #8
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <dec2bin_bcd>:
uint8_t dec2bin_bcd(uint8_t dec) {
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	0002      	movs	r2, r0
 80027dc:	1dfb      	adds	r3, r7, #7
 80027de:	701a      	strb	r2, [r3, #0]
    return (dec/10) << 4 | (dec%10);
 80027e0:	1dfb      	adds	r3, r7, #7
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	210a      	movs	r1, #10
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7fd fc8e 	bl	8000108 <__udivsi3>
 80027ec:	0003      	movs	r3, r0
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	b25c      	sxtb	r4, r3
 80027f4:	1dfb      	adds	r3, r7, #7
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	210a      	movs	r1, #10
 80027fa:	0018      	movs	r0, r3
 80027fc:	f7fd fd0a 	bl	8000214 <__aeabi_uidivmod>
 8002800:	000b      	movs	r3, r1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	b25b      	sxtb	r3, r3
 8002806:	4323      	orrs	r3, r4
 8002808:	b25b      	sxtb	r3, r3
 800280a:	b2db      	uxtb	r3, r3
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b003      	add	sp, #12
 8002812:	bd90      	pop	{r4, r7, pc}

08002814 <max31331_get_status>:

/* ============ Register Functions ============ */
int max31331_get_status(const max31331_ctx_t *ctx, uint8_t *status) {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
    if (ctx == NULL || status == NULL) return -1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d002      	beq.n	800282a <max31331_get_status+0x16>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d102      	bne.n	8002830 <max31331_get_status+0x1c>
 800282a:	2301      	movs	r3, #1
 800282c:	425b      	negs	r3, r3
 800282e:	e006      	b.n	800283e <max31331_get_status+0x2a>
    return max31331_read_reg(ctx, MAX31331_RTC_STATUS, status, 1);
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	2301      	movs	r3, #1
 8002836:	2100      	movs	r1, #0
 8002838:	f7ff ff56 	bl	80026e8 <max31331_read_reg>
 800283c:	0003      	movs	r3, r0
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}

08002846 <max31331_reset_rtc>:

int max31331_reset_rtc(const max31331_ctx_t *ctx) {
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) return -1;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d102      	bne.n	800285a <max31331_reset_rtc+0x14>
 8002854:	2301      	movs	r3, #1
 8002856:	425b      	negs	r3, r3
 8002858:	e021      	b.n	800289e <max31331_reset_rtc+0x58>
    uint8_t reset = (1 << MAX31331_RESET_SWRST_POS) & MAX31331_RESET_SWRST_MSK;
 800285a:	210b      	movs	r1, #11
 800285c:	187b      	adds	r3, r7, r1
 800285e:	2201      	movs	r2, #1
 8002860:	701a      	strb	r2, [r3, #0]
    int ret = max31331_write_reg(ctx, MAX31331_RTC_RESET, &reset, 1);
 8002862:	187a      	adds	r2, r7, r1
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	2301      	movs	r3, #1
 8002868:	2102      	movs	r1, #2
 800286a:	f7ff ff6b 	bl	8002744 <max31331_write_reg>
 800286e:	0003      	movs	r3, r0
 8002870:	60fb      	str	r3, [r7, #12]
    
    if (ret != 0) return ret;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <max31331_reset_rtc+0x36>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	e010      	b.n	800289e <max31331_reset_rtc+0x58>

    ctx->mdelay(5);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2005      	movs	r0, #5
 8002882:	4798      	blx	r3
    reset = (0 << MAX31331_RESET_SWRST_POS) & MAX31331_RESET_SWRST_MSK;
 8002884:	210b      	movs	r1, #11
 8002886:	187b      	adds	r3, r7, r1
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
    ret = max31331_write_reg(ctx, MAX31331_RTC_RESET, &reset, 1);
 800288c:	187a      	adds	r2, r7, r1
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	2301      	movs	r3, #1
 8002892:	2102      	movs	r1, #2
 8002894:	f7ff ff56 	bl	8002744 <max31331_write_reg>
 8002898:	0003      	movs	r3, r0
 800289a:	60fb      	str	r3, [r7, #12]
    return ret;
 800289c:	68fb      	ldr	r3, [r7, #12]
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <max31331_set_time>:

int max31331_set_time(const max31331_ctx_t *ctx, uint8_t seconds, uint8_t minutes, uint8_t hours) {
 80028a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	000c      	movs	r4, r1
 80028b0:	0010      	movs	r0, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	1cfb      	adds	r3, r7, #3
 80028b6:	1c22      	adds	r2, r4, #0
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	1cbb      	adds	r3, r7, #2
 80028bc:	1c02      	adds	r2, r0, #0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	1c7b      	adds	r3, r7, #1
 80028c2:	1c0a      	adds	r2, r1, #0
 80028c4:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d102      	bne.n	80028d2 <max31331_set_time+0x2c>
 80028cc:	2301      	movs	r3, #1
 80028ce:	425b      	negs	r3, r3
 80028d0:	e07c      	b.n	80029cc <max31331_set_time+0x126>
    if (seconds > 59 || minutes > 59 || hours > 23) return -2;
 80028d2:	1cfb      	adds	r3, r7, #3
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b3b      	cmp	r3, #59	@ 0x3b
 80028d8:	d807      	bhi.n	80028ea <max31331_set_time+0x44>
 80028da:	1cbb      	adds	r3, r7, #2
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b3b      	cmp	r3, #59	@ 0x3b
 80028e0:	d803      	bhi.n	80028ea <max31331_set_time+0x44>
 80028e2:	1c7b      	adds	r3, r7, #1
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b17      	cmp	r3, #23
 80028e8:	d902      	bls.n	80028f0 <max31331_set_time+0x4a>
 80028ea:	2302      	movs	r3, #2
 80028ec:	425b      	negs	r3, r3
 80028ee:	e06d      	b.n	80029cc <max31331_set_time+0x126>

    uint8_t s = (dec2bin_bcd(seconds) << MAX31331_SECONDS_POS)    & MAX31331_SECONDS_MSK;  /* packed BCD */
 80028f0:	1cfb      	adds	r3, r7, #3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff ff6d 	bl	80027d4 <dec2bin_bcd>
 80028fa:	0003      	movs	r3, r0
 80028fc:	0019      	movs	r1, r3
 80028fe:	250f      	movs	r5, #15
 8002900:	197b      	adds	r3, r7, r5
 8002902:	227f      	movs	r2, #127	@ 0x7f
 8002904:	400a      	ands	r2, r1
 8002906:	701a      	strb	r2, [r3, #0]
    uint8_t m = (dec2bin_bcd(minutes) << MAX31331_MINUTES_POS)    & MAX31331_MINUTES_MSK;
 8002908:	1cbb      	adds	r3, r7, #2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	0018      	movs	r0, r3
 800290e:	f7ff ff61 	bl	80027d4 <dec2bin_bcd>
 8002912:	0003      	movs	r3, r0
 8002914:	0019      	movs	r1, r3
 8002916:	260e      	movs	r6, #14
 8002918:	19bb      	adds	r3, r7, r6
 800291a:	227f      	movs	r2, #127	@ 0x7f
 800291c:	400a      	ands	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]
    
    uint8_t h = 0;
 8002920:	240d      	movs	r4, #13
 8002922:	193b      	adds	r3, r7, r4
 8002924:	2200      	movs	r2, #0
 8002926:	701a      	strb	r2, [r3, #0]
    h |= dec2bin_bcd(hours % 10) & MAX31331_HOURS_HOUR_MSK;           // lower 4 bits HOUR
 8002928:	1c7b      	adds	r3, r7, #1
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	210a      	movs	r1, #10
 800292e:	0018      	movs	r0, r3
 8002930:	f7fd fc70 	bl	8000214 <__aeabi_uidivmod>
 8002934:	000b      	movs	r3, r1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff ff4b 	bl	80027d4 <dec2bin_bcd>
 800293e:	0003      	movs	r3, r0
 8002940:	001a      	movs	r2, r3
 8002942:	230f      	movs	r3, #15
 8002944:	4013      	ands	r3, r2
 8002946:	b2d9      	uxtb	r1, r3
 8002948:	193b      	adds	r3, r7, r4
 800294a:	193a      	adds	r2, r7, r4
 800294c:	7812      	ldrb	r2, [r2, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
    h |= ((hours / 10) << MAX31331_HOURS_HR10_POS) & MAX31331_HOURS_HR10_MSK; // HR10
 8002952:	1c7b      	adds	r3, r7, #1
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	210a      	movs	r1, #10
 8002958:	0018      	movs	r0, r3
 800295a:	f7fd fbd5 	bl	8000108 <__udivsi3>
 800295e:	0003      	movs	r3, r0
 8002960:	b2db      	uxtb	r3, r3
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2210      	movs	r2, #16
 8002968:	4013      	ands	r3, r2
 800296a:	b2d9      	uxtb	r1, r3
 800296c:	193b      	adds	r3, r7, r4
 800296e:	193a      	adds	r2, r7, r4
 8002970:	7812      	ldrb	r2, [r2, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	701a      	strb	r2, [r3, #0]
    h |= ((hours / 20) << MAX31331_HOURS_HR20_AMPM_POS) & MAX31331_HOURS_HR20_AMPM_MSK; // HR20
 8002976:	1c7b      	adds	r3, r7, #1
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2114      	movs	r1, #20
 800297c:	0018      	movs	r0, r3
 800297e:	f7fd fbc3 	bl	8000108 <__udivsi3>
 8002982:	0003      	movs	r3, r0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	015b      	lsls	r3, r3, #5
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2220      	movs	r2, #32
 800298c:	4013      	ands	r3, r2
 800298e:	b2d9      	uxtb	r1, r3
 8002990:	193b      	adds	r3, r7, r4
 8002992:	193a      	adds	r2, r7, r4
 8002994:	7812      	ldrb	r2, [r2, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	701a      	strb	r2, [r3, #0]
    h |= (HOUR24 << MAX31331_TS_F24_12_POS) & MAX31331_TS_F24_12_MSK; // 24-hour mode
 800299a:	193b      	adds	r3, r7, r4
 800299c:	0021      	movs	r1, r4
 800299e:	193a      	adds	r2, r7, r4
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	701a      	strb	r2, [r3, #0]

    uint8_t time[] = {s, m, h};
 80029a4:	2008      	movs	r0, #8
 80029a6:	183b      	adds	r3, r7, r0
 80029a8:	197a      	adds	r2, r7, r5
 80029aa:	7812      	ldrb	r2, [r2, #0]
 80029ac:	701a      	strb	r2, [r3, #0]
 80029ae:	183b      	adds	r3, r7, r0
 80029b0:	19ba      	adds	r2, r7, r6
 80029b2:	7812      	ldrb	r2, [r2, #0]
 80029b4:	705a      	strb	r2, [r3, #1]
 80029b6:	183b      	adds	r3, r7, r0
 80029b8:	187a      	adds	r2, r7, r1
 80029ba:	7812      	ldrb	r2, [r2, #0]
 80029bc:	709a      	strb	r2, [r3, #2]

    return max31331_write_reg(ctx, MAX31331_SECONDS, time, sizeof(time));
 80029be:	183a      	adds	r2, r7, r0
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	2303      	movs	r3, #3
 80029c4:	2108      	movs	r1, #8
 80029c6:	f7ff febd 	bl	8002744 <max31331_write_reg>
 80029ca:	0003      	movs	r3, r0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b005      	add	sp, #20
 80029d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029d4 <max31331_get_time>:

int max31331_get_time(const max31331_ctx_t *ctx, uint8_t *seconds, uint8_t *minutes, uint8_t *hours, uint8_t *format) {
 80029d4:	b5b0      	push	{r4, r5, r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
	if (!ctx || !seconds || !minutes || !hours || !format) return -1;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <max31331_get_time+0x2c>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d008      	beq.n	8002a00 <max31331_get_time+0x2c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <max31331_get_time+0x2c>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <max31331_get_time+0x2c>
 80029fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <max31331_get_time+0x32>
 8002a00:	2301      	movs	r3, #1
 8002a02:	425b      	negs	r3, r3
 8002a04:	e0a7      	b.n	8002b56 <max31331_get_time+0x182>

    uint8_t time[3] = {0};
 8002a06:	2014      	movs	r0, #20
 8002a08:	183b      	adds	r3, r7, r0
 8002a0a:	4a55      	ldr	r2, [pc, #340]	@ (8002b60 <max31331_get_time+0x18c>)
 8002a0c:	8812      	ldrh	r2, [r2, #0]
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	2202      	movs	r2, #2
 8002a12:	2100      	movs	r1, #0
 8002a14:	5499      	strb	r1, [r3, r2]

    int32_t ret = max31331_read_reg(ctx, MAX31331_SECONDS, time, sizeof(time));
 8002a16:	183a      	adds	r2, r7, r0
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	2108      	movs	r1, #8
 8002a1e:	f7ff fe63 	bl	80026e8 <max31331_read_reg>
 8002a22:	0003      	movs	r3, r0
 8002a24:	61fb      	str	r3, [r7, #28]
    if (ret != 0) return ret;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <max31331_get_time+0x5c>
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	e092      	b.n	8002b56 <max31331_get_time+0x182>

    uint8_t s = time[0]; // seconds register
 8002a30:	201b      	movs	r0, #27
 8002a32:	183b      	adds	r3, r7, r0
 8002a34:	2114      	movs	r1, #20
 8002a36:	187a      	adds	r2, r7, r1
 8002a38:	7812      	ldrb	r2, [r2, #0]
 8002a3a:	701a      	strb	r2, [r3, #0]
    uint8_t m = time[1]; // minutes register
 8002a3c:	251a      	movs	r5, #26
 8002a3e:	197b      	adds	r3, r7, r5
 8002a40:	187a      	adds	r2, r7, r1
 8002a42:	7852      	ldrb	r2, [r2, #1]
 8002a44:	701a      	strb	r2, [r3, #0]
    uint8_t h = time[2]; // hours register
 8002a46:	2419      	movs	r4, #25
 8002a48:	193b      	adds	r3, r7, r4
 8002a4a:	187a      	adds	r2, r7, r1
 8002a4c:	7892      	ldrb	r2, [r2, #2]
 8002a4e:	701a      	strb	r2, [r3, #0]

	*seconds = bin2dec_bcd((s & MAX31331_SECONDS_MSK) >> MAX31331_SECONDS_POS);
 8002a50:	183b      	adds	r3, r7, r0
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	227f      	movs	r2, #127	@ 0x7f
 8002a56:	4013      	ands	r3, r2
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff fea0 	bl	80027a0 <bin2dec_bcd>
 8002a60:	0003      	movs	r3, r0
 8002a62:	001a      	movs	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	701a      	strb	r2, [r3, #0]
    *minutes = bin2dec_bcd((m & MAX31331_MINUTES_MSK) >> MAX31331_MINUTES_POS);
 8002a68:	197b      	adds	r3, r7, r5
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	227f      	movs	r2, #127	@ 0x7f
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	0018      	movs	r0, r3
 8002a74:	f7ff fe94 	bl	80027a0 <bin2dec_bcd>
 8002a78:	0003      	movs	r3, r0
 8002a7a:	001a      	movs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	701a      	strb	r2, [r3, #0]
    
    *format  = (h & MAX31331_TS_F24_12_MSK) >> MAX31331_TS_F24_12_POS;
 8002a80:	193b      	adds	r3, r7, r4
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	099b      	lsrs	r3, r3, #6
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	2201      	movs	r2, #1
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	701a      	strb	r2, [r3, #0]
    
	if (*format == HOUR24) {
 8002a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d121      	bne.n	8002ade <max31331_get_time+0x10a>
        *hours = ((h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS) * 20
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	095b      	lsrs	r3, r3, #5
               + ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2214      	movs	r2, #20
 8002aaa:	4353      	muls	r3, r2
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	091b      	lsrs	r3, r3, #4
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	400b      	ands	r3, r1
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	1c19      	adds	r1, r3, #0
 8002abe:	0089      	lsls	r1, r1, #2
 8002ac0:	18cb      	adds	r3, r1, r3
 8002ac2:	18db      	adds	r3, r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	18d3      	adds	r3, r2, r3
 8002ac8:	b2da      	uxtb	r2, r3
               + ((h & MAX31331_HOURS_HOUR_MSK) >> MAX31331_HOURS_HOUR_POS);
 8002aca:	193b      	adds	r3, r7, r4
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	210f      	movs	r1, #15
 8002ad0:	400b      	ands	r3, r1
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	18d3      	adds	r3, r2, r3
 8002ad6:	b2da      	uxtb	r2, r3
        *hours = ((h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS) * 20
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	701a      	strb	r2, [r3, #0]
 8002adc:	e03a      	b.n	8002b54 <max31331_get_time+0x180>
    } else {
        uint8_t h12 = ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8002ade:	2019      	movs	r0, #25
 8002ae0:	183b      	adds	r3, r7, r0
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	091b      	lsrs	r3, r3, #4
                    + ((h & MAX31331_HOURS_HOUR_MSK) >> MAX31331_HOURS_HOUR_POS);
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4013      	ands	r3, r2
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	1c1a      	adds	r2, r3, #0
 8002af0:	0092      	lsls	r2, r2, #2
 8002af2:	18d3      	adds	r3, r2, r3
 8002af4:	18db      	adds	r3, r3, r3
 8002af6:	b2d9      	uxtb	r1, r3
 8002af8:	183b      	adds	r3, r7, r0
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	220f      	movs	r2, #15
 8002afe:	4013      	ands	r3, r2
 8002b00:	b2da      	uxtb	r2, r3
        uint8_t h12 = ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8002b02:	2418      	movs	r4, #24
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	188a      	adds	r2, r1, r2
 8002b08:	701a      	strb	r2, [r3, #0]
        uint8_t am_pm = (h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS;
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	2017      	movs	r0, #23
 8002b14:	183b      	adds	r3, r7, r0
 8002b16:	2101      	movs	r1, #1
 8002b18:	400a      	ands	r2, r1
 8002b1a:	701a      	strb	r2, [r3, #0]
        if (am_pm == AM) {          // AM
 8002b1c:	183b      	adds	r3, r7, r0
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <max31331_get_time+0x166>
            *hours = (h12 == 12) ? 0 : h12;
 8002b24:	193b      	adds	r3, r7, r4
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d002      	beq.n	8002b32 <max31331_get_time+0x15e>
 8002b2c:	193b      	adds	r3, r7, r4
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	e000      	b.n	8002b34 <max31331_get_time+0x160>
 8002b32:	2200      	movs	r2, #0
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	701a      	strb	r2, [r3, #0]
 8002b38:	e00c      	b.n	8002b54 <max31331_get_time+0x180>
        } else {                    // PM
            *hours = (h12 == 12) ? 12 : h12 + 12;
 8002b3a:	2218      	movs	r2, #24
 8002b3c:	18bb      	adds	r3, r7, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b0c      	cmp	r3, #12
 8002b42:	d004      	beq.n	8002b4e <max31331_get_time+0x17a>
 8002b44:	18bb      	adds	r3, r7, r2
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	330c      	adds	r3, #12
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	e000      	b.n	8002b50 <max31331_get_time+0x17c>
 8002b4e:	220c      	movs	r2, #12
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	701a      	strb	r2, [r3, #0]
        }
    }

	return ret;
 8002b54:	69fb      	ldr	r3, [r7, #28]
}
 8002b56:	0018      	movs	r0, r3
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b008      	add	sp, #32
 8002b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	08007f24 	.word	0x08007f24

08002b64 <max31331_set_date>:

int max31331_set_date(const max31331_ctx_t *ctx, uint8_t day, uint8_t date, uint8_t month, uint8_t century, uint8_t year) {
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	000c      	movs	r4, r1
 8002b6e:	0010      	movs	r0, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	1cfb      	adds	r3, r7, #3
 8002b74:	1c22      	adds	r2, r4, #0
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	1cbb      	adds	r3, r7, #2
 8002b7a:	1c02      	adds	r2, r0, #0
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	1c7b      	adds	r3, r7, #1
 8002b80:	1c0a      	adds	r2, r1, #0
 8002b82:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <max31331_set_date+0x2c>
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	425b      	negs	r3, r3
 8002b8e:	e06b      	b.n	8002c68 <max31331_set_date+0x104>
    if (date < 1 || date > 31 || month < 1 || month > 12 || day < 1 || day > 7) return -2;
 8002b90:	1cbb      	adds	r3, r7, #2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d013      	beq.n	8002bc0 <max31331_set_date+0x5c>
 8002b98:	1cbb      	adds	r3, r7, #2
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b1f      	cmp	r3, #31
 8002b9e:	d80f      	bhi.n	8002bc0 <max31331_set_date+0x5c>
 8002ba0:	1c7b      	adds	r3, r7, #1
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <max31331_set_date+0x5c>
 8002ba8:	1c7b      	adds	r3, r7, #1
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b0c      	cmp	r3, #12
 8002bae:	d807      	bhi.n	8002bc0 <max31331_set_date+0x5c>
 8002bb0:	1cfb      	adds	r3, r7, #3
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <max31331_set_date+0x5c>
 8002bb8:	1cfb      	adds	r3, r7, #3
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b07      	cmp	r3, #7
 8002bbe:	d902      	bls.n	8002bc6 <max31331_set_date+0x62>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	425b      	negs	r3, r3
 8002bc4:	e050      	b.n	8002c68 <max31331_set_date+0x104>

    uint8_t d   = (day                  << MAX31331_DAY_POS) & MAX31331_DAY_MSK;     // day register
 8002bc6:	230f      	movs	r3, #15
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	1cfa      	adds	r2, r7, #3
 8002bcc:	7812      	ldrb	r2, [r2, #0]
 8002bce:	2107      	movs	r1, #7
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	701a      	strb	r2, [r3, #0]
    uint8_t dt  = (dec2bin_bcd(date)    << MAX31331_DATE_POS) & MAX31331_DATE_MSK;   // date register (bits 5:0)
 8002bd4:	1cbb      	adds	r3, r7, #2
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f7ff fdfb 	bl	80027d4 <dec2bin_bcd>
 8002bde:	0003      	movs	r3, r0
 8002be0:	0019      	movs	r1, r3
 8002be2:	230e      	movs	r3, #14
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	223f      	movs	r2, #63	@ 0x3f
 8002be8:	400a      	ands	r2, r1
 8002bea:	701a      	strb	r2, [r3, #0]
    uint8_t m   = ((dec2bin_bcd(month)  << MAX31331_MONTH_POS) & MAX31331_MONTH_MSK) // month register (bits 4:0)
 8002bec:	1c7b      	adds	r3, r7, #1
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff fdef 	bl	80027d4 <dec2bin_bcd>
 8002bf6:	0003      	movs	r3, r0
 8002bf8:	001a      	movs	r2, r3
 8002bfa:	230f      	movs	r3, #15
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	b2d9      	uxtb	r1, r3
                  | ((century ? 1 : 0)  << MAX31331_CENT_POS);                       // century bit
 8002c00:	2320      	movs	r3, #32
 8002c02:	2208      	movs	r2, #8
 8002c04:	189b      	adds	r3, r3, r2
 8002c06:	19db      	adds	r3, r3, r7
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <max31331_set_date+0xae>
 8002c0e:	2380      	movs	r3, #128	@ 0x80
 8002c10:	e000      	b.n	8002c14 <max31331_set_date+0xb0>
 8002c12:	2300      	movs	r3, #0
    uint8_t m   = ((dec2bin_bcd(month)  << MAX31331_MONTH_POS) & MAX31331_MONTH_MSK) // month register (bits 4:0)
 8002c14:	250d      	movs	r5, #13
 8002c16:	197a      	adds	r2, r7, r5
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	7013      	strb	r3, [r2, #0]
    uint8_t y   = (dec2bin_bcd(year)    << MAX31331_YEAR_POS) & MAX31331_YEAR_MSK;   // year register
 8002c1c:	260c      	movs	r6, #12
 8002c1e:	19bc      	adds	r4, r7, r6
 8002c20:	2324      	movs	r3, #36	@ 0x24
 8002c22:	2208      	movs	r2, #8
 8002c24:	189b      	adds	r3, r3, r2
 8002c26:	19db      	adds	r3, r3, r7
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f7ff fdd2 	bl	80027d4 <dec2bin_bcd>
 8002c30:	0003      	movs	r3, r0
 8002c32:	7023      	strb	r3, [r4, #0]

    uint8_t set_date[] = {d, dt, m, y};
 8002c34:	2108      	movs	r1, #8
 8002c36:	187b      	adds	r3, r7, r1
 8002c38:	220f      	movs	r2, #15
 8002c3a:	18ba      	adds	r2, r7, r2
 8002c3c:	7812      	ldrb	r2, [r2, #0]
 8002c3e:	701a      	strb	r2, [r3, #0]
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	220e      	movs	r2, #14
 8002c44:	18ba      	adds	r2, r7, r2
 8002c46:	7812      	ldrb	r2, [r2, #0]
 8002c48:	705a      	strb	r2, [r3, #1]
 8002c4a:	187b      	adds	r3, r7, r1
 8002c4c:	197a      	adds	r2, r7, r5
 8002c4e:	7812      	ldrb	r2, [r2, #0]
 8002c50:	709a      	strb	r2, [r3, #2]
 8002c52:	187b      	adds	r3, r7, r1
 8002c54:	19ba      	adds	r2, r7, r6
 8002c56:	7812      	ldrb	r2, [r2, #0]
 8002c58:	70da      	strb	r2, [r3, #3]

    return max31331_write_reg(ctx, MAX31331_DAY, set_date, sizeof(set_date));;
 8002c5a:	187a      	adds	r2, r7, r1
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	2304      	movs	r3, #4
 8002c60:	210b      	movs	r1, #11
 8002c62:	f7ff fd6f 	bl	8002744 <max31331_write_reg>
 8002c66:	0003      	movs	r3, r0
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b005      	add	sp, #20
 8002c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c70 <max31331_get_date>:

int max31331_get_date(const max31331_ctx_t *ctx, uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *century, uint8_t *year) {
 8002c70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c72:	b089      	sub	sp, #36	@ 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
    if (!ctx || !day || !date || !month || !year) return -1;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00b      	beq.n	8002c9c <max31331_get_date+0x2c>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d008      	beq.n	8002c9c <max31331_get_date+0x2c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <max31331_get_date+0x2c>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <max31331_get_date+0x2c>
 8002c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <max31331_get_date+0x32>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	425b      	negs	r3, r3
 8002ca0:	e059      	b.n	8002d56 <max31331_get_date+0xe6>

    uint8_t regs[4] = {0};
 8002ca2:	2114      	movs	r1, #20
 8002ca4:	187b      	adds	r3, r7, r1
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	601a      	str	r2, [r3, #0]
    int32_t ret = max31331_read_reg(ctx, MAX31331_DAY, regs, sizeof(regs));
 8002caa:	187a      	adds	r2, r7, r1
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	2304      	movs	r3, #4
 8002cb0:	210b      	movs	r1, #11
 8002cb2:	f7ff fd19 	bl	80026e8 <max31331_read_reg>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	61fb      	str	r3, [r7, #28]
    if (ret != 0) return ret;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <max31331_get_date+0x54>
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	e048      	b.n	8002d56 <max31331_get_date+0xe6>

    uint8_t d  = regs[0];   // day register
 8002cc4:	201b      	movs	r0, #27
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	2114      	movs	r1, #20
 8002cca:	187a      	adds	r2, r7, r1
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	701a      	strb	r2, [r3, #0]
    uint8_t dt = regs[1];   // date register
 8002cd0:	251a      	movs	r5, #26
 8002cd2:	197b      	adds	r3, r7, r5
 8002cd4:	187a      	adds	r2, r7, r1
 8002cd6:	7852      	ldrb	r2, [r2, #1]
 8002cd8:	701a      	strb	r2, [r3, #0]
    uint8_t m  = regs[2];   // month + century bit
 8002cda:	2419      	movs	r4, #25
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	187a      	adds	r2, r7, r1
 8002ce0:	7892      	ldrb	r2, [r2, #2]
 8002ce2:	701a      	strb	r2, [r3, #0]
    uint8_t y  = regs[3];   // year register
 8002ce4:	2618      	movs	r6, #24
 8002ce6:	19bb      	adds	r3, r7, r6
 8002ce8:	187a      	adds	r2, r7, r1
 8002cea:	78d2      	ldrb	r2, [r2, #3]
 8002cec:	701a      	strb	r2, [r3, #0]

    *day     = bin2dec_bcd((d & MAX31331_DAY_MSK)   >> MAX31331_DAY_POS);
 8002cee:	183b      	adds	r3, r7, r0
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2207      	movs	r2, #7
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff fd51 	bl	80027a0 <bin2dec_bcd>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	001a      	movs	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	701a      	strb	r2, [r3, #0]
    *date    = bin2dec_bcd((dt & MAX31331_DATE_MSK) >> MAX31331_DATE_POS);  // lower 6 bits = date (1–31)
 8002d06:	197b      	adds	r3, r7, r5
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	223f      	movs	r2, #63	@ 0x3f
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	0018      	movs	r0, r3
 8002d12:	f7ff fd45 	bl	80027a0 <bin2dec_bcd>
 8002d16:	0003      	movs	r3, r0
 8002d18:	001a      	movs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	701a      	strb	r2, [r3, #0]
    *month   = bin2dec_bcd((m & MAX31331_MONTH_MSK) >> MAX31331_MONTH_POS); // lower 5 bits = month (1–12)
 8002d1e:	193b      	adds	r3, r7, r4
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	220f      	movs	r2, #15
 8002d24:	4013      	ands	r3, r2
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7ff fd39 	bl	80027a0 <bin2dec_bcd>
 8002d2e:	0003      	movs	r3, r0
 8002d30:	001a      	movs	r2, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	701a      	strb	r2, [r3, #0]
    *century = (m & MAX31331_CENT_MSK) >> MAX31331_CENT_POS;
 8002d36:	193b      	adds	r3, r7, r4
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	09db      	lsrs	r3, r3, #7
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	701a      	strb	r2, [r3, #0]
    *year    = bin2dec_bcd(y & MAX31331_YEAR_MSK) >> MAX31331_YEAR_POS;        // year (00–99)
 8002d42:	19bb      	adds	r3, r7, r6
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	0018      	movs	r0, r3
 8002d48:	f7ff fd2a 	bl	80027a0 <bin2dec_bcd>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	001a      	movs	r2, r3
 8002d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d52:	701a      	strb	r2, [r3, #0]

    return ret;
 8002d54:	69fb      	ldr	r3, [r7, #28]
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b009      	add	sp, #36	@ 0x24
 8002d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d5e <max31331_set_clko>:

int max31331_set_clko(const max31331_ctx_t *ctx, uint8_t enable, uint8_t frequency) {
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	0008      	movs	r0, r1
 8002d68:	0011      	movs	r1, r2
 8002d6a:	1cfb      	adds	r3, r7, #3
 8002d6c:	1c02      	adds	r2, r0, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
 8002d70:	1cbb      	adds	r3, r7, #2
 8002d72:	1c0a      	adds	r2, r1, #0
 8002d74:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <max31331_set_clko+0x24>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	425b      	negs	r3, r3
 8002d80:	e023      	b.n	8002dca <max31331_set_clko+0x6c>

    uint8_t cfg = 0;
 8002d82:	210f      	movs	r1, #15
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
    cfg |= (frequency          << MAX31331_CONFIG2_CLKO_HZ_POS)     & MAX31331_CONFIG2_CLKO_HZ_MSK;
 8002d8a:	1cbb      	adds	r3, r7, #2
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2203      	movs	r2, #3
 8002d90:	4013      	ands	r3, r2
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	187b      	adds	r3, r7, r1
 8002d9e:	701a      	strb	r2, [r3, #0]
    cfg |= ((enable ? 1 : 0)   << MAX31331_CONFIG2_CLKO_ENCLKO_POS) & MAX31331_CONFIG2_CLKO_ENCLKO_MSK;
 8002da0:	1cfb      	adds	r3, r7, #3
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <max31331_set_clko+0x4e>
 8002da8:	2304      	movs	r3, #4
 8002daa:	e000      	b.n	8002dae <max31331_set_clko+0x50>
 8002dac:	2300      	movs	r3, #0
 8002dae:	210f      	movs	r1, #15
 8002db0:	187a      	adds	r2, r7, r1
 8002db2:	7812      	ldrb	r2, [r2, #0]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	701a      	strb	r2, [r3, #0]

    return max31331_write_reg(ctx, MAX31331_RTC_CONFIG2, &cfg, 1);
 8002dbc:	187a      	adds	r2, r7, r1
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	f7ff fcbe 	bl	8002744 <max31331_write_reg>
 8002dc8:	0003      	movs	r3, r0
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b004      	add	sp, #16
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <max31331_set_timer_config>:
    ret = max31331_write_reg(ctx, MAX31331_OFFSET_HIGH, set_comp, sizeof(set_comp));

    return ret;
}

int max31331_set_timer_config(const max31331_ctx_t *ctx, uint8_t enable, uint8_t pause, uint8_t repeat, uint8_t frequency) {
 8002dd2:	b590      	push	{r4, r7, lr}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	000c      	movs	r4, r1
 8002ddc:	0010      	movs	r0, r2
 8002dde:	0019      	movs	r1, r3
 8002de0:	1cfb      	adds	r3, r7, #3
 8002de2:	1c22      	adds	r2, r4, #0
 8002de4:	701a      	strb	r2, [r3, #0]
 8002de6:	1cbb      	adds	r3, r7, #2
 8002de8:	1c02      	adds	r2, r0, #0
 8002dea:	701a      	strb	r2, [r3, #0]
 8002dec:	1c7b      	adds	r3, r7, #1
 8002dee:	1c0a      	adds	r2, r1, #0
 8002df0:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <max31331_set_timer_config+0x2c>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	425b      	negs	r3, r3
 8002dfc:	e040      	b.n	8002e80 <max31331_set_timer_config+0xae>

    uint8_t tcfg = 0;
 8002dfe:	210f      	movs	r1, #15
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]

    tcfg |= ((frequency & 0x03) << MAX31331_TIMER_CFG_TFRQ_POS)     & MAX31331_TIMER_CFG_TFRQ_MSK;
 8002e06:	2320      	movs	r3, #32
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2203      	movs	r2, #3
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	187b      	adds	r3, r7, r1
 8002e1c:	701a      	strb	r2, [r3, #0]
    tcfg |= ((enable ? 1 : 0)   << MAX31331_TIMER_CFG_TEN_POS)      & MAX31331_TIMER_CFG_TEN_MSK;
 8002e1e:	1cfb      	adds	r3, r7, #3
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <max31331_set_timer_config+0x58>
 8002e26:	2310      	movs	r3, #16
 8002e28:	e000      	b.n	8002e2c <max31331_set_timer_config+0x5a>
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	210f      	movs	r1, #15
 8002e2e:	187a      	adds	r2, r7, r1
 8002e30:	7812      	ldrb	r2, [r2, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	701a      	strb	r2, [r3, #0]
    tcfg |= ((repeat ? 1 : 0)   << MAX31331_TIMER_CFG_TRPT_POS)     & MAX31331_TIMER_CFG_TRPT_MSK;
 8002e3a:	1c7b      	adds	r3, r7, #1
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <max31331_set_timer_config+0x74>
 8002e42:	2304      	movs	r3, #4
 8002e44:	e000      	b.n	8002e48 <max31331_set_timer_config+0x76>
 8002e46:	2300      	movs	r3, #0
 8002e48:	210f      	movs	r1, #15
 8002e4a:	187a      	adds	r2, r7, r1
 8002e4c:	7812      	ldrb	r2, [r2, #0]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	701a      	strb	r2, [r3, #0]
    tcfg |= ((pause ? 1 : 0)    << MAX31331_TIMER_CFG_TPAUSE_POS)   & MAX31331_TIMER_CFG_TPAUSE_MSK;
 8002e56:	1cbb      	adds	r3, r7, #2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <max31331_set_timer_config+0x90>
 8002e5e:	2308      	movs	r3, #8
 8002e60:	e000      	b.n	8002e64 <max31331_set_timer_config+0x92>
 8002e62:	2300      	movs	r3, #0
 8002e64:	210f      	movs	r1, #15
 8002e66:	187a      	adds	r2, r7, r1
 8002e68:	7812      	ldrb	r2, [r2, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	187b      	adds	r3, r7, r1
 8002e70:	701a      	strb	r2, [r3, #0]

    return max31331_write_reg(ctx, MAX31331_TIMER_CONFIG, &tcfg, 1);
 8002e72:	187a      	adds	r2, r7, r1
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	2301      	movs	r3, #1
 8002e78:	2106      	movs	r1, #6
 8002e7a:	f7ff fc63 	bl	8002744 <max31331_write_reg>
 8002e7e:	0003      	movs	r3, r0
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b005      	add	sp, #20
 8002e86:	bd90      	pop	{r4, r7, pc}

08002e88 <max31331_set_timer_init>:

int max31331_set_timer_init(const max31331_ctx_t *ctx, uint8_t val) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	000a      	movs	r2, r1
 8002e92:	1cfb      	adds	r3, r7, #3
 8002e94:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <max31331_set_timer_init+0x1a>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	425b      	negs	r3, r3
 8002ea0:	e006      	b.n	8002eb0 <max31331_set_timer_init+0x28>
    return max31331_write_reg(ctx, MAX31331_TIMER_INIT, &val, 1);
 8002ea2:	1cfa      	adds	r2, r7, #3
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	2119      	movs	r1, #25
 8002eaa:	f7ff fc4b 	bl	8002744 <max31331_write_reg>
 8002eae:	0003      	movs	r3, r0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <max31331_set_int_en>:

int max31331_set_int_en(const max31331_ctx_t *ctx, uint8_t DOSF, uint8_t PFAILE, uint8_t VBATLOWIE, uint8_t DIE, uint8_t TIE, uint8_t A2IE, uint8_t A1IE) {
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	000c      	movs	r4, r1
 8002ec2:	0010      	movs	r0, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	1cfb      	adds	r3, r7, #3
 8002ec8:	1c22      	adds	r2, r4, #0
 8002eca:	701a      	strb	r2, [r3, #0]
 8002ecc:	1cbb      	adds	r3, r7, #2
 8002ece:	1c02      	adds	r2, r0, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	1c7b      	adds	r3, r7, #1
 8002ed4:	1c0a      	adds	r2, r1, #0
 8002ed6:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <max31331_set_int_en+0x2c>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	e070      	b.n	8002fc6 <max31331_set_int_en+0x10e>

    uint8_t int_en = 0;
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]

    int_en |= ((DOSF      ? 1 : 0) << MAX31331_INT_EN_DOSF_POS)      & MAX31331_INT_EN_DOSF_MSK;
 8002eec:	1cfb      	adds	r3, r7, #3
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <max31331_set_int_en+0x40>
 8002ef4:	2340      	movs	r3, #64	@ 0x40
 8002ef6:	e000      	b.n	8002efa <max31331_set_int_en+0x42>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	210f      	movs	r1, #15
 8002efc:	187a      	adds	r2, r7, r1
 8002efe:	7812      	ldrb	r2, [r2, #0]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	187b      	adds	r3, r7, r1
 8002f06:	701a      	strb	r2, [r3, #0]
    int_en |= ((PFAILE    ? 1 : 0) << MAX31331_INT_EN_PFAILE_POS)    & MAX31331_INT_EN_PFAILE_MSK;
 8002f08:	1cbb      	adds	r3, r7, #2
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <max31331_set_int_en+0x5c>
 8002f10:	2320      	movs	r3, #32
 8002f12:	e000      	b.n	8002f16 <max31331_set_int_en+0x5e>
 8002f14:	2300      	movs	r3, #0
 8002f16:	210f      	movs	r1, #15
 8002f18:	187a      	adds	r2, r7, r1
 8002f1a:	7812      	ldrb	r2, [r2, #0]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	187b      	adds	r3, r7, r1
 8002f22:	701a      	strb	r2, [r3, #0]
    int_en |= ((VBATLOWIE ? 1 : 0) << MAX31331_INT_EN_VBATLOWIE_POS) & MAX31331_INT_EN_VBATLOWIE_MSK;
 8002f24:	1c7b      	adds	r3, r7, #1
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <max31331_set_int_en+0x78>
 8002f2c:	2310      	movs	r3, #16
 8002f2e:	e000      	b.n	8002f32 <max31331_set_int_en+0x7a>
 8002f30:	2300      	movs	r3, #0
 8002f32:	210f      	movs	r1, #15
 8002f34:	187a      	adds	r2, r7, r1
 8002f36:	7812      	ldrb	r2, [r2, #0]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	701a      	strb	r2, [r3, #0]
    int_en |= ((DIE       ? 1 : 0) << MAX31331_INT_EN_DIE_POS)       & MAX31331_INT_EN_DIE_MSK;
 8002f40:	2320      	movs	r3, #32
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <max31331_set_int_en+0x96>
 8002f4a:	2308      	movs	r3, #8
 8002f4c:	e000      	b.n	8002f50 <max31331_set_int_en+0x98>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	210f      	movs	r1, #15
 8002f52:	187a      	adds	r2, r7, r1
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	701a      	strb	r2, [r3, #0]
    int_en |= ((TIE       ? 1 : 0) << MAX31331_INT_EN_TIE_POS)       & MAX31331_INT_EN_TIE_MSK;
 8002f5e:	2324      	movs	r3, #36	@ 0x24
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <max31331_set_int_en+0xb4>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	e000      	b.n	8002f6e <max31331_set_int_en+0xb6>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	210f      	movs	r1, #15
 8002f70:	187a      	adds	r2, r7, r1
 8002f72:	7812      	ldrb	r2, [r2, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b2da      	uxtb	r2, r3
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	701a      	strb	r2, [r3, #0]
    int_en |= ((A2IE      ? 1 : 0) << MAX31331_INT_EN_A2IE_POS)      & MAX31331_INT_EN_A2IE_MSK;
 8002f7c:	2328      	movs	r3, #40	@ 0x28
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <max31331_set_int_en+0xd2>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e000      	b.n	8002f8c <max31331_set_int_en+0xd4>
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	210f      	movs	r1, #15
 8002f8e:	187a      	adds	r2, r7, r1
 8002f90:	7812      	ldrb	r2, [r2, #0]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	701a      	strb	r2, [r3, #0]
    int_en |= ((A1IE      ? 1 : 0) << MAX31331_INT_EN_A1IE_POS)      & MAX31331_INT_EN_A1IE_MSK;
 8002f9a:	232c      	movs	r3, #44	@ 0x2c
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <max31331_set_int_en+0xf0>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <max31331_set_int_en+0xf2>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	210f      	movs	r1, #15
 8002fac:	187a      	adds	r2, r7, r1
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	187b      	adds	r3, r7, r1
 8002fb6:	701a      	strb	r2, [r3, #0]

    return max31331_write_reg(ctx, MAX31331_RTC_INT_EN, &int_en, 1);
 8002fb8:	187a      	adds	r2, r7, r1
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	f7ff fbc0 	bl	8002744 <max31331_write_reg>
 8002fc4:	0003      	movs	r3, r0
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b005      	add	sp, #20
 8002fcc:	bd90      	pop	{r4, r7, pc}

08002fce <max31331_get_int_en>:

int max31331_get_int_en(const max31331_ctx_t *ctx, uint8_t *int_en) {
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
    if (!ctx) return -1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <max31331_get_int_en+0x16>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	425b      	negs	r3, r3
 8002fe2:	e006      	b.n	8002ff2 <max31331_get_int_en+0x24>

    return max31331_read_reg(ctx, MAX31331_RTC_INT_EN, int_en, 1);
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	2301      	movs	r3, #1
 8002fea:	2101      	movs	r1, #1
 8002fec:	f7ff fb7c 	bl	80026e8 <max31331_read_reg>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	b002      	add	sp, #8
 8002ff8:	bd80      	pop	{r7, pc}
	...

08002ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <HAL_MspInit+0x44>)
 8003004:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003006:	4b0e      	ldr	r3, [pc, #56]	@ (8003040 <HAL_MspInit+0x44>)
 8003008:	2180      	movs	r1, #128	@ 0x80
 800300a:	0549      	lsls	r1, r1, #21
 800300c:	430a      	orrs	r2, r1
 800300e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <HAL_MspInit+0x44>)
 8003012:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003014:	2380      	movs	r3, #128	@ 0x80
 8003016:	055b      	lsls	r3, r3, #21
 8003018:	4013      	ands	r3, r2
 800301a:	607b      	str	r3, [r7, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800301e:	4b08      	ldr	r3, [pc, #32]	@ (8003040 <HAL_MspInit+0x44>)
 8003020:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003022:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <HAL_MspInit+0x44>)
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	661a      	str	r2, [r3, #96]	@ 0x60
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_MspInit+0x44>)
 800302c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
 800303e:	46c0      	nop			@ (mov r8, r8)
 8003040:	40021000 	.word	0x40021000

08003044 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b099      	sub	sp, #100	@ 0x64
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304c:	234c      	movs	r3, #76	@ 0x4c
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	0018      	movs	r0, r3
 8003052:	2314      	movs	r3, #20
 8003054:	001a      	movs	r2, r3
 8003056:	2100      	movs	r1, #0
 8003058:	f004 ff2c 	bl	8007eb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800305c:	2414      	movs	r4, #20
 800305e:	193b      	adds	r3, r7, r4
 8003060:	0018      	movs	r0, r3
 8003062:	2338      	movs	r3, #56	@ 0x38
 8003064:	001a      	movs	r2, r3
 8003066:	2100      	movs	r1, #0
 8003068:	f004 ff24 	bl	8007eb4 <memset>
  if(hi2c->Instance==I2C3)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3b      	ldr	r2, [pc, #236]	@ (8003160 <HAL_I2C_MspInit+0x11c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d16f      	bne.n	8003156 <HAL_I2C_MspInit+0x112>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003076:	193b      	adds	r3, r7, r4
 8003078:	2240      	movs	r2, #64	@ 0x40
 800307a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800307c:	193b      	adds	r3, r7, r4
 800307e:	2200      	movs	r2, #0
 8003080:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003082:	193b      	adds	r3, r7, r4
 8003084:	0018      	movs	r0, r3
 8003086:	f004 faab 	bl	80075e0 <HAL_RCCEx_PeriphCLKConfig>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800308e:	f7ff fb25 	bl	80026dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003092:	4b34      	ldr	r3, [pc, #208]	@ (8003164 <HAL_I2C_MspInit+0x120>)
 8003094:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003096:	4b33      	ldr	r3, [pc, #204]	@ (8003164 <HAL_I2C_MspInit+0x120>)
 8003098:	2101      	movs	r1, #1
 800309a:	430a      	orrs	r2, r1
 800309c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800309e:	4b31      	ldr	r3, [pc, #196]	@ (8003164 <HAL_I2C_MspInit+0x120>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030a2:	2201      	movs	r2, #1
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA6     ------> I2C3_SDA
    PA7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030aa:	214c      	movs	r1, #76	@ 0x4c
 80030ac:	187b      	adds	r3, r7, r1
 80030ae:	22c0      	movs	r2, #192	@ 0xc0
 80030b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030b2:	187b      	adds	r3, r7, r1
 80030b4:	2212      	movs	r2, #18
 80030b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	187b      	adds	r3, r7, r1
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030be:	187b      	adds	r3, r7, r1
 80030c0:	2200      	movs	r2, #0
 80030c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	2204      	movs	r2, #4
 80030c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ca:	187a      	adds	r2, r7, r1
 80030cc:	23a0      	movs	r3, #160	@ 0xa0
 80030ce:	05db      	lsls	r3, r3, #23
 80030d0:	0011      	movs	r1, r2
 80030d2:	0018      	movs	r0, r3
 80030d4:	f000 fd8e 	bl	8003bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80030d8:	4b22      	ldr	r3, [pc, #136]	@ (8003164 <HAL_I2C_MspInit+0x120>)
 80030da:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030dc:	4b21      	ldr	r3, [pc, #132]	@ (8003164 <HAL_I2C_MspInit+0x120>)
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	0409      	lsls	r1, r1, #16
 80030e2:	430a      	orrs	r2, r1
 80030e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80030e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003164 <HAL_I2C_MspInit+0x120>)
 80030e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	4013      	ands	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel1;
 80030f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 80030f6:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <HAL_I2C_MspInit+0x128>)
 80030f8:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80030fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 80030fc:	220d      	movs	r2, #13
 80030fe:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003100:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 8003102:	2200      	movs	r2, #0
 8003104:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003106:	4b18      	ldr	r3, [pc, #96]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 8003108:	2200      	movs	r2, #0
 800310a:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800310c:	4b16      	ldr	r3, [pc, #88]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 800310e:	2280      	movs	r2, #128	@ 0x80
 8003110:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003112:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 8003114:	2200      	movs	r2, #0
 8003116:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 800311a:	2200      	movs	r2, #0
 800311c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800311e:	4b12      	ldr	r3, [pc, #72]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 8003120:	2200      	movs	r2, #0
 8003122:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003124:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 8003126:	2200      	movs	r2, #0
 8003128:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 800312a:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 800312c:	0018      	movs	r0, r3
 800312e:	f000 fa99 	bl	8003664 <HAL_DMA_Init>
 8003132:	1e03      	subs	r3, r0, #0
 8003134:	d001      	beq.n	800313a <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8003136:	f7ff fad1 	bl	80026dc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a0a      	ldr	r2, [pc, #40]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 800313e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <HAL_I2C_MspInit+0x124>)
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_3_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	2018      	movs	r0, #24
 800314c:	f000 fa58 	bl	8003600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
 8003150:	2018      	movs	r0, #24
 8003152:	f000 fa6a 	bl	800362a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003156:	46c0      	nop			@ (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b019      	add	sp, #100	@ 0x64
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	46c0      	nop			@ (mov r8, r8)
 8003160:	40008800 	.word	0x40008800
 8003164:	40021000 	.word	0x40021000
 8003168:	20000090 	.word	0x20000090
 800316c:	40020008 	.word	0x40020008

08003170 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003170:	b590      	push	{r4, r7, lr}
 8003172:	b093      	sub	sp, #76	@ 0x4c
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003178:	2410      	movs	r4, #16
 800317a:	193b      	adds	r3, r7, r4
 800317c:	0018      	movs	r0, r3
 800317e:	2338      	movs	r3, #56	@ 0x38
 8003180:	001a      	movs	r2, r3
 8003182:	2100      	movs	r1, #0
 8003184:	f004 fe96 	bl	8007eb4 <memset>
  if(hrtc->Instance==RTC)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a16      	ldr	r2, [pc, #88]	@ (80031e8 <HAL_RTC_MspInit+0x78>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d126      	bne.n	80031e0 <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003192:	193b      	adds	r3, r7, r4
 8003194:	2280      	movs	r2, #128	@ 0x80
 8003196:	0212      	lsls	r2, r2, #8
 8003198:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800319a:	193b      	adds	r3, r7, r4
 800319c:	2280      	movs	r2, #128	@ 0x80
 800319e:	0092      	lsls	r2, r2, #2
 80031a0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031a2:	193b      	adds	r3, r7, r4
 80031a4:	0018      	movs	r0, r3
 80031a6:	f004 fa1b 	bl	80075e0 <HAL_RCCEx_PeriphCLKConfig>
 80031aa:	1e03      	subs	r3, r0, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80031ae:	f7ff fa95 	bl	80026dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031b2:	4a0e      	ldr	r2, [pc, #56]	@ (80031ec <HAL_RTC_MspInit+0x7c>)
 80031b4:	2390      	movs	r3, #144	@ 0x90
 80031b6:	58d3      	ldr	r3, [r2, r3]
 80031b8:	490c      	ldr	r1, [pc, #48]	@ (80031ec <HAL_RTC_MspInit+0x7c>)
 80031ba:	2280      	movs	r2, #128	@ 0x80
 80031bc:	0212      	lsls	r2, r2, #8
 80031be:	4313      	orrs	r3, r2
 80031c0:	2290      	movs	r2, #144	@ 0x90
 80031c2:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80031c4:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <HAL_RTC_MspInit+0x7c>)
 80031c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031c8:	4b08      	ldr	r3, [pc, #32]	@ (80031ec <HAL_RTC_MspInit+0x7c>)
 80031ca:	2180      	movs	r1, #128	@ 0x80
 80031cc:	00c9      	lsls	r1, r1, #3
 80031ce:	430a      	orrs	r2, r1
 80031d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80031d2:	4b06      	ldr	r3, [pc, #24]	@ (80031ec <HAL_RTC_MspInit+0x7c>)
 80031d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4013      	ands	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80031e0:	46c0      	nop			@ (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b013      	add	sp, #76	@ 0x4c
 80031e6:	bd90      	pop	{r4, r7, pc}
 80031e8:	40002800 	.word	0x40002800
 80031ec:	40021000 	.word	0x40021000

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031f4:	46c0      	nop			@ (mov r8, r8)
 80031f6:	e7fd      	b.n	80031f4 <NMI_Handler+0x4>

080031f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fc:	46c0      	nop			@ (mov r8, r8)
 80031fe:	e7fd      	b.n	80031fc <HardFault_Handler+0x4>

08003200 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320e:	46c0      	nop			@ (mov r8, r8)
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003218:	f000 f8ee 	bl	80033f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321c:	46c0      	nop			@ (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 8003226:	2001      	movs	r0, #1
 8003228:	f000 ff46 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 8003236:	2004      	movs	r0, #4
 8003238:	f000 ff3e 	bl	80040b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */
  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800323c:	46c0      	nop			@ (mov r8, r8)
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003248:	4b03      	ldr	r3, [pc, #12]	@ (8003258 <DMA1_Channel1_IRQHandler+0x14>)
 800324a:	0018      	movs	r0, r3
 800324c:	f000 fb84 	bl	8003958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003250:	46c0      	nop			@ (mov r8, r8)
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	46c0      	nop			@ (mov r8, r8)
 8003258:	20000090 	.word	0x20000090

0800325c <I2C2_3_IRQHandler>:

/**
  * @brief This function handles I2C2 + I2C3 global interrupt (combined with EXTI 22).
  */
void I2C2_3_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_3_IRQn 0 */

  /* USER CODE END I2C2_3_IRQn 0 */
  if (hi2c3.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8003260:	4b09      	ldr	r3, [pc, #36]	@ (8003288 <I2C2_3_IRQHandler+0x2c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	23e0      	movs	r3, #224	@ 0xe0
 8003268:	00db      	lsls	r3, r3, #3
 800326a:	4013      	ands	r3, r2
 800326c:	d004      	beq.n	8003278 <I2C2_3_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c3);
 800326e:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <I2C2_3_IRQHandler+0x2c>)
 8003270:	0018      	movs	r0, r3
 8003272:	f001 fb6d 	bl	8004950 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c3);
  }
  /* USER CODE BEGIN I2C2_3_IRQn 1 */

  /* USER CODE END I2C2_3_IRQn 1 */
}
 8003276:	e003      	b.n	8003280 <I2C2_3_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c3);
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <I2C2_3_IRQHandler+0x2c>)
 800327a:	0018      	movs	r0, r3
 800327c:	f001 fb4e 	bl	800491c <HAL_I2C_EV_IRQHandler>
}
 8003280:	46c0      	nop			@ (mov r8, r8)
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	46c0      	nop			@ (mov r8, r8)
 8003288:	2000003c 	.word	0x2000003c

0800328c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003292:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <SystemInit+0x50>)
 8003294:	2280      	movs	r2, #128	@ 0x80
 8003296:	0512      	lsls	r2, r2, #20
 8003298:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 800329a:	4a11      	ldr	r2, [pc, #68]	@ (80032e0 <SystemInit+0x54>)
 800329c:	2380      	movs	r3, #128	@ 0x80
 800329e:	58d3      	ldr	r3, [r2, r3]
 80032a0:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 80032a2:	4b0f      	ldr	r3, [pc, #60]	@ (80032e0 <SystemInit+0x54>)
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	025b      	lsls	r3, r3, #9
 80032ae:	4013      	ands	r3, r2
 80032b0:	d010      	beq.n	80032d4 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	22ff      	movs	r2, #255	@ 0xff
 80032b6:	4013      	ands	r3, r2
 80032b8:	2bcc      	cmp	r3, #204	@ 0xcc
 80032ba:	d00b      	beq.n	80032d4 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	22ff      	movs	r2, #255	@ 0xff
 80032c0:	4013      	ands	r3, r2
 80032c2:	2baa      	cmp	r3, #170	@ 0xaa
 80032c4:	d006      	beq.n	80032d4 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <SystemInit+0x54>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <SystemInit+0x54>)
 80032cc:	2180      	movs	r1, #128	@ 0x80
 80032ce:	02c9      	lsls	r1, r1, #11
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	e000ed00 	.word	0xe000ed00
 80032e0:	40022000 	.word	0x40022000

080032e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032e4:	480d      	ldr	r0, [pc, #52]	@ (800331c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032e8:	f7ff ffd0 	bl	800328c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032ec:	480c      	ldr	r0, [pc, #48]	@ (8003320 <LoopForever+0x6>)
  ldr r1, =_edata
 80032ee:	490d      	ldr	r1, [pc, #52]	@ (8003324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003328 <LoopForever+0xe>)
  movs r3, #0
 80032f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032f4:	e002      	b.n	80032fc <LoopCopyDataInit>

080032f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032fa:	3304      	adds	r3, #4

080032fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003300:	d3f9      	bcc.n	80032f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003302:	4a0a      	ldr	r2, [pc, #40]	@ (800332c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003304:	4c0a      	ldr	r4, [pc, #40]	@ (8003330 <LoopForever+0x16>)
  movs r3, #0
 8003306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003308:	e001      	b.n	800330e <LoopFillZerobss>

0800330a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800330a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800330c:	3204      	adds	r2, #4

0800330e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800330e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003310:	d3fb      	bcc.n	800330a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003312:	f004 fdd7 	bl	8007ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003316:	f7fe f9c5 	bl	80016a4 <main>

0800331a <LoopForever>:

LoopForever:
  b LoopForever
 800331a:	e7fe      	b.n	800331a <LoopForever>
  ldr   r0, =_estack
 800331c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003324:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8003328:	08007f70 	.word	0x08007f70
  ldr r2, =_sbss
 800332c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8003330:	200001c0 	.word	0x200001c0

08003334 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003334:	e7fe      	b.n	8003334 <ADC_COMP1_IRQHandler>

08003336 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b082      	sub	sp, #8
 800333a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800333c:	1dfb      	adds	r3, r7, #7
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003342:	2003      	movs	r0, #3
 8003344:	f000 f80e 	bl	8003364 <HAL_InitTick>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d003      	beq.n	8003354 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e001      	b.n	8003358 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003354:	f7ff fe52 	bl	8002ffc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003358:	1dfb      	adds	r3, r7, #7
 800335a:	781b      	ldrb	r3, [r3, #0]
}
 800335c:	0018      	movs	r0, r3
 800335e:	46bd      	mov	sp, r7
 8003360:	b002      	add	sp, #8
 8003362:	bd80      	pop	{r7, pc}

08003364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800336c:	230f      	movs	r3, #15
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8003374:	4b1d      	ldr	r3, [pc, #116]	@ (80033ec <HAL_InitTick+0x88>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d02b      	beq.n	80033d4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800337c:	4b1c      	ldr	r3, [pc, #112]	@ (80033f0 <HAL_InitTick+0x8c>)
 800337e:	681c      	ldr	r4, [r3, #0]
 8003380:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <HAL_InitTick+0x88>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	0019      	movs	r1, r3
 8003386:	23fa      	movs	r3, #250	@ 0xfa
 8003388:	0098      	lsls	r0, r3, #2
 800338a:	f7fc febd 	bl	8000108 <__udivsi3>
 800338e:	0003      	movs	r3, r0
 8003390:	0019      	movs	r1, r3
 8003392:	0020      	movs	r0, r4
 8003394:	f7fc feb8 	bl	8000108 <__udivsi3>
 8003398:	0003      	movs	r3, r0
 800339a:	0018      	movs	r0, r3
 800339c:	f000 f955 	bl	800364a <HAL_SYSTICK_Config>
 80033a0:	1e03      	subs	r3, r0, #0
 80033a2:	d112      	bne.n	80033ca <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d80a      	bhi.n	80033c0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	2301      	movs	r3, #1
 80033ae:	425b      	negs	r3, r3
 80033b0:	2200      	movs	r2, #0
 80033b2:	0018      	movs	r0, r3
 80033b4:	f000 f924 	bl	8003600 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033b8:	4b0e      	ldr	r3, [pc, #56]	@ (80033f4 <HAL_InitTick+0x90>)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	601a      	str	r2, [r3, #0]
 80033be:	e00d      	b.n	80033dc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80033c0:	230f      	movs	r3, #15
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
 80033c8:	e008      	b.n	80033dc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033ca:	230f      	movs	r3, #15
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e003      	b.n	80033dc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033d4:	230f      	movs	r3, #15
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80033dc:	230f      	movs	r3, #15
 80033de:	18fb      	adds	r3, r7, r3
 80033e0:	781b      	ldrb	r3, [r3, #0]
}
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b005      	add	sp, #20
 80033e8:	bd90      	pop	{r4, r7, pc}
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	2000001c 	.word	0x2000001c
 80033f0:	20000014 	.word	0x20000014
 80033f4:	20000018 	.word	0x20000018

080033f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <HAL_IncTick+0x18>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <HAL_IncTick+0x1c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	18d2      	adds	r2, r2, r3
 8003406:	4b02      	ldr	r3, [pc, #8]	@ (8003410 <HAL_IncTick+0x18>)
 8003408:	601a      	str	r2, [r3, #0]
}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200001bc 	.word	0x200001bc
 8003414:	2000001c 	.word	0x2000001c

08003418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	af00      	add	r7, sp, #0
  return uwTick;
 800341c:	4b02      	ldr	r3, [pc, #8]	@ (8003428 <HAL_GetTick+0x10>)
 800341e:	681b      	ldr	r3, [r3, #0]
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	200001bc 	.word	0x200001bc

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff fff0 	bl	8003418 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	d004      	beq.n	8003450 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b09      	ldr	r3, [pc, #36]	@ (800346c <HAL_Delay+0x40>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	18d3      	adds	r3, r2, r3
 800344e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	f7ff ffe1 	bl	8003418 <HAL_GetTick>
 8003456:	0002      	movs	r2, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	429a      	cmp	r2, r3
 8003460:	d8f7      	bhi.n	8003452 <HAL_Delay+0x26>
  {
  }
}
 8003462:	46c0      	nop			@ (mov r8, r8)
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b004      	add	sp, #16
 800346a:	bd80      	pop	{r7, pc}
 800346c:	2000001c 	.word	0x2000001c

08003470 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <HAL_SuspendTick+0x18>)
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	4b03      	ldr	r3, [pc, #12]	@ (8003488 <HAL_SuspendTick+0x18>)
 800347a:	2102      	movs	r1, #2
 800347c:	438a      	bics	r2, r1
 800347e:	601a      	str	r2, [r3, #0]
}
 8003480:	46c0      	nop			@ (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	e000e010 	.word	0xe000e010

0800348c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003490:	4b04      	ldr	r3, [pc, #16]	@ (80034a4 <HAL_ResumeTick+0x18>)
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_ResumeTick+0x18>)
 8003496:	2102      	movs	r1, #2
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
}
 800349c:	46c0      	nop			@ (mov r8, r8)
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	e000e010 	.word	0xe000e010

080034a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	0002      	movs	r2, r0
 80034b0:	1dfb      	adds	r3, r7, #7
 80034b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034b4:	1dfb      	adds	r3, r7, #7
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80034ba:	d809      	bhi.n	80034d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034bc:	1dfb      	adds	r3, r7, #7
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	001a      	movs	r2, r3
 80034c2:	231f      	movs	r3, #31
 80034c4:	401a      	ands	r2, r3
 80034c6:	4b04      	ldr	r3, [pc, #16]	@ (80034d8 <__NVIC_EnableIRQ+0x30>)
 80034c8:	2101      	movs	r1, #1
 80034ca:	4091      	lsls	r1, r2
 80034cc:	000a      	movs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	e000e100 	.word	0xe000e100

080034dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034dc:	b590      	push	{r4, r7, lr}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	0002      	movs	r2, r0
 80034e4:	6039      	str	r1, [r7, #0]
 80034e6:	1dfb      	adds	r3, r7, #7
 80034e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80034ea:	1dfb      	adds	r3, r7, #7
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80034f0:	d828      	bhi.n	8003544 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034f2:	4a2f      	ldr	r2, [pc, #188]	@ (80035b0 <__NVIC_SetPriority+0xd4>)
 80034f4:	1dfb      	adds	r3, r7, #7
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	b25b      	sxtb	r3, r3
 80034fa:	089b      	lsrs	r3, r3, #2
 80034fc:	33c0      	adds	r3, #192	@ 0xc0
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	589b      	ldr	r3, [r3, r2]
 8003502:	1dfa      	adds	r2, r7, #7
 8003504:	7812      	ldrb	r2, [r2, #0]
 8003506:	0011      	movs	r1, r2
 8003508:	2203      	movs	r2, #3
 800350a:	400a      	ands	r2, r1
 800350c:	00d2      	lsls	r2, r2, #3
 800350e:	21ff      	movs	r1, #255	@ 0xff
 8003510:	4091      	lsls	r1, r2
 8003512:	000a      	movs	r2, r1
 8003514:	43d2      	mvns	r2, r2
 8003516:	401a      	ands	r2, r3
 8003518:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	019b      	lsls	r3, r3, #6
 800351e:	22ff      	movs	r2, #255	@ 0xff
 8003520:	401a      	ands	r2, r3
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	0018      	movs	r0, r3
 8003528:	2303      	movs	r3, #3
 800352a:	4003      	ands	r3, r0
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003530:	481f      	ldr	r0, [pc, #124]	@ (80035b0 <__NVIC_SetPriority+0xd4>)
 8003532:	1dfb      	adds	r3, r7, #7
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	b25b      	sxtb	r3, r3
 8003538:	089b      	lsrs	r3, r3, #2
 800353a:	430a      	orrs	r2, r1
 800353c:	33c0      	adds	r3, #192	@ 0xc0
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003542:	e031      	b.n	80035a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003544:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <__NVIC_SetPriority+0xd8>)
 8003546:	1dfb      	adds	r3, r7, #7
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	0019      	movs	r1, r3
 800354c:	230f      	movs	r3, #15
 800354e:	400b      	ands	r3, r1
 8003550:	3b08      	subs	r3, #8
 8003552:	089b      	lsrs	r3, r3, #2
 8003554:	3306      	adds	r3, #6
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	18d3      	adds	r3, r2, r3
 800355a:	3304      	adds	r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	1dfa      	adds	r2, r7, #7
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	0011      	movs	r1, r2
 8003564:	2203      	movs	r2, #3
 8003566:	400a      	ands	r2, r1
 8003568:	00d2      	lsls	r2, r2, #3
 800356a:	21ff      	movs	r1, #255	@ 0xff
 800356c:	4091      	lsls	r1, r2
 800356e:	000a      	movs	r2, r1
 8003570:	43d2      	mvns	r2, r2
 8003572:	401a      	ands	r2, r3
 8003574:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	22ff      	movs	r2, #255	@ 0xff
 800357c:	401a      	ands	r2, r3
 800357e:	1dfb      	adds	r3, r7, #7
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	0018      	movs	r0, r3
 8003584:	2303      	movs	r3, #3
 8003586:	4003      	ands	r3, r0
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800358c:	4809      	ldr	r0, [pc, #36]	@ (80035b4 <__NVIC_SetPriority+0xd8>)
 800358e:	1dfb      	adds	r3, r7, #7
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	001c      	movs	r4, r3
 8003594:	230f      	movs	r3, #15
 8003596:	4023      	ands	r3, r4
 8003598:	3b08      	subs	r3, #8
 800359a:	089b      	lsrs	r3, r3, #2
 800359c:	430a      	orrs	r2, r1
 800359e:	3306      	adds	r3, #6
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	18c3      	adds	r3, r0, r3
 80035a4:	3304      	adds	r3, #4
 80035a6:	601a      	str	r2, [r3, #0]
}
 80035a8:	46c0      	nop			@ (mov r8, r8)
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b003      	add	sp, #12
 80035ae:	bd90      	pop	{r4, r7, pc}
 80035b0:	e000e100 	.word	0xe000e100
 80035b4:	e000ed00 	.word	0xe000ed00

080035b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	1e5a      	subs	r2, r3, #1
 80035c4:	2380      	movs	r3, #128	@ 0x80
 80035c6:	045b      	lsls	r3, r3, #17
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d301      	bcc.n	80035d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035cc:	2301      	movs	r3, #1
 80035ce:	e010      	b.n	80035f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035d0:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <SysTick_Config+0x44>)
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	3a01      	subs	r2, #1
 80035d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d8:	2301      	movs	r3, #1
 80035da:	425b      	negs	r3, r3
 80035dc:	2103      	movs	r1, #3
 80035de:	0018      	movs	r0, r3
 80035e0:	f7ff ff7c 	bl	80034dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e4:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <SysTick_Config+0x44>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035ea:	4b04      	ldr	r3, [pc, #16]	@ (80035fc <SysTick_Config+0x44>)
 80035ec:	2207      	movs	r2, #7
 80035ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	0018      	movs	r0, r3
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b002      	add	sp, #8
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	e000e010 	.word	0xe000e010

08003600 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	210f      	movs	r1, #15
 800360c:	187b      	adds	r3, r7, r1
 800360e:	1c02      	adds	r2, r0, #0
 8003610:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	187b      	adds	r3, r7, r1
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b25b      	sxtb	r3, r3
 800361a:	0011      	movs	r1, r2
 800361c:	0018      	movs	r0, r3
 800361e:	f7ff ff5d 	bl	80034dc <__NVIC_SetPriority>
}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	46bd      	mov	sp, r7
 8003626:	b004      	add	sp, #16
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	0002      	movs	r2, r0
 8003632:	1dfb      	adds	r3, r7, #7
 8003634:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b25b      	sxtb	r3, r3
 800363c:	0018      	movs	r0, r3
 800363e:	f7ff ff33 	bl	80034a8 <__NVIC_EnableIRQ>
}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	46bd      	mov	sp, r7
 8003646:	b002      	add	sp, #8
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f7ff ffaf 	bl	80035b8 <SysTick_Config>
 800365a:	0003      	movs	r3, r0
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e077      	b.n	8003766 <HAL_DMA_Init+0x102>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a3d      	ldr	r2, [pc, #244]	@ (8003770 <HAL_DMA_Init+0x10c>)
 800367c:	4694      	mov	ip, r2
 800367e:	4463      	add	r3, ip
 8003680:	2114      	movs	r1, #20
 8003682:	0018      	movs	r0, r3
 8003684:	f7fc fd40 	bl	8000108 <__udivsi3>
 8003688:	0003      	movs	r3, r0
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800368a:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2225      	movs	r2, #37	@ 0x25
 8003694:	2102      	movs	r1, #2
 8003696:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4934      	ldr	r1, [pc, #208]	@ (8003774 <HAL_DMA_Init+0x110>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	430a      	orrs	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 fa37 	bl	8003b54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	2380      	movs	r3, #128	@ 0x80
 80036ec:	01db      	lsls	r3, r3, #7
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d102      	bne.n	80036f8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003700:	21ff      	movs	r1, #255	@ 0xff
 8003702:	400a      	ands	r2, r1
 8003704:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800370e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d011      	beq.n	800373c <HAL_DMA_Init+0xd8>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d80d      	bhi.n	800373c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	0018      	movs	r0, r3
 8003724:	f000 fa42 	bl	8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003738:	605a      	str	r2, [r3, #4]
 800373a:	e008      	b.n	800374e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2225      	movs	r2, #37	@ 0x25
 8003758:	2101      	movs	r1, #1
 800375a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2224      	movs	r2, #36	@ 0x24
 8003760:	2100      	movs	r1, #0
 8003762:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b002      	add	sp, #8
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	bffdfff8 	.word	0xbffdfff8
 8003774:	ffff800f 	.word	0xffff800f

08003778 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
 8003784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003786:	2317      	movs	r3, #23
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2224      	movs	r2, #36	@ 0x24
 8003792:	5c9b      	ldrb	r3, [r3, r2]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d101      	bne.n	800379c <HAL_DMA_Start_IT+0x24>
 8003798:	2302      	movs	r3, #2
 800379a:	e06f      	b.n	800387c <HAL_DMA_Start_IT+0x104>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2224      	movs	r2, #36	@ 0x24
 80037a0:	2101      	movs	r1, #1
 80037a2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2225      	movs	r2, #37	@ 0x25
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d157      	bne.n	8003860 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2225      	movs	r2, #37	@ 0x25
 80037b4:	2102      	movs	r1, #2
 80037b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	438a      	bics	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68b9      	ldr	r1, [r7, #8]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f97d 	bl	8003ad4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d008      	beq.n	80037f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	210e      	movs	r1, #14
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e00f      	b.n	8003814 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2104      	movs	r1, #4
 8003800:	438a      	bics	r2, r1
 8003802:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	210a      	movs	r1, #10
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	2380      	movs	r3, #128	@ 0x80
 800381c:	025b      	lsls	r3, r3, #9
 800381e:	4013      	ands	r3, r2
 8003820:	d008      	beq.n	8003834 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382c:	2180      	movs	r1, #128	@ 0x80
 800382e:	0049      	lsls	r1, r1, #1
 8003830:	430a      	orrs	r2, r1
 8003832:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003846:	2180      	movs	r1, #128	@ 0x80
 8003848:	0049      	lsls	r1, r1, #1
 800384a:	430a      	orrs	r2, r1
 800384c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2101      	movs	r1, #1
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e00a      	b.n	8003876 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2224      	movs	r2, #36	@ 0x24
 800386a:	2100      	movs	r1, #0
 800386c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800386e:	2317      	movs	r3, #23
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003876:	2317      	movs	r3, #23
 8003878:	18fb      	adds	r3, r7, r3
 800387a:	781b      	ldrb	r3, [r3, #0]
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	b006      	add	sp, #24
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800388c:	210f      	movs	r1, #15
 800388e:	187b      	adds	r3, r7, r1
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2225      	movs	r2, #37	@ 0x25
 8003898:	5c9b      	ldrb	r3, [r3, r2]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d006      	beq.n	80038ae <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2204      	movs	r2, #4
 80038a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80038a6:	187b      	adds	r3, r7, r1
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e049      	b.n	8003942 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	210e      	movs	r1, #14
 80038ba:	438a      	bics	r2, r1
 80038bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2101      	movs	r1, #1
 80038ca:	438a      	bics	r2, r1
 80038cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	491d      	ldr	r1, [pc, #116]	@ (8003950 <HAL_DMA_Abort_IT+0xcc>)
 80038da:	400a      	ands	r2, r1
 80038dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80038de:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <HAL_DMA_Abort_IT+0xd0>)
 80038e0:	6859      	ldr	r1, [r3, #4]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	221c      	movs	r2, #28
 80038e8:	4013      	ands	r3, r2
 80038ea:	2201      	movs	r2, #1
 80038ec:	409a      	lsls	r2, r3
 80038ee:	4b19      	ldr	r3, [pc, #100]	@ (8003954 <HAL_DMA_Abort_IT+0xd0>)
 80038f0:	430a      	orrs	r2, r1
 80038f2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80038fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00c      	beq.n	8003920 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003910:	490f      	ldr	r1, [pc, #60]	@ (8003950 <HAL_DMA_Abort_IT+0xcc>)
 8003912:	400a      	ands	r2, r1
 8003914:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800391e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2225      	movs	r2, #37	@ 0x25
 8003924:	2101      	movs	r1, #1
 8003926:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2224      	movs	r2, #36	@ 0x24
 800392c:	2100      	movs	r1, #0
 800392e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	2b00      	cmp	r3, #0
 8003936:	d004      	beq.n	8003942 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	0010      	movs	r0, r2
 8003940:	4798      	blx	r3
    }
  }
  return status;
 8003942:	230f      	movs	r3, #15
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	781b      	ldrb	r3, [r3, #0]
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b004      	add	sp, #16
 800394e:	bd80      	pop	{r7, pc}
 8003950:	fffffeff 	.word	0xfffffeff
 8003954:	40020000 	.word	0x40020000

08003958 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003960:	4b55      	ldr	r3, [pc, #340]	@ (8003ab8 <HAL_DMA_IRQHandler+0x160>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	221c      	movs	r2, #28
 8003974:	4013      	ands	r3, r2
 8003976:	2204      	movs	r2, #4
 8003978:	409a      	lsls	r2, r3
 800397a:	0013      	movs	r3, r2
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4013      	ands	r3, r2
 8003980:	d027      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x7a>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2204      	movs	r2, #4
 8003986:	4013      	ands	r3, r2
 8003988:	d023      	beq.n	80039d2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	2220      	movs	r2, #32
 8003992:	4013      	ands	r3, r2
 8003994:	d107      	bne.n	80039a6 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2104      	movs	r1, #4
 80039a2:	438a      	bics	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80039a6:	4b44      	ldr	r3, [pc, #272]	@ (8003ab8 <HAL_DMA_IRQHandler+0x160>)
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	221c      	movs	r2, #28
 80039b0:	4013      	ands	r3, r2
 80039b2:	2204      	movs	r2, #4
 80039b4:	409a      	lsls	r2, r3
 80039b6:	4b40      	ldr	r3, [pc, #256]	@ (8003ab8 <HAL_DMA_IRQHandler+0x160>)
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d100      	bne.n	80039c6 <HAL_DMA_IRQHandler+0x6e>
 80039c4:	e073      	b.n	8003aae <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	0010      	movs	r0, r2
 80039ce:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039d0:	e06d      	b.n	8003aae <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	221c      	movs	r2, #28
 80039d8:	4013      	ands	r3, r2
 80039da:	2202      	movs	r2, #2
 80039dc:	409a      	lsls	r2, r3
 80039de:	0013      	movs	r3, r2
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	d02e      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xec>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2202      	movs	r2, #2
 80039ea:	4013      	ands	r3, r2
 80039ec:	d02a      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2220      	movs	r2, #32
 80039f6:	4013      	ands	r3, r2
 80039f8:	d10b      	bne.n	8003a12 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	210a      	movs	r1, #10
 8003a06:	438a      	bics	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2225      	movs	r2, #37	@ 0x25
 8003a0e:	2101      	movs	r1, #1
 8003a10:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a12:	4b29      	ldr	r3, [pc, #164]	@ (8003ab8 <HAL_DMA_IRQHandler+0x160>)
 8003a14:	6859      	ldr	r1, [r3, #4]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	221c      	movs	r2, #28
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2202      	movs	r2, #2
 8003a20:	409a      	lsls	r2, r3
 8003a22:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <HAL_DMA_IRQHandler+0x160>)
 8003a24:	430a      	orrs	r2, r1
 8003a26:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03a      	beq.n	8003aae <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	0010      	movs	r0, r2
 8003a40:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a42:	e034      	b.n	8003aae <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	221c      	movs	r2, #28
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	0013      	movs	r3, r2
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4013      	ands	r3, r2
 8003a56:	d02b      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x158>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d027      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	210e      	movs	r1, #14
 8003a6c:	438a      	bics	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a70:	4b11      	ldr	r3, [pc, #68]	@ (8003ab8 <HAL_DMA_IRQHandler+0x160>)
 8003a72:	6859      	ldr	r1, [r3, #4]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	221c      	movs	r2, #28
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab8 <HAL_DMA_IRQHandler+0x160>)
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2225      	movs	r2, #37	@ 0x25
 8003a90:	2101      	movs	r1, #1
 8003a92:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	@ 0x24
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d005      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	0010      	movs	r0, r2
 8003aac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aae:	46c0      	nop			@ (mov r8, r8)
 8003ab0:	46c0      	nop			@ (mov r8, r8)
}
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	b004      	add	sp, #16
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40020000 	.word	0x40020000

08003abc <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2225      	movs	r2, #37	@ 0x25
 8003ac8:	5c9b      	ldrb	r3, [r3, r2]
 8003aca:	b2db      	uxtb	r3, r3
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b002      	add	sp, #8
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003aea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d004      	beq.n	8003afe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003afc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003afe:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <DMA_SetConfig+0x7c>)
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b06:	221c      	movs	r2, #28
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	4b10      	ldr	r3, [pc, #64]	@ (8003b50 <DMA_SetConfig+0x7c>)
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b10      	cmp	r3, #16
 8003b22:	d108      	bne.n	8003b36 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b34:	e007      	b.n	8003b46 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	60da      	str	r2, [r3, #12]
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b004      	add	sp, #16
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	46c0      	nop			@ (mov r8, r8)
 8003b50:	40020000 	.word	0x40020000

08003b54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *) \
                        (uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                   ((hdma->ChannelIndex >> 2U) * \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	089b      	lsrs	r3, r3, #2
                        (uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003b62:	4a10      	ldr	r2, [pc, #64]	@ (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003b64:	4694      	mov	ip, r2
 8003b66:	4463      	add	r3, ip
 8003b68:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *) \
 8003b6a:	001a      	movs	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	645a      	str	r2, [r3, #68]	@ 0x44
                                    ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	001a      	movs	r2, r3
 8003b76:	23ff      	movs	r3, #255	@ 0xff
 8003b78:	4013      	ands	r3, r2
 8003b7a:	3b08      	subs	r3, #8
 8003b7c:	2114      	movs	r1, #20
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f7fc fac2 	bl	8000108 <__udivsi3>
 8003b84:	0003      	movs	r3, r0
 8003b86:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a07      	ldr	r2, [pc, #28]	@ (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003b8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	221f      	movs	r2, #31
 8003b92:	4013      	ands	r3, r2
 8003b94:	2201      	movs	r2, #1
 8003b96:	409a      	lsls	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003b9c:	46c0      	nop			@ (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	b004      	add	sp, #16
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	10008200 	.word	0x10008200
 8003ba8:	40020880 	.word	0x40020880

08003bac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	22ff      	movs	r2, #255	@ 0xff
 8003bba:	4013      	ands	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8003bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bc2:	4694      	mov	ip, r2
 8003bc4:	4463      	add	r3, ip
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	001a      	movs	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a07      	ldr	r2, [pc, #28]	@ (8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bd2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	3b01      	subs	r3, #1
 8003bd8:	2203      	movs	r2, #3
 8003bda:	4013      	ands	r3, r2
 8003bdc:	2201      	movs	r2, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	1000823f 	.word	0x1000823f
 8003bf0:	40020940 	.word	0x40020940

08003bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c02:	e14d      	b.n	8003ea0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4091      	lsls	r1, r2
 8003c0e:	000a      	movs	r2, r1
 8003c10:	4013      	ands	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d100      	bne.n	8003c1c <HAL_GPIO_Init+0x28>
 8003c1a:	e13e      	b.n	8003e9a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d005      	beq.n	8003c34 <HAL_GPIO_Init+0x40>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d130      	bne.n	8003c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	409a      	lsls	r2, r3
 8003c42:	0013      	movs	r3, r2
 8003c44:	43da      	mvns	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	409a      	lsls	r2, r3
 8003c56:	0013      	movs	r3, r2
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	0013      	movs	r3, r2
 8003c72:	43da      	mvns	r2, r3
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	2201      	movs	r2, #1
 8003c82:	401a      	ands	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	409a      	lsls	r2, r3
 8003c88:	0013      	movs	r3, r2
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2203      	movs	r2, #3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d017      	beq.n	8003cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	409a      	lsls	r2, r3
 8003cb0:	0013      	movs	r3, r2
 8003cb2:	43da      	mvns	r2, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	409a      	lsls	r2, r3
 8003cc4:	0013      	movs	r3, r2
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d123      	bne.n	8003d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	0092      	lsls	r2, r2, #2
 8003ce8:	58d3      	ldr	r3, [r2, r3]
 8003cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2207      	movs	r2, #7
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	0013      	movs	r3, r2
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2107      	movs	r1, #7
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	409a      	lsls	r2, r3
 8003d10:	0013      	movs	r3, r2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	0092      	lsls	r2, r2, #2
 8003d22:	6939      	ldr	r1, [r7, #16]
 8003d24:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	409a      	lsls	r2, r3
 8003d34:	0013      	movs	r3, r2
 8003d36:	43da      	mvns	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2203      	movs	r2, #3
 8003d44:	401a      	ands	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	409a      	lsls	r2, r3
 8003d4c:	0013      	movs	r3, r2
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	23c0      	movs	r3, #192	@ 0xc0
 8003d60:	029b      	lsls	r3, r3, #10
 8003d62:	4013      	ands	r3, r2
 8003d64:	d100      	bne.n	8003d68 <HAL_GPIO_Init+0x174>
 8003d66:	e098      	b.n	8003e9a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003d68:	4a53      	ldr	r2, [pc, #332]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	089b      	lsrs	r3, r3, #2
 8003d6e:	3318      	adds	r3, #24
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	589b      	ldr	r3, [r3, r2]
 8003d74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2203      	movs	r2, #3
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	220f      	movs	r2, #15
 8003d80:	409a      	lsls	r2, r3
 8003d82:	0013      	movs	r3, r2
 8003d84:	43da      	mvns	r2, r3
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	23a0      	movs	r3, #160	@ 0xa0
 8003d90:	05db      	lsls	r3, r3, #23
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d019      	beq.n	8003dca <HAL_GPIO_Init+0x1d6>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a48      	ldr	r2, [pc, #288]	@ (8003ebc <HAL_GPIO_Init+0x2c8>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_GPIO_Init+0x1d2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a47      	ldr	r2, [pc, #284]	@ (8003ec0 <HAL_GPIO_Init+0x2cc>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00d      	beq.n	8003dc2 <HAL_GPIO_Init+0x1ce>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a46      	ldr	r2, [pc, #280]	@ (8003ec4 <HAL_GPIO_Init+0x2d0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d007      	beq.n	8003dbe <HAL_GPIO_Init+0x1ca>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a45      	ldr	r2, [pc, #276]	@ (8003ec8 <HAL_GPIO_Init+0x2d4>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d101      	bne.n	8003dba <HAL_GPIO_Init+0x1c6>
 8003db6:	2305      	movs	r3, #5
 8003db8:	e008      	b.n	8003dcc <HAL_GPIO_Init+0x1d8>
 8003dba:	2306      	movs	r3, #6
 8003dbc:	e006      	b.n	8003dcc <HAL_GPIO_Init+0x1d8>
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e004      	b.n	8003dcc <HAL_GPIO_Init+0x1d8>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e002      	b.n	8003dcc <HAL_GPIO_Init+0x1d8>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <HAL_GPIO_Init+0x1d8>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	2103      	movs	r1, #3
 8003dd0:	400a      	ands	r2, r1
 8003dd2:	00d2      	lsls	r2, r2, #3
 8003dd4:	4093      	lsls	r3, r2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003ddc:	4936      	ldr	r1, [pc, #216]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	089b      	lsrs	r3, r3, #2
 8003de2:	3318      	adds	r3, #24
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dea:	4b33      	ldr	r3, [pc, #204]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	43da      	mvns	r2, r3
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4013      	ands	r3, r2
 8003df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	035b      	lsls	r3, r3, #13
 8003e02:	4013      	ands	r3, r2
 8003e04:	d003      	beq.n	8003e0e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003e14:	4b28      	ldr	r3, [pc, #160]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43da      	mvns	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	2380      	movs	r3, #128	@ 0x80
 8003e2a:	039b      	lsls	r3, r3, #14
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e38:	4b1f      	ldr	r3, [pc, #124]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003e40:	2384      	movs	r3, #132	@ 0x84
 8003e42:	58d3      	ldr	r3, [r2, r3]
 8003e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	43da      	mvns	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	029b      	lsls	r3, r3, #10
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e64:	4914      	ldr	r1, [pc, #80]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003e66:	2284      	movs	r2, #132	@ 0x84
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e6c:	4a12      	ldr	r2, [pc, #72]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003e6e:	2380      	movs	r3, #128	@ 0x80
 8003e70:	58d3      	ldr	r3, [r2, r3]
 8003e72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	2380      	movs	r3, #128	@ 0x80
 8003e84:	025b      	lsls	r3, r3, #9
 8003e86:	4013      	ands	r3, r2
 8003e88:	d003      	beq.n	8003e92 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e92:	4909      	ldr	r1, [pc, #36]	@ (8003eb8 <HAL_GPIO_Init+0x2c4>)
 8003e94:	2280      	movs	r2, #128	@ 0x80
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	40da      	lsrs	r2, r3
 8003ea8:	1e13      	subs	r3, r2, #0
 8003eaa:	d000      	beq.n	8003eae <HAL_GPIO_Init+0x2ba>
 8003eac:	e6aa      	b.n	8003c04 <HAL_GPIO_Init+0x10>
  }
}
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	46c0      	nop			@ (mov r8, r8)
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	b006      	add	sp, #24
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40021800 	.word	0x40021800
 8003ebc:	50000400 	.word	0x50000400
 8003ec0:	50000800 	.word	0x50000800
 8003ec4:	50000c00 	.word	0x50000c00
 8003ec8:	50001400 	.word	0x50001400

08003ecc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003eda:	e0ba      	b.n	8004052 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003edc:	2201      	movs	r2, #1
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d100      	bne.n	8003ef0 <HAL_GPIO_DeInit+0x24>
 8003eee:	e0ad      	b.n	800404c <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	089b      	lsrs	r3, r3, #2
 8003ef6:	3318      	adds	r3, #24
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	589b      	ldr	r3, [r3, r2]
 8003efc:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2203      	movs	r2, #3
 8003f02:	4013      	ands	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	220f      	movs	r2, #15
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	23a0      	movs	r3, #160	@ 0xa0
 8003f14:	05db      	lsls	r3, r3, #23
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d019      	beq.n	8003f4e <HAL_GPIO_DeInit+0x82>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a53      	ldr	r2, [pc, #332]	@ (800406c <HAL_GPIO_DeInit+0x1a0>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <HAL_GPIO_DeInit+0x7e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a52      	ldr	r2, [pc, #328]	@ (8004070 <HAL_GPIO_DeInit+0x1a4>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00d      	beq.n	8003f46 <HAL_GPIO_DeInit+0x7a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a51      	ldr	r2, [pc, #324]	@ (8004074 <HAL_GPIO_DeInit+0x1a8>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d007      	beq.n	8003f42 <HAL_GPIO_DeInit+0x76>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a50      	ldr	r2, [pc, #320]	@ (8004078 <HAL_GPIO_DeInit+0x1ac>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d101      	bne.n	8003f3e <HAL_GPIO_DeInit+0x72>
 8003f3a:	2305      	movs	r3, #5
 8003f3c:	e008      	b.n	8003f50 <HAL_GPIO_DeInit+0x84>
 8003f3e:	2306      	movs	r3, #6
 8003f40:	e006      	b.n	8003f50 <HAL_GPIO_DeInit+0x84>
 8003f42:	2303      	movs	r3, #3
 8003f44:	e004      	b.n	8003f50 <HAL_GPIO_DeInit+0x84>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e002      	b.n	8003f50 <HAL_GPIO_DeInit+0x84>
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_GPIO_DeInit+0x84>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	2103      	movs	r1, #3
 8003f54:	400a      	ands	r2, r1
 8003f56:	00d2      	lsls	r2, r2, #3
 8003f58:	4093      	lsls	r3, r2
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d136      	bne.n	8003fce <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003f60:	4a41      	ldr	r2, [pc, #260]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003f62:	2380      	movs	r3, #128	@ 0x80
 8003f64:	58d3      	ldr	r3, [r2, r3]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	43d2      	mvns	r2, r2
 8003f6a:	493f      	ldr	r1, [pc, #252]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2280      	movs	r2, #128	@ 0x80
 8003f70:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003f72:	4a3d      	ldr	r2, [pc, #244]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003f74:	2384      	movs	r3, #132	@ 0x84
 8003f76:	58d3      	ldr	r3, [r2, r3]
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	43d2      	mvns	r2, r2
 8003f7c:	493a      	ldr	r1, [pc, #232]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	2284      	movs	r2, #132	@ 0x84
 8003f82:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f84:	4b38      	ldr	r3, [pc, #224]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	43d9      	mvns	r1, r3
 8003f8c:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003f8e:	400a      	ands	r2, r1
 8003f90:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f92:	4b35      	ldr	r3, [pc, #212]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	43d9      	mvns	r1, r3
 8003f9a:	4b33      	ldr	r3, [pc, #204]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	220f      	movs	r2, #15
 8003faa:	409a      	lsls	r2, r3
 8003fac:	0013      	movs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003fb0:	4a2d      	ldr	r2, [pc, #180]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	089b      	lsrs	r3, r3, #2
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	589a      	ldr	r2, [r3, r2]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43d9      	mvns	r1, r3
 8003fc0:	4829      	ldr	r0, [pc, #164]	@ (8004068 <HAL_GPIO_DeInit+0x19c>)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	089b      	lsrs	r3, r3, #2
 8003fc6:	400a      	ands	r2, r1
 8003fc8:	3318      	adds	r3, #24
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2103      	movs	r1, #3
 8003fd8:	4099      	lsls	r1, r3
 8003fda:	000b      	movs	r3, r1
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	08da      	lsrs	r2, r3, #3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3208      	adds	r2, #8
 8003fea:	0092      	lsls	r2, r2, #2
 8003fec:	58d3      	ldr	r3, [r2, r3]
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	2107      	movs	r1, #7
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	0092      	lsls	r2, r2, #2
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	4091      	lsls	r1, r2
 8003ffa:	000a      	movs	r2, r1
 8003ffc:	43d1      	mvns	r1, r2
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	08d2      	lsrs	r2, r2, #3
 8004002:	4019      	ands	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3208      	adds	r2, #8
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	0052      	lsls	r2, r2, #1
 8004014:	2103      	movs	r1, #3
 8004016:	4091      	lsls	r1, r2
 8004018:	000a      	movs	r2, r1
 800401a:	43d2      	mvns	r2, r2
 800401c:	401a      	ands	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2101      	movs	r1, #1
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4091      	lsls	r1, r2
 800402c:	000a      	movs	r2, r1
 800402e:	43d2      	mvns	r2, r2
 8004030:	401a      	ands	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	0052      	lsls	r2, r2, #1
 800403e:	2103      	movs	r1, #3
 8004040:	4091      	lsls	r1, r2
 8004042:	000a      	movs	r2, r1
 8004044:	43d2      	mvns	r2, r2
 8004046:	401a      	ands	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3301      	adds	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	40da      	lsrs	r2, r3
 8004058:	1e13      	subs	r3, r2, #0
 800405a:	d000      	beq.n	800405e <HAL_GPIO_DeInit+0x192>
 800405c:	e73e      	b.n	8003edc <HAL_GPIO_DeInit+0x10>
  }
}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	46c0      	nop			@ (mov r8, r8)
 8004062:	46bd      	mov	sp, r7
 8004064:	b006      	add	sp, #24
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40021800 	.word	0x40021800
 800406c:	50000400 	.word	0x50000400
 8004070:	50000800 	.word	0x50000800
 8004074:	50000c00 	.word	0x50000c00
 8004078:	50001400 	.word	0x50001400

0800407c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b082      	sub	sp, #8
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	0008      	movs	r0, r1
 8004086:	0011      	movs	r1, r2
 8004088:	1cbb      	adds	r3, r7, #2
 800408a:	1c02      	adds	r2, r0, #0
 800408c:	801a      	strh	r2, [r3, #0]
 800408e:	1c7b      	adds	r3, r7, #1
 8004090:	1c0a      	adds	r2, r1, #0
 8004092:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004094:	1c7b      	adds	r3, r7, #1
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d004      	beq.n	80040a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800409c:	1cbb      	adds	r3, r7, #2
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040a4:	e003      	b.n	80040ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040a6:	1cbb      	adds	r3, r7, #2
 80040a8:	881a      	ldrh	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b002      	add	sp, #8
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	0002      	movs	r2, r0
 80040c0:	1dbb      	adds	r3, r7, #6
 80040c2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80040c4:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	1dba      	adds	r2, r7, #6
 80040ca:	8812      	ldrh	r2, [r2, #0]
 80040cc:	4013      	ands	r3, r2
 80040ce:	d008      	beq.n	80040e2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80040d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040d2:	1dba      	adds	r2, r7, #6
 80040d4:	8812      	ldrh	r2, [r2, #0]
 80040d6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80040d8:	1dbb      	adds	r3, r7, #6
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	0018      	movs	r0, r3
 80040de:	f7fe fa25 	bl	800252c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80040e2:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	1dba      	adds	r2, r7, #6
 80040e8:	8812      	ldrh	r2, [r2, #0]
 80040ea:	4013      	ands	r3, r2
 80040ec:	d008      	beq.n	8004100 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80040f0:	1dba      	adds	r2, r7, #6
 80040f2:	8812      	ldrh	r2, [r2, #0]
 80040f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80040f6:	1dbb      	adds	r3, r7, #6
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	0018      	movs	r0, r3
 80040fc:	f7fe f9f0 	bl	80024e0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004100:	46c0      	nop			@ (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021800 	.word	0x40021800

0800410c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e08f      	b.n	800423e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2241      	movs	r2, #65	@ 0x41
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d107      	bne.n	800413a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2240      	movs	r2, #64	@ 0x40
 800412e:	2100      	movs	r1, #0
 8004130:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	0018      	movs	r0, r3
 8004136:	f7fe ff85 	bl	8003044 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2241      	movs	r2, #65	@ 0x41
 800413e:	2124      	movs	r1, #36	@ 0x24
 8004140:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2101      	movs	r1, #1
 800414e:	438a      	bics	r2, r1
 8004150:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	493b      	ldr	r1, [pc, #236]	@ (8004248 <HAL_I2C_Init+0x13c>)
 800415c:	400a      	ands	r2, r1
 800415e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4938      	ldr	r1, [pc, #224]	@ (800424c <HAL_I2C_Init+0x140>)
 800416c:	400a      	ands	r2, r1
 800416e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d108      	bne.n	800418a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2180      	movs	r1, #128	@ 0x80
 8004182:	0209      	lsls	r1, r1, #8
 8004184:	430a      	orrs	r2, r1
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	e007      	b.n	800419a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2184      	movs	r1, #132	@ 0x84
 8004194:	0209      	lsls	r1, r1, #8
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d109      	bne.n	80041b6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2180      	movs	r1, #128	@ 0x80
 80041ae:	0109      	lsls	r1, r1, #4
 80041b0:	430a      	orrs	r2, r1
 80041b2:	605a      	str	r2, [r3, #4]
 80041b4:	e007      	b.n	80041c6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4923      	ldr	r1, [pc, #140]	@ (8004250 <HAL_I2C_Init+0x144>)
 80041c2:	400a      	ands	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4920      	ldr	r1, [pc, #128]	@ (8004254 <HAL_I2C_Init+0x148>)
 80041d2:	430a      	orrs	r2, r1
 80041d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	491a      	ldr	r1, [pc, #104]	@ (800424c <HAL_I2C_Init+0x140>)
 80041e2:	400a      	ands	r2, r1
 80041e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	69d9      	ldr	r1, [r3, #28]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2101      	movs	r1, #1
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2241      	movs	r2, #65	@ 0x41
 800422a:	2120      	movs	r1, #32
 800422c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2242      	movs	r2, #66	@ 0x42
 8004238:	2100      	movs	r1, #0
 800423a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	b002      	add	sp, #8
 8004244:	bd80      	pop	{r7, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	f0ffffff 	.word	0xf0ffffff
 800424c:	ffff7fff 	.word	0xffff7fff
 8004250:	fffff7ff 	.word	0xfffff7ff
 8004254:	02008000 	.word	0x02008000

08004258 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004258:	b590      	push	{r4, r7, lr}
 800425a:	b089      	sub	sp, #36	@ 0x24
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	000c      	movs	r4, r1
 8004262:	0010      	movs	r0, r2
 8004264:	0019      	movs	r1, r3
 8004266:	230a      	movs	r3, #10
 8004268:	18fb      	adds	r3, r7, r3
 800426a:	1c22      	adds	r2, r4, #0
 800426c:	801a      	strh	r2, [r3, #0]
 800426e:	2308      	movs	r3, #8
 8004270:	18fb      	adds	r3, r7, r3
 8004272:	1c02      	adds	r2, r0, #0
 8004274:	801a      	strh	r2, [r3, #0]
 8004276:	1dbb      	adds	r3, r7, #6
 8004278:	1c0a      	adds	r2, r1, #0
 800427a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2241      	movs	r2, #65	@ 0x41
 8004280:	5c9b      	ldrb	r3, [r3, r2]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b20      	cmp	r3, #32
 8004286:	d000      	beq.n	800428a <HAL_I2C_Mem_Write+0x32>
 8004288:	e10c      	b.n	80044a4 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800428a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428c:	2b00      	cmp	r3, #0
 800428e:	d004      	beq.n	800429a <HAL_I2C_Mem_Write+0x42>
 8004290:	232c      	movs	r3, #44	@ 0x2c
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d105      	bne.n	80042a6 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2280      	movs	r2, #128	@ 0x80
 800429e:	0092      	lsls	r2, r2, #2
 80042a0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e0ff      	b.n	80044a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2240      	movs	r2, #64	@ 0x40
 80042aa:	5c9b      	ldrb	r3, [r3, r2]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d101      	bne.n	80042b4 <HAL_I2C_Mem_Write+0x5c>
 80042b0:	2302      	movs	r3, #2
 80042b2:	e0f8      	b.n	80044a6 <HAL_I2C_Mem_Write+0x24e>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2240      	movs	r2, #64	@ 0x40
 80042b8:	2101      	movs	r1, #1
 80042ba:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042bc:	f7ff f8ac 	bl	8003418 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	0219      	lsls	r1, r3, #8
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	2319      	movs	r3, #25
 80042d0:	2201      	movs	r2, #1
 80042d2:	f001 fe8b 	bl	8005fec <I2C_WaitOnFlagUntilTimeout>
 80042d6:	1e03      	subs	r3, r0, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e0e3      	b.n	80044a6 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2241      	movs	r2, #65	@ 0x41
 80042e2:	2121      	movs	r1, #33	@ 0x21
 80042e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2242      	movs	r2, #66	@ 0x42
 80042ea:	2140      	movs	r1, #64	@ 0x40
 80042ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	222c      	movs	r2, #44	@ 0x2c
 80042fe:	18ba      	adds	r2, r7, r2
 8004300:	8812      	ldrh	r2, [r2, #0]
 8004302:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800430a:	1dbb      	adds	r3, r7, #6
 800430c:	881c      	ldrh	r4, [r3, #0]
 800430e:	2308      	movs	r3, #8
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	881a      	ldrh	r2, [r3, #0]
 8004314:	230a      	movs	r3, #10
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	8819      	ldrh	r1, [r3, #0]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	0023      	movs	r3, r4
 8004326:	f000 ffcd 	bl	80052c4 <I2C_RequestMemoryWrite>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d005      	beq.n	800433a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2240      	movs	r2, #64	@ 0x40
 8004332:	2100      	movs	r1, #0
 8004334:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e0b5      	b.n	80044a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433e:	b29b      	uxth	r3, r3
 8004340:	2bff      	cmp	r3, #255	@ 0xff
 8004342:	d911      	bls.n	8004368 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	22ff      	movs	r2, #255	@ 0xff
 8004348:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434e:	b2da      	uxtb	r2, r3
 8004350:	2380      	movs	r3, #128	@ 0x80
 8004352:	045c      	lsls	r4, r3, #17
 8004354:	230a      	movs	r3, #10
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	8819      	ldrh	r1, [r3, #0]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	2300      	movs	r3, #0
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	0023      	movs	r3, r4
 8004362:	f002 f81d 	bl	80063a0 <I2C_TransferConfig>
 8004366:	e012      	b.n	800438e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004376:	b2da      	uxtb	r2, r3
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	049c      	lsls	r4, r3, #18
 800437c:	230a      	movs	r3, #10
 800437e:	18fb      	adds	r3, r7, r3
 8004380:	8819      	ldrh	r1, [r3, #0]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	2300      	movs	r3, #0
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	0023      	movs	r3, r4
 800438a:	f002 f809 	bl	80063a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	0018      	movs	r0, r3
 8004396:	f001 fe81 	bl	800609c <I2C_WaitOnTXISFlagUntilTimeout>
 800439a:	1e03      	subs	r3, r0, #0
 800439c:	d001      	beq.n	80043a2 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e081      	b.n	80044a6 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a6:	781a      	ldrb	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d03a      	beq.n	8004452 <HAL_I2C_Mem_Write+0x1fa>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d136      	bne.n	8004452 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	0013      	movs	r3, r2
 80043ee:	2200      	movs	r2, #0
 80043f0:	2180      	movs	r1, #128	@ 0x80
 80043f2:	f001 fdfb 	bl	8005fec <I2C_WaitOnFlagUntilTimeout>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e053      	b.n	80044a6 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004402:	b29b      	uxth	r3, r3
 8004404:	2bff      	cmp	r3, #255	@ 0xff
 8004406:	d911      	bls.n	800442c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	22ff      	movs	r2, #255	@ 0xff
 800440c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004412:	b2da      	uxtb	r2, r3
 8004414:	2380      	movs	r3, #128	@ 0x80
 8004416:	045c      	lsls	r4, r3, #17
 8004418:	230a      	movs	r3, #10
 800441a:	18fb      	adds	r3, r7, r3
 800441c:	8819      	ldrh	r1, [r3, #0]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	2300      	movs	r3, #0
 8004422:	9300      	str	r3, [sp, #0]
 8004424:	0023      	movs	r3, r4
 8004426:	f001 ffbb 	bl	80063a0 <I2C_TransferConfig>
 800442a:	e012      	b.n	8004452 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	b2da      	uxtb	r2, r3
 800443c:	2380      	movs	r3, #128	@ 0x80
 800443e:	049c      	lsls	r4, r3, #18
 8004440:	230a      	movs	r3, #10
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	8819      	ldrh	r1, [r3, #0]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	2300      	movs	r3, #0
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	0023      	movs	r3, r4
 800444e:	f001 ffa7 	bl	80063a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d198      	bne.n	800438e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	0018      	movs	r0, r3
 8004464:	f001 fe60 	bl	8006128 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004468:	1e03      	subs	r3, r0, #0
 800446a:	d001      	beq.n	8004470 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e01a      	b.n	80044a6 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2220      	movs	r2, #32
 8004476:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	490b      	ldr	r1, [pc, #44]	@ (80044b0 <HAL_I2C_Mem_Write+0x258>)
 8004484:	400a      	ands	r2, r1
 8004486:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2241      	movs	r2, #65	@ 0x41
 800448c:	2120      	movs	r1, #32
 800448e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2242      	movs	r2, #66	@ 0x42
 8004494:	2100      	movs	r1, #0
 8004496:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2240      	movs	r2, #64	@ 0x40
 800449c:	2100      	movs	r1, #0
 800449e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044a0:	2300      	movs	r3, #0
 80044a2:	e000      	b.n	80044a6 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
  }
}
 80044a6:	0018      	movs	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	b007      	add	sp, #28
 80044ac:	bd90      	pop	{r4, r7, pc}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	fe00e800 	.word	0xfe00e800

080044b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b590      	push	{r4, r7, lr}
 80044b6:	b089      	sub	sp, #36	@ 0x24
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	000c      	movs	r4, r1
 80044be:	0010      	movs	r0, r2
 80044c0:	0019      	movs	r1, r3
 80044c2:	230a      	movs	r3, #10
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	1c22      	adds	r2, r4, #0
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	2308      	movs	r3, #8
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	1c02      	adds	r2, r0, #0
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	1dbb      	adds	r3, r7, #6
 80044d4:	1c0a      	adds	r2, r1, #0
 80044d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2241      	movs	r2, #65	@ 0x41
 80044dc:	5c9b      	ldrb	r3, [r3, r2]
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	d000      	beq.n	80044e6 <HAL_I2C_Mem_Read+0x32>
 80044e4:	e110      	b.n	8004708 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d004      	beq.n	80044f6 <HAL_I2C_Mem_Read+0x42>
 80044ec:	232c      	movs	r3, #44	@ 0x2c
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d105      	bne.n	8004502 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2280      	movs	r2, #128	@ 0x80
 80044fa:	0092      	lsls	r2, r2, #2
 80044fc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e103      	b.n	800470a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2240      	movs	r2, #64	@ 0x40
 8004506:	5c9b      	ldrb	r3, [r3, r2]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_I2C_Mem_Read+0x5c>
 800450c:	2302      	movs	r3, #2
 800450e:	e0fc      	b.n	800470a <HAL_I2C_Mem_Read+0x256>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2240      	movs	r2, #64	@ 0x40
 8004514:	2101      	movs	r1, #1
 8004516:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004518:	f7fe ff7e 	bl	8003418 <HAL_GetTick>
 800451c:	0003      	movs	r3, r0
 800451e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004520:	2380      	movs	r3, #128	@ 0x80
 8004522:	0219      	lsls	r1, r3, #8
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	2319      	movs	r3, #25
 800452c:	2201      	movs	r2, #1
 800452e:	f001 fd5d 	bl	8005fec <I2C_WaitOnFlagUntilTimeout>
 8004532:	1e03      	subs	r3, r0, #0
 8004534:	d001      	beq.n	800453a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0e7      	b.n	800470a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2241      	movs	r2, #65	@ 0x41
 800453e:	2122      	movs	r1, #34	@ 0x22
 8004540:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2242      	movs	r2, #66	@ 0x42
 8004546:	2140      	movs	r1, #64	@ 0x40
 8004548:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004554:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	222c      	movs	r2, #44	@ 0x2c
 800455a:	18ba      	adds	r2, r7, r2
 800455c:	8812      	ldrh	r2, [r2, #0]
 800455e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004566:	1dbb      	adds	r3, r7, #6
 8004568:	881c      	ldrh	r4, [r3, #0]
 800456a:	2308      	movs	r3, #8
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	881a      	ldrh	r2, [r3, #0]
 8004570:	230a      	movs	r3, #10
 8004572:	18fb      	adds	r3, r7, r3
 8004574:	8819      	ldrh	r1, [r3, #0]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	9301      	str	r3, [sp, #4]
 800457c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	0023      	movs	r3, r4
 8004582:	f000 ff03 	bl	800538c <I2C_RequestMemoryRead>
 8004586:	1e03      	subs	r3, r0, #0
 8004588:	d005      	beq.n	8004596 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2240      	movs	r2, #64	@ 0x40
 800458e:	2100      	movs	r1, #0
 8004590:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0b9      	b.n	800470a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2bff      	cmp	r3, #255	@ 0xff
 800459e:	d911      	bls.n	80045c4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	22ff      	movs	r2, #255	@ 0xff
 80045a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	2380      	movs	r3, #128	@ 0x80
 80045ae:	045c      	lsls	r4, r3, #17
 80045b0:	230a      	movs	r3, #10
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	8819      	ldrh	r1, [r3, #0]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	4b56      	ldr	r3, [pc, #344]	@ (8004714 <HAL_I2C_Mem_Read+0x260>)
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	0023      	movs	r3, r4
 80045be:	f001 feef 	bl	80063a0 <I2C_TransferConfig>
 80045c2:	e012      	b.n	80045ea <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	2380      	movs	r3, #128	@ 0x80
 80045d6:	049c      	lsls	r4, r3, #18
 80045d8:	230a      	movs	r3, #10
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	8819      	ldrh	r1, [r3, #0]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004714 <HAL_I2C_Mem_Read+0x260>)
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	0023      	movs	r3, r4
 80045e6:	f001 fedb 	bl	80063a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80045ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	9300      	str	r3, [sp, #0]
 80045f2:	0013      	movs	r3, r2
 80045f4:	2200      	movs	r2, #0
 80045f6:	2104      	movs	r1, #4
 80045f8:	f001 fcf8 	bl	8005fec <I2C_WaitOnFlagUntilTimeout>
 80045fc:	1e03      	subs	r3, r0, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e082      	b.n	800470a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004616:	1c5a      	adds	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800462c:	b29b      	uxth	r3, r3
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d03a      	beq.n	80046b6 <HAL_I2C_Mem_Read+0x202>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004644:	2b00      	cmp	r3, #0
 8004646:	d136      	bne.n	80046b6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	0013      	movs	r3, r2
 8004652:	2200      	movs	r2, #0
 8004654:	2180      	movs	r1, #128	@ 0x80
 8004656:	f001 fcc9 	bl	8005fec <I2C_WaitOnFlagUntilTimeout>
 800465a:	1e03      	subs	r3, r0, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e053      	b.n	800470a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	2bff      	cmp	r3, #255	@ 0xff
 800466a:	d911      	bls.n	8004690 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	22ff      	movs	r2, #255	@ 0xff
 8004670:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004676:	b2da      	uxtb	r2, r3
 8004678:	2380      	movs	r3, #128	@ 0x80
 800467a:	045c      	lsls	r4, r3, #17
 800467c:	230a      	movs	r3, #10
 800467e:	18fb      	adds	r3, r7, r3
 8004680:	8819      	ldrh	r1, [r3, #0]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	2300      	movs	r3, #0
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	0023      	movs	r3, r4
 800468a:	f001 fe89 	bl	80063a0 <I2C_TransferConfig>
 800468e:	e012      	b.n	80046b6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	2380      	movs	r3, #128	@ 0x80
 80046a2:	049c      	lsls	r4, r3, #18
 80046a4:	230a      	movs	r3, #10
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	8819      	ldrh	r1, [r3, #0]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	2300      	movs	r3, #0
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	0023      	movs	r3, r4
 80046b2:	f001 fe75 	bl	80063a0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d194      	bne.n	80045ea <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f001 fd2e 	bl	8006128 <I2C_WaitOnSTOPFlagUntilTimeout>
 80046cc:	1e03      	subs	r3, r0, #0
 80046ce:	d001      	beq.n	80046d4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e01a      	b.n	800470a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2220      	movs	r2, #32
 80046da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	490c      	ldr	r1, [pc, #48]	@ (8004718 <HAL_I2C_Mem_Read+0x264>)
 80046e8:	400a      	ands	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2241      	movs	r2, #65	@ 0x41
 80046f0:	2120      	movs	r1, #32
 80046f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2242      	movs	r2, #66	@ 0x42
 80046f8:	2100      	movs	r1, #0
 80046fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2240      	movs	r2, #64	@ 0x40
 8004700:	2100      	movs	r1, #0
 8004702:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	0018      	movs	r0, r3
 800470c:	46bd      	mov	sp, r7
 800470e:	b007      	add	sp, #28
 8004710:	bd90      	pop	{r4, r7, pc}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	80002400 	.word	0x80002400
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800471c:	b5b0      	push	{r4, r5, r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	000c      	movs	r4, r1
 8004726:	0010      	movs	r0, r2
 8004728:	0019      	movs	r1, r3
 800472a:	230a      	movs	r3, #10
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	1c22      	adds	r2, r4, #0
 8004730:	801a      	strh	r2, [r3, #0]
 8004732:	2308      	movs	r3, #8
 8004734:	18fb      	adds	r3, r7, r3
 8004736:	1c02      	adds	r2, r0, #0
 8004738:	801a      	strh	r2, [r3, #0]
 800473a:	1dbb      	adds	r3, r7, #6
 800473c:	1c0a      	adds	r2, r1, #0
 800473e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2241      	movs	r2, #65	@ 0x41
 8004744:	5c9b      	ldrb	r3, [r3, r2]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b20      	cmp	r3, #32
 800474a:	d000      	beq.n	800474e <HAL_I2C_Mem_Read_DMA+0x32>
 800474c:	e0d6      	b.n	80048fc <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <HAL_I2C_Mem_Read_DMA+0x42>
 8004754:	232c      	movs	r3, #44	@ 0x2c
 8004756:	18fb      	adds	r3, r7, r3
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d105      	bne.n	800476a <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2280      	movs	r2, #128	@ 0x80
 8004762:	0092      	lsls	r2, r2, #2
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0c9      	b.n	80048fe <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	021b      	lsls	r3, r3, #8
 8004774:	401a      	ands	r2, r3
 8004776:	2380      	movs	r3, #128	@ 0x80
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	429a      	cmp	r2, r3
 800477c:	d101      	bne.n	8004782 <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
 8004780:	e0bd      	b.n	80048fe <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2240      	movs	r2, #64	@ 0x40
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_I2C_Mem_Read_DMA+0x74>
 800478c:	2302      	movs	r3, #2
 800478e:	e0b6      	b.n	80048fe <HAL_I2C_Mem_Read_DMA+0x1e2>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2240      	movs	r2, #64	@ 0x40
 8004794:	2101      	movs	r1, #1
 8004796:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2241      	movs	r2, #65	@ 0x41
 800479c:	2122      	movs	r1, #34	@ 0x22
 800479e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2242      	movs	r2, #66	@ 0x42
 80047a4:	2140      	movs	r1, #64	@ 0x40
 80047a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	222c      	movs	r2, #44	@ 0x2c
 80047b8:	18ba      	adds	r2, r7, r2
 80047ba:	8812      	ldrh	r2, [r2, #0]
 80047bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a51      	ldr	r2, [pc, #324]	@ (8004908 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 80047c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a51      	ldr	r2, [pc, #324]	@ (800490c <HAL_I2C_Mem_Read_DMA+0x1f0>)
 80047c8:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 80047ca:	230a      	movs	r3, #10
 80047cc:	18fb      	adds	r3, r7, r3
 80047ce:	881a      	ldrh	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047d8:	b29b      	uxth	r3, r3
 80047da:	2bff      	cmp	r3, #255	@ 0xff
 80047dc:	d903      	bls.n	80047e6 <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	22ff      	movs	r2, #255	@ 0xff
 80047e2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80047e4:	e004      	b.n	80047f0 <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ea:	b29a      	uxth	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047f0:	1dbb      	adds	r3, r7, #6
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d10b      	bne.n	8004810 <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047f8:	2308      	movs	r3, #8
 80047fa:	18fb      	adds	r3, r7, r3
 80047fc:	881b      	ldrh	r3, [r3, #0]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	4252      	negs	r2, r2
 800480c:	651a      	str	r2, [r3, #80]	@ 0x50
 800480e:	e00e      	b.n	800482e <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004810:	2108      	movs	r1, #8
 8004812:	187b      	adds	r3, r7, r1
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	0a1b      	lsrs	r3, r3, #8
 8004818:	b29b      	uxth	r3, r3
 800481a:	b2da      	uxtb	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8004822:	187b      	adds	r3, r7, r1
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	001a      	movs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	2b00      	cmp	r3, #0
 8004834:	d023      	beq.n	800487e <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483a:	4a35      	ldr	r2, [pc, #212]	@ (8004910 <HAL_I2C_Mem_Read_DMA+0x1f4>)
 800483c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	4a34      	ldr	r2, [pc, #208]	@ (8004914 <HAL_I2C_Mem_Read_DMA+0x1f8>)
 8004844:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484a:	2200      	movs	r2, #0
 800484c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004852:	2200      	movs	r2, #0
 8004854:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3324      	adds	r3, #36	@ 0x24
 8004860:	0019      	movs	r1, r3
 8004862:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8004868:	2517      	movs	r5, #23
 800486a:	197c      	adds	r4, r7, r5
 800486c:	f7fe ff84 	bl	8003778 <HAL_DMA_Start_IT>
 8004870:	0003      	movs	r3, r0
 8004872:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004874:	197b      	adds	r3, r7, r5
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d12b      	bne.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x1b8>
 800487c:	e013      	b.n	80048a6 <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2241      	movs	r2, #65	@ 0x41
 8004882:	2120      	movs	r1, #32
 8004884:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2242      	movs	r2, #66	@ 0x42
 800488a:	2100      	movs	r1, #0
 800488c:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	2280      	movs	r2, #128	@ 0x80
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2240      	movs	r2, #64	@ 0x40
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e02b      	b.n	80048fe <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048a6:	1dbb      	adds	r3, r7, #6
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	b2da      	uxtb	r2, r3
 80048ac:	230a      	movs	r3, #10
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	8819      	ldrh	r1, [r3, #0]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	4b18      	ldr	r3, [pc, #96]	@ (8004918 <HAL_I2C_Mem_Read_DMA+0x1fc>)
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	2300      	movs	r3, #0
 80048ba:	f001 fd71 	bl	80063a0 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2240      	movs	r2, #64	@ 0x40
 80048c2:	2100      	movs	r1, #0
 80048c4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2101      	movs	r1, #1
 80048ca:	0018      	movs	r0, r3
 80048cc:	f001 fda2 	bl	8006414 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	e014      	b.n	80048fe <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2241      	movs	r2, #65	@ 0x41
 80048d8:	2120      	movs	r1, #32
 80048da:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2242      	movs	r2, #66	@ 0x42
 80048e0:	2100      	movs	r1, #0
 80048e2:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e8:	2210      	movs	r2, #16
 80048ea:	431a      	orrs	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2240      	movs	r2, #64	@ 0x40
 80048f4:	2100      	movs	r1, #0
 80048f6:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048fc:	2302      	movs	r3, #2
  }
}
 80048fe:	0018      	movs	r0, r3
 8004900:	46bd      	mov	sp, r7
 8004902:	b006      	add	sp, #24
 8004904:	bdb0      	pop	{r4, r5, r7, pc}
 8004906:	46c0      	nop			@ (mov r8, r8)
 8004908:	ffff0000 	.word	0xffff0000
 800490c:	08004e9d 	.word	0x08004e9d
 8004910:	08005edd 	.word	0x08005edd
 8004914:	08005f7d 	.word	0x08005f7d
 8004918:	80002000 	.word	0x80002000

0800491c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004938:	2b00      	cmp	r3, #0
 800493a:	d005      	beq.n	8004948 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	68f9      	ldr	r1, [r7, #12]
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	4798      	blx	r3
  }
}
 8004948:	46c0      	nop			@ (mov r8, r8)
 800494a:	46bd      	mov	sp, r7
 800494c:	b004      	add	sp, #16
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	4013      	ands	r3, r2
 8004970:	d00e      	beq.n	8004990 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2280      	movs	r2, #128	@ 0x80
 8004976:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004978:	d00a      	beq.n	8004990 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	2201      	movs	r2, #1
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2280      	movs	r2, #128	@ 0x80
 800498c:	0052      	lsls	r2, r2, #1
 800498e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	2380      	movs	r3, #128	@ 0x80
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4013      	ands	r3, r2
 8004998:	d00e      	beq.n	80049b8 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2280      	movs	r2, #128	@ 0x80
 800499e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80049a0:	d00a      	beq.n	80049b8 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a6:	2208      	movs	r2, #8
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2280      	movs	r2, #128	@ 0x80
 80049b4:	00d2      	lsls	r2, r2, #3
 80049b6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	2380      	movs	r3, #128	@ 0x80
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4013      	ands	r3, r2
 80049c0:	d00e      	beq.n	80049e0 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2280      	movs	r2, #128	@ 0x80
 80049c6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80049c8:	d00a      	beq.n	80049e0 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ce:	2202      	movs	r2, #2
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2280      	movs	r2, #128	@ 0x80
 80049dc:	0092      	lsls	r2, r2, #2
 80049de:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	220b      	movs	r2, #11
 80049ea:	4013      	ands	r3, r2
 80049ec:	d005      	beq.n	80049fa <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	0011      	movs	r1, r2
 80049f4:	0018      	movs	r0, r3
 80049f6:	f001 f923 	bl	8005c40 <I2C_ITError>
  }
}
 80049fa:	46c0      	nop			@ (mov r8, r8)
 80049fc:	46bd      	mov	sp, r7
 80049fe:	b006      	add	sp, #24
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b002      	add	sp, #8
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b082      	sub	sp, #8
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b002      	add	sp, #8
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b082      	sub	sp, #8
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b002      	add	sp, #8
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b082      	sub	sp, #8
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a3a:	46c0      	nop			@ (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	0008      	movs	r0, r1
 8004a4c:	0011      	movs	r1, r2
 8004a4e:	1cfb      	adds	r3, r7, #3
 8004a50:	1c02      	adds	r2, r0, #0
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	003b      	movs	r3, r7
 8004a56:	1c0a      	adds	r2, r1, #0
 8004a58:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	b002      	add	sp, #8
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b082      	sub	sp, #8
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004a6a:	46c0      	nop			@ (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b002      	add	sp, #8
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a7a:	46c0      	nop			@ (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a8a:	46c0      	nop			@ (mov r8, r8)
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b002      	add	sp, #8
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a9a:	46c0      	nop			@ (mov r8, r8)
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	b002      	add	sp, #8
 8004aa0:	bd80      	pop	{r7, pc}
	...

08004aa4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2240      	movs	r2, #64	@ 0x40
 8004abe:	5c9b      	ldrb	r3, [r3, r2]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d101      	bne.n	8004ac8 <I2C_Slave_ISR_IT+0x24>
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	e0e7      	b.n	8004c98 <I2C_Slave_ISR_IT+0x1f4>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2240      	movs	r2, #64	@ 0x40
 8004acc:	2101      	movs	r1, #1
 8004ace:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d00a      	beq.n	8004aee <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004ade:	d006      	beq.n	8004aee <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	0011      	movs	r1, r2
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 feca 	bl	8005880 <I2C_ITSlaveCplt>
 8004aec:	e0cf      	b.n	8004c8e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	2210      	movs	r2, #16
 8004af2:	4013      	ands	r3, r2
 8004af4:	d052      	beq.n	8004b9c <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2210      	movs	r2, #16
 8004afa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004afc:	d04e      	beq.n	8004b9c <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d12d      	bne.n	8004b64 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2241      	movs	r2, #65	@ 0x41
 8004b0c:	5c9b      	ldrb	r3, [r3, r2]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b28      	cmp	r3, #40	@ 0x28
 8004b12:	d10b      	bne.n	8004b2c <I2C_Slave_ISR_IT+0x88>
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	2380      	movs	r3, #128	@ 0x80
 8004b18:	049b      	lsls	r3, r3, #18
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d106      	bne.n	8004b2c <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	0011      	movs	r1, r2
 8004b24:	0018      	movs	r0, r3
 8004b26:	f001 f833 	bl	8005b90 <I2C_ITListenCplt>
 8004b2a:	e036      	b.n	8004b9a <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2241      	movs	r2, #65	@ 0x41
 8004b30:	5c9b      	ldrb	r3, [r3, r2]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b29      	cmp	r3, #41	@ 0x29
 8004b36:	d110      	bne.n	8004b5a <I2C_Slave_ISR_IT+0xb6>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4a59      	ldr	r2, [pc, #356]	@ (8004ca0 <I2C_Slave_ISR_IT+0x1fc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00c      	beq.n	8004b5a <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2210      	movs	r2, #16
 8004b46:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f001 f9a3 	bl	8005e96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	0018      	movs	r0, r3
 8004b54:	f000 fd62 	bl	800561c <I2C_ITSlaveSeqCplt>
 8004b58:	e01f      	b.n	8004b9a <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2210      	movs	r2, #16
 8004b60:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004b62:	e091      	b.n	8004c88 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2210      	movs	r2, #16
 8004b6a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b70:	2204      	movs	r2, #4
 8004b72:	431a      	orrs	r2, r3
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <I2C_Slave_ISR_IT+0xe6>
 8004b7e:	697a      	ldr	r2, [r7, #20]
 8004b80:	2380      	movs	r3, #128	@ 0x80
 8004b82:	045b      	lsls	r3, r3, #17
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d000      	beq.n	8004b8a <I2C_Slave_ISR_IT+0xe6>
 8004b88:	e07e      	b.n	8004c88 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	0011      	movs	r1, r2
 8004b92:	0018      	movs	r0, r3
 8004b94:	f001 f854 	bl	8005c40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b98:	e076      	b.n	8004c88 <I2C_Slave_ISR_IT+0x1e4>
 8004b9a:	e075      	b.n	8004c88 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d02f      	beq.n	8004c04 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004baa:	d02b      	beq.n	8004c04 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d018      	beq.n	8004be8 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d14c      	bne.n	8004c8c <I2C_Slave_ISR_IT+0x1e8>
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <I2C_Slave_ISR_IT+0x1fc>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d048      	beq.n	8004c8c <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	f000 fd0d 	bl	800561c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004c02:	e043      	b.n	8004c8c <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2208      	movs	r2, #8
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d00a      	beq.n	8004c22 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2208      	movs	r2, #8
 8004c10:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004c12:	d006      	beq.n	8004c22 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	0011      	movs	r1, r2
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 fc18 	bl	8005450 <I2C_ITAddrCplt>
 8004c20:	e035      	b.n	8004c8e <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2202      	movs	r2, #2
 8004c26:	4013      	ands	r3, r2
 8004c28:	d031      	beq.n	8004c8e <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004c30:	d02d      	beq.n	8004c8e <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d018      	beq.n	8004c6e <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c6c:	e00f      	b.n	8004c8e <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	2380      	movs	r3, #128	@ 0x80
 8004c72:	045b      	lsls	r3, r3, #17
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d002      	beq.n	8004c7e <I2C_Slave_ISR_IT+0x1da>
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	0018      	movs	r0, r3
 8004c82:	f000 fccb 	bl	800561c <I2C_ITSlaveSeqCplt>
 8004c86:	e002      	b.n	8004c8e <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8004c88:	46c0      	nop			@ (mov r8, r8)
 8004c8a:	e000      	b.n	8004c8e <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8004c8c:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2240      	movs	r2, #64	@ 0x40
 8004c92:	2100      	movs	r1, #0
 8004c94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	0018      	movs	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	b006      	add	sp, #24
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	ffff0000 	.word	0xffff0000

08004ca4 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004ca4:	b590      	push	{r4, r7, lr}
 8004ca6:	b089      	sub	sp, #36	@ 0x24
 8004ca8:	af02      	add	r7, sp, #8
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2240      	movs	r2, #64	@ 0x40
 8004cb4:	5c9b      	ldrb	r3, [r3, r2]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <I2C_Master_ISR_DMA+0x1a>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e0e7      	b.n	8004e8e <I2C_Master_ISR_DMA+0x1ea>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2240      	movs	r2, #64	@ 0x40
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2210      	movs	r2, #16
 8004cca:	4013      	ands	r3, r2
 8004ccc:	d017      	beq.n	8004cfe <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2210      	movs	r2, #16
 8004cd2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004cd4:	d013      	beq.n	8004cfe <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2210      	movs	r2, #16
 8004cdc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce2:	2204      	movs	r2, #4
 8004ce4:	431a      	orrs	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2120      	movs	r1, #32
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f001 fb90 	bl	8006414 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	f001 f8cd 	bl	8005e96 <I2C_Flush_TXDR>
 8004cfc:	e0c2      	b.n	8004e84 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2280      	movs	r2, #128	@ 0x80
 8004d02:	4013      	ands	r3, r2
 8004d04:	d100      	bne.n	8004d08 <I2C_Master_ISR_DMA+0x64>
 8004d06:	e07c      	b.n	8004e02 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2240      	movs	r2, #64	@ 0x40
 8004d0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004d0e:	d100      	bne.n	8004d12 <I2C_Master_ISR_DMA+0x6e>
 8004d10:	e077      	b.n	8004e02 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2140      	movs	r1, #64	@ 0x40
 8004d1e:	438a      	bics	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d055      	beq.n	8004dd8 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	2312      	movs	r3, #18
 8004d36:	18fb      	adds	r3, r7, r3
 8004d38:	0592      	lsls	r2, r2, #22
 8004d3a:	0d92      	lsrs	r2, r2, #22
 8004d3c:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2bff      	cmp	r3, #255	@ 0xff
 8004d46:	d906      	bls.n	8004d56 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	22ff      	movs	r2, #255	@ 0xff
 8004d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004d4e:	2380      	movs	r3, #128	@ 0x80
 8004d50:	045b      	lsls	r3, r3, #17
 8004d52:	617b      	str	r3, [r7, #20]
 8004d54:	e010      	b.n	8004d78 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	4a4c      	ldr	r2, [pc, #304]	@ (8004e98 <I2C_Master_ISR_DMA+0x1f4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d003      	beq.n	8004d72 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	617b      	str	r3, [r7, #20]
 8004d70:	e002      	b.n	8004d78 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004d72:	2380      	movs	r3, #128	@ 0x80
 8004d74:	049b      	lsls	r3, r3, #18
 8004d76:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	697c      	ldr	r4, [r7, #20]
 8004d80:	2312      	movs	r3, #18
 8004d82:	18fb      	adds	r3, r7, r3
 8004d84:	8819      	ldrh	r1, [r3, #0]
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	2300      	movs	r3, #0
 8004d8a:	9300      	str	r3, [sp, #0]
 8004d8c:	0023      	movs	r3, r4
 8004d8e:	f001 fb07 	bl	80063a0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2241      	movs	r2, #65	@ 0x41
 8004da8:	5c9b      	ldrb	r3, [r3, r2]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b22      	cmp	r3, #34	@ 0x22
 8004dae:	d109      	bne.n	8004dc4 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2180      	movs	r1, #128	@ 0x80
 8004dbc:	0209      	lsls	r1, r1, #8
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004dc2:	e05f      	b.n	8004e84 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2180      	movs	r1, #128	@ 0x80
 8004dd0:	01c9      	lsls	r1, r1, #7
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004dd6:	e055      	b.n	8004e84 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	2380      	movs	r3, #128	@ 0x80
 8004de0:	049b      	lsls	r3, r3, #18
 8004de2:	401a      	ands	r2, r3
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	049b      	lsls	r3, r3, #18
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d004      	beq.n	8004df6 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	0018      	movs	r0, r3
 8004df0:	f000 fbd2 	bl	8005598 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004df4:	e046      	b.n	8004e84 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2140      	movs	r1, #64	@ 0x40
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f000 ff20 	bl	8005c40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004e00:	e040      	b.n	8004e84 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	2240      	movs	r2, #64	@ 0x40
 8004e06:	4013      	ands	r3, r2
 8004e08:	d02c      	beq.n	8004e64 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2240      	movs	r2, #64	@ 0x40
 8004e0e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004e10:	d028      	beq.n	8004e64 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d11d      	bne.n	8004e58 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	2380      	movs	r3, #128	@ 0x80
 8004e24:	049b      	lsls	r3, r3, #18
 8004e26:	401a      	ands	r2, r3
 8004e28:	2380      	movs	r3, #128	@ 0x80
 8004e2a:	049b      	lsls	r3, r3, #18
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d028      	beq.n	8004e82 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	4a18      	ldr	r2, [pc, #96]	@ (8004e98 <I2C_Master_ISR_DMA+0x1f4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d109      	bne.n	8004e4e <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2180      	movs	r1, #128	@ 0x80
 8004e46:	01c9      	lsls	r1, r1, #7
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004e4c:	e019      	b.n	8004e82 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	0018      	movs	r0, r3
 8004e52:	f000 fba1 	bl	8005598 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004e56:	e014      	b.n	8004e82 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2140      	movs	r1, #64	@ 0x40
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f000 feef 	bl	8005c40 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004e62:	e00e      	b.n	8004e82 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2220      	movs	r2, #32
 8004e68:	4013      	ands	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e72:	d007      	beq.n	8004e84 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	0011      	movs	r1, r2
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f000 fc32 	bl	80056e4 <I2C_ITMasterCplt>
 8004e80:	e000      	b.n	8004e84 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8004e82:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2240      	movs	r2, #64	@ 0x40
 8004e88:	2100      	movs	r1, #0
 8004e8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	0018      	movs	r0, r3
 8004e90:	46bd      	mov	sp, r7
 8004e92:	b007      	add	sp, #28
 8004e94:	bd90      	pop	{r4, r7, pc}
 8004e96:	46c0      	nop			@ (mov r8, r8)
 8004e98:	ffff0000 	.word	0xffff0000

08004e9c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b089      	sub	sp, #36	@ 0x24
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004ea8:	4b90      	ldr	r3, [pc, #576]	@ (80050ec <I2C_Mem_ISR_DMA+0x250>)
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2240      	movs	r2, #64	@ 0x40
 8004eb0:	5c9b      	ldrb	r3, [r3, r2]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <I2C_Mem_ISR_DMA+0x1e>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e113      	b.n	80050e2 <I2C_Mem_ISR_DMA+0x246>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2240      	movs	r2, #64	@ 0x40
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2210      	movs	r2, #16
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d017      	beq.n	8004efa <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2210      	movs	r2, #16
 8004ece:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004ed0:	d013      	beq.n	8004efa <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2210      	movs	r2, #16
 8004ed8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ede:	2204      	movs	r2, #4
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2120      	movs	r1, #32
 8004eea:	0018      	movs	r0, r3
 8004eec:	f001 fa92 	bl	8006414 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	0018      	movs	r0, r3
 8004ef4:	f000 ffcf 	bl	8005e96 <I2C_Flush_TXDR>
 8004ef8:	e0ee      	b.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2202      	movs	r2, #2
 8004efe:	4013      	ands	r3, r2
 8004f00:	d00d      	beq.n	8004f1e <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2202      	movs	r2, #2
 8004f06:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004f08:	d009      	beq.n	8004f1e <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004f12:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	4252      	negs	r2, r2
 8004f1a:	651a      	str	r2, [r3, #80]	@ 0x50
 8004f1c:	e0dc      	b.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2280      	movs	r2, #128	@ 0x80
 8004f22:	4013      	ands	r3, r2
 8004f24:	d063      	beq.n	8004fee <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2240      	movs	r2, #64	@ 0x40
 8004f2a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f2c:	d05f      	beq.n	8004fee <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2101      	movs	r1, #1
 8004f32:	0018      	movs	r0, r3
 8004f34:	f001 faf8 	bl	8006528 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2110      	movs	r1, #16
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f001 fa69 	bl	8006414 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d04a      	beq.n	8004fe2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2bff      	cmp	r3, #255	@ 0xff
 8004f54:	d910      	bls.n	8004f78 <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	22ff      	movs	r2, #255	@ 0xff
 8004f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f60:	b299      	uxth	r1, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	2380      	movs	r3, #128	@ 0x80
 8004f6a:	045b      	lsls	r3, r3, #17
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	2400      	movs	r4, #0
 8004f70:	9400      	str	r4, [sp, #0]
 8004f72:	f001 fa15 	bl	80063a0 <I2C_TransferConfig>
 8004f76:	e011      	b.n	8004f9c <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f86:	b299      	uxth	r1, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	2380      	movs	r3, #128	@ 0x80
 8004f90:	049b      	lsls	r3, r3, #18
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	2400      	movs	r4, #0
 8004f96:	9400      	str	r4, [sp, #0]
 8004f98:	f001 fa02 	bl	80063a0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2241      	movs	r2, #65	@ 0x41
 8004fb2:	5c9b      	ldrb	r3, [r3, r2]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b22      	cmp	r3, #34	@ 0x22
 8004fb8:	d109      	bne.n	8004fce <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2180      	movs	r1, #128	@ 0x80
 8004fc6:	0209      	lsls	r1, r1, #8
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004fcc:	e084      	b.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2180      	movs	r1, #128	@ 0x80
 8004fda:	01c9      	lsls	r1, r1, #7
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004fe0:	e07a      	b.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2140      	movs	r1, #64	@ 0x40
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	f000 fe2a 	bl	8005c40 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004fec:	e074      	b.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2240      	movs	r2, #64	@ 0x40
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d062      	beq.n	80050bc <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2240      	movs	r2, #64	@ 0x40
 8004ffa:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004ffc:	d05e      	beq.n	80050bc <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2101      	movs	r1, #1
 8005002:	0018      	movs	r0, r3
 8005004:	f001 fa90 	bl	8006528 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2110      	movs	r1, #16
 800500c:	0018      	movs	r0, r3
 800500e:	f001 fa01 	bl	8006414 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2241      	movs	r2, #65	@ 0x41
 8005016:	5c9b      	ldrb	r3, [r3, r2]
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b22      	cmp	r3, #34	@ 0x22
 800501c:	d101      	bne.n	8005022 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 800501e:	4b34      	ldr	r3, [pc, #208]	@ (80050f0 <I2C_Mem_ISR_DMA+0x254>)
 8005020:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005026:	b29b      	uxth	r3, r3
 8005028:	2bff      	cmp	r3, #255	@ 0xff
 800502a:	d911      	bls.n	8005050 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	22ff      	movs	r2, #255	@ 0xff
 8005030:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005036:	b299      	uxth	r1, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503c:	b2da      	uxtb	r2, r3
 800503e:	2380      	movs	r3, #128	@ 0x80
 8005040:	045c      	lsls	r4, r3, #17
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	9300      	str	r3, [sp, #0]
 8005048:	0023      	movs	r3, r4
 800504a:	f001 f9a9 	bl	80063a0 <I2C_TransferConfig>
 800504e:	e012      	b.n	8005076 <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005054:	b29a      	uxth	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505e:	b299      	uxth	r1, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005064:	b2da      	uxtb	r2, r3
 8005066:	2380      	movs	r3, #128	@ 0x80
 8005068:	049c      	lsls	r4, r3, #18
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	9300      	str	r3, [sp, #0]
 8005070:	0023      	movs	r3, r4
 8005072:	f001 f995 	bl	80063a0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800507a:	b29a      	uxth	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	b29a      	uxth	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2241      	movs	r2, #65	@ 0x41
 800508c:	5c9b      	ldrb	r3, [r3, r2]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	2b22      	cmp	r3, #34	@ 0x22
 8005092:	d109      	bne.n	80050a8 <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2180      	movs	r1, #128	@ 0x80
 80050a0:	0209      	lsls	r1, r1, #8
 80050a2:	430a      	orrs	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050a6:	e017      	b.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2180      	movs	r1, #128	@ 0x80
 80050b4:	01c9      	lsls	r1, r1, #7
 80050b6:	430a      	orrs	r2, r1
 80050b8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050ba:	e00d      	b.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	2220      	movs	r2, #32
 80050c0:	4013      	ands	r3, r2
 80050c2:	d009      	beq.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2220      	movs	r2, #32
 80050c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050ca:	d005      	beq.n	80050d8 <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	0011      	movs	r1, r2
 80050d2:	0018      	movs	r0, r3
 80050d4:	f000 fb06 	bl	80056e4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2240      	movs	r2, #64	@ 0x40
 80050dc:	2100      	movs	r1, #0
 80050de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	0018      	movs	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	b007      	add	sp, #28
 80050e8:	bd90      	pop	{r4, r7, pc}
 80050ea:	46c0      	nop			@ (mov r8, r8)
 80050ec:	80002000 	.word	0x80002000
 80050f0:	80002400 	.word	0x80002400

080050f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2240      	movs	r2, #64	@ 0x40
 800510e:	5c9b      	ldrb	r3, [r3, r2]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <I2C_Slave_ISR_DMA+0x24>
 8005114:	2302      	movs	r3, #2
 8005116:	e0ce      	b.n	80052b6 <I2C_Slave_ISR_DMA+0x1c2>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2240      	movs	r2, #64	@ 0x40
 800511c:	2101      	movs	r1, #1
 800511e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2220      	movs	r2, #32
 8005124:	4013      	ands	r3, r2
 8005126:	d00a      	beq.n	800513e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800512e:	d006      	beq.n	800513e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	0011      	movs	r1, r2
 8005136:	0018      	movs	r0, r3
 8005138:	f000 fba2 	bl	8005880 <I2C_ITSlaveCplt>
 800513c:	e0b6      	b.n	80052ac <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2210      	movs	r2, #16
 8005142:	4013      	ands	r3, r2
 8005144:	d100      	bne.n	8005148 <I2C_Slave_ISR_DMA+0x54>
 8005146:	e0a3      	b.n	8005290 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2210      	movs	r2, #16
 800514c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800514e:	d100      	bne.n	8005152 <I2C_Slave_ISR_DMA+0x5e>
 8005150:	e09e      	b.n	8005290 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	2380      	movs	r3, #128	@ 0x80
 8005156:	01db      	lsls	r3, r3, #7
 8005158:	4013      	ands	r3, r2
 800515a:	d105      	bne.n	8005168 <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	2380      	movs	r3, #128	@ 0x80
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005164:	d100      	bne.n	8005168 <I2C_Slave_ISR_DMA+0x74>
 8005166:	e08c      	b.n	8005282 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00c      	beq.n	800518a <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	2380      	movs	r3, #128	@ 0x80
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	4013      	ands	r3, r2
 8005178:	d007      	beq.n	800518a <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	01db      	lsls	r3, r3, #7
 8005198:	4013      	ands	r3, r2
 800519a:	d007      	beq.n	80051ac <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 80051a8:	2301      	movs	r3, #1
 80051aa:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d12d      	bne.n	800520e <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2241      	movs	r2, #65	@ 0x41
 80051b6:	5c9b      	ldrb	r3, [r3, r2]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b28      	cmp	r3, #40	@ 0x28
 80051bc:	d10b      	bne.n	80051d6 <I2C_Slave_ISR_DMA+0xe2>
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	049b      	lsls	r3, r3, #18
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d106      	bne.n	80051d6 <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	0011      	movs	r1, r2
 80051ce:	0018      	movs	r0, r3
 80051d0:	f000 fcde 	bl	8005b90 <I2C_ITListenCplt>
 80051d4:	e054      	b.n	8005280 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2241      	movs	r2, #65	@ 0x41
 80051da:	5c9b      	ldrb	r3, [r3, r2]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b29      	cmp	r3, #41	@ 0x29
 80051e0:	d110      	bne.n	8005204 <I2C_Slave_ISR_DMA+0x110>
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4a36      	ldr	r2, [pc, #216]	@ (80052c0 <I2C_Slave_ISR_DMA+0x1cc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00c      	beq.n	8005204 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2210      	movs	r2, #16
 80051f0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 fe4e 	bl	8005e96 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f000 fa0d 	bl	800561c <I2C_ITSlaveSeqCplt>
 8005202:	e03d      	b.n	8005280 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2210      	movs	r2, #16
 800520a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800520c:	e03e      	b.n	800528c <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2210      	movs	r2, #16
 8005214:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	2204      	movs	r2, #4
 800521c:	431a      	orrs	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8005222:	2317      	movs	r3, #23
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	2141      	movs	r1, #65	@ 0x41
 800522a:	5c52      	ldrb	r2, [r2, r1]
 800522c:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <I2C_Slave_ISR_DMA+0x14a>
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	2380      	movs	r3, #128	@ 0x80
 8005238:	045b      	lsls	r3, r3, #17
 800523a:	429a      	cmp	r2, r3
 800523c:	d126      	bne.n	800528c <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800523e:	2217      	movs	r2, #23
 8005240:	18bb      	adds	r3, r7, r2
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b21      	cmp	r3, #33	@ 0x21
 8005246:	d003      	beq.n	8005250 <I2C_Slave_ISR_DMA+0x15c>
 8005248:	18bb      	adds	r3, r7, r2
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b29      	cmp	r3, #41	@ 0x29
 800524e:	d103      	bne.n	8005258 <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2221      	movs	r2, #33	@ 0x21
 8005254:	631a      	str	r2, [r3, #48]	@ 0x30
 8005256:	e00b      	b.n	8005270 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005258:	2217      	movs	r2, #23
 800525a:	18bb      	adds	r3, r7, r2
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	2b22      	cmp	r3, #34	@ 0x22
 8005260:	d003      	beq.n	800526a <I2C_Slave_ISR_DMA+0x176>
 8005262:	18bb      	adds	r3, r7, r2
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	2b2a      	cmp	r3, #42	@ 0x2a
 8005268:	d102      	bne.n	8005270 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2222      	movs	r2, #34	@ 0x22
 800526e:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	0011      	movs	r1, r2
 8005278:	0018      	movs	r0, r3
 800527a:	f000 fce1 	bl	8005c40 <I2C_ITError>
      if (treatdmanack == 1U)
 800527e:	e005      	b.n	800528c <I2C_Slave_ISR_DMA+0x198>
 8005280:	e004      	b.n	800528c <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2210      	movs	r2, #16
 8005288:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800528a:	e00f      	b.n	80052ac <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 800528c:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800528e:	e00d      	b.n	80052ac <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2208      	movs	r2, #8
 8005294:	4013      	ands	r3, r2
 8005296:	d009      	beq.n	80052ac <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2208      	movs	r2, #8
 800529c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800529e:	d005      	beq.n	80052ac <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	0011      	movs	r1, r2
 80052a6:	0018      	movs	r0, r3
 80052a8:	f000 f8d2 	bl	8005450 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2240      	movs	r2, #64	@ 0x40
 80052b0:	2100      	movs	r1, #0
 80052b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b008      	add	sp, #32
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	46c0      	nop			@ (mov r8, r8)
 80052c0:	ffff0000 	.word	0xffff0000

080052c4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80052c4:	b5b0      	push	{r4, r5, r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	000c      	movs	r4, r1
 80052ce:	0010      	movs	r0, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	250a      	movs	r5, #10
 80052d4:	197b      	adds	r3, r7, r5
 80052d6:	1c22      	adds	r2, r4, #0
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	2308      	movs	r3, #8
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	1c02      	adds	r2, r0, #0
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	1dbb      	adds	r3, r7, #6
 80052e4:	1c0a      	adds	r2, r1, #0
 80052e6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80052e8:	1dbb      	adds	r3, r7, #6
 80052ea:	881b      	ldrh	r3, [r3, #0]
 80052ec:	b2da      	uxtb	r2, r3
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	045c      	lsls	r4, r3, #17
 80052f2:	197b      	adds	r3, r7, r5
 80052f4:	8819      	ldrh	r1, [r3, #0]
 80052f6:	68f8      	ldr	r0, [r7, #12]
 80052f8:	4b23      	ldr	r3, [pc, #140]	@ (8005388 <I2C_RequestMemoryWrite+0xc4>)
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	0023      	movs	r3, r4
 80052fe:	f001 f84f 	bl	80063a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005304:	6a39      	ldr	r1, [r7, #32]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	0018      	movs	r0, r3
 800530a:	f000 fec7 	bl	800609c <I2C_WaitOnTXISFlagUntilTimeout>
 800530e:	1e03      	subs	r3, r0, #0
 8005310:	d001      	beq.n	8005316 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e033      	b.n	800537e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005316:	1dbb      	adds	r3, r7, #6
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d107      	bne.n	800532e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800531e:	2308      	movs	r3, #8
 8005320:	18fb      	adds	r3, r7, r3
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b2da      	uxtb	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	629a      	str	r2, [r3, #40]	@ 0x28
 800532c:	e019      	b.n	8005362 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800532e:	2308      	movs	r3, #8
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	0a1b      	lsrs	r3, r3, #8
 8005336:	b29b      	uxth	r3, r3
 8005338:	b2da      	uxtb	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005342:	6a39      	ldr	r1, [r7, #32]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	0018      	movs	r0, r3
 8005348:	f000 fea8 	bl	800609c <I2C_WaitOnTXISFlagUntilTimeout>
 800534c:	1e03      	subs	r3, r0, #0
 800534e:	d001      	beq.n	8005354 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e014      	b.n	800537e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005354:	2308      	movs	r3, #8
 8005356:	18fb      	adds	r3, r7, r3
 8005358:	881b      	ldrh	r3, [r3, #0]
 800535a:	b2da      	uxtb	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005362:	6a3a      	ldr	r2, [r7, #32]
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	0013      	movs	r3, r2
 800536c:	2200      	movs	r2, #0
 800536e:	2180      	movs	r1, #128	@ 0x80
 8005370:	f000 fe3c 	bl	8005fec <I2C_WaitOnFlagUntilTimeout>
 8005374:	1e03      	subs	r3, r0, #0
 8005376:	d001      	beq.n	800537c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	0018      	movs	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	b004      	add	sp, #16
 8005384:	bdb0      	pop	{r4, r5, r7, pc}
 8005386:	46c0      	nop			@ (mov r8, r8)
 8005388:	80002000 	.word	0x80002000

0800538c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af02      	add	r7, sp, #8
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	000c      	movs	r4, r1
 8005396:	0010      	movs	r0, r2
 8005398:	0019      	movs	r1, r3
 800539a:	250a      	movs	r5, #10
 800539c:	197b      	adds	r3, r7, r5
 800539e:	1c22      	adds	r2, r4, #0
 80053a0:	801a      	strh	r2, [r3, #0]
 80053a2:	2308      	movs	r3, #8
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	1c02      	adds	r2, r0, #0
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	1dbb      	adds	r3, r7, #6
 80053ac:	1c0a      	adds	r2, r1, #0
 80053ae:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80053b0:	1dbb      	adds	r3, r7, #6
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b2da      	uxtb	r2, r3
 80053b6:	197b      	adds	r3, r7, r5
 80053b8:	8819      	ldrh	r1, [r3, #0]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	4b23      	ldr	r3, [pc, #140]	@ (800544c <I2C_RequestMemoryRead+0xc0>)
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	f000 ffed 	bl	80063a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c8:	6a39      	ldr	r1, [r7, #32]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 fe65 	bl	800609c <I2C_WaitOnTXISFlagUntilTimeout>
 80053d2:	1e03      	subs	r3, r0, #0
 80053d4:	d001      	beq.n	80053da <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e033      	b.n	8005442 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053da:	1dbb      	adds	r3, r7, #6
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d107      	bne.n	80053f2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053e2:	2308      	movs	r3, #8
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	881b      	ldrh	r3, [r3, #0]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80053f0:	e019      	b.n	8005426 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80053f2:	2308      	movs	r3, #8
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	0a1b      	lsrs	r3, r3, #8
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005406:	6a39      	ldr	r1, [r7, #32]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	0018      	movs	r0, r3
 800540c:	f000 fe46 	bl	800609c <I2C_WaitOnTXISFlagUntilTimeout>
 8005410:	1e03      	subs	r3, r0, #0
 8005412:	d001      	beq.n	8005418 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e014      	b.n	8005442 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005418:	2308      	movs	r3, #8
 800541a:	18fb      	adds	r3, r7, r3
 800541c:	881b      	ldrh	r3, [r3, #0]
 800541e:	b2da      	uxtb	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005426:	6a3a      	ldr	r2, [r7, #32]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	0013      	movs	r3, r2
 8005430:	2200      	movs	r2, #0
 8005432:	2140      	movs	r1, #64	@ 0x40
 8005434:	f000 fdda 	bl	8005fec <I2C_WaitOnFlagUntilTimeout>
 8005438:	1e03      	subs	r3, r0, #0
 800543a:	d001      	beq.n	8005440 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e000      	b.n	8005442 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	0018      	movs	r0, r3
 8005444:	46bd      	mov	sp, r7
 8005446:	b004      	add	sp, #16
 8005448:	bdb0      	pop	{r4, r5, r7, pc}
 800544a:	46c0      	nop			@ (mov r8, r8)
 800544c:	80002000 	.word	0x80002000

08005450 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005450:	b5b0      	push	{r4, r5, r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2241      	movs	r2, #65	@ 0x41
 800545e:	5c9b      	ldrb	r3, [r3, r2]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	001a      	movs	r2, r3
 8005464:	2328      	movs	r3, #40	@ 0x28
 8005466:	4013      	ands	r3, r2
 8005468:	2b28      	cmp	r3, #40	@ 0x28
 800546a:	d000      	beq.n	800546e <I2C_ITAddrCplt+0x1e>
 800546c:	e088      	b.n	8005580 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	0c1b      	lsrs	r3, r3, #16
 8005476:	b2da      	uxtb	r2, r3
 8005478:	250f      	movs	r5, #15
 800547a:	197b      	adds	r3, r7, r5
 800547c:	2101      	movs	r1, #1
 800547e:	400a      	ands	r2, r1
 8005480:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	0c1b      	lsrs	r3, r3, #16
 800548a:	b29a      	uxth	r2, r3
 800548c:	200c      	movs	r0, #12
 800548e:	183b      	adds	r3, r7, r0
 8005490:	21fe      	movs	r1, #254	@ 0xfe
 8005492:	400a      	ands	r2, r1
 8005494:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	b29a      	uxth	r2, r3
 800549e:	240a      	movs	r4, #10
 80054a0:	193b      	adds	r3, r7, r4
 80054a2:	0592      	lsls	r2, r2, #22
 80054a4:	0d92      	lsrs	r2, r2, #22
 80054a6:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	2308      	movs	r3, #8
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	21fe      	movs	r1, #254	@ 0xfe
 80054b6:	400a      	ands	r2, r1
 80054b8:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d148      	bne.n	8005554 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80054c2:	0021      	movs	r1, r4
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	881b      	ldrh	r3, [r3, #0]
 80054c8:	09db      	lsrs	r3, r3, #7
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	183b      	adds	r3, r7, r0
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	4053      	eors	r3, r2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	001a      	movs	r2, r3
 80054d6:	2306      	movs	r3, #6
 80054d8:	4013      	ands	r3, r2
 80054da:	d120      	bne.n	800551e <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80054dc:	183b      	adds	r3, r7, r0
 80054de:	187a      	adds	r2, r7, r1
 80054e0:	8812      	ldrh	r2, [r2, #0]
 80054e2:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d14c      	bne.n	8005590 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2208      	movs	r2, #8
 8005502:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2240      	movs	r2, #64	@ 0x40
 8005508:	2100      	movs	r1, #0
 800550a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800550c:	183b      	adds	r3, r7, r0
 800550e:	881a      	ldrh	r2, [r3, #0]
 8005510:	197b      	adds	r3, r7, r5
 8005512:	7819      	ldrb	r1, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	0018      	movs	r0, r3
 8005518:	f7ff fa93 	bl	8004a42 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800551c:	e038      	b.n	8005590 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800551e:	240c      	movs	r4, #12
 8005520:	193b      	adds	r3, r7, r4
 8005522:	2208      	movs	r2, #8
 8005524:	18ba      	adds	r2, r7, r2
 8005526:	8812      	ldrh	r2, [r2, #0]
 8005528:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800552a:	2380      	movs	r3, #128	@ 0x80
 800552c:	021a      	lsls	r2, r3, #8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	0011      	movs	r1, r2
 8005532:	0018      	movs	r0, r3
 8005534:	f000 fff8 	bl	8006528 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2240      	movs	r2, #64	@ 0x40
 800553c:	2100      	movs	r1, #0
 800553e:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005540:	193b      	adds	r3, r7, r4
 8005542:	881a      	ldrh	r2, [r3, #0]
 8005544:	230f      	movs	r3, #15
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	7819      	ldrb	r1, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	0018      	movs	r0, r3
 800554e:	f7ff fa78 	bl	8004a42 <HAL_I2C_AddrCallback>
}
 8005552:	e01d      	b.n	8005590 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005554:	2380      	movs	r3, #128	@ 0x80
 8005556:	021a      	lsls	r2, r3, #8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	0011      	movs	r1, r2
 800555c:	0018      	movs	r0, r3
 800555e:	f000 ffe3 	bl	8006528 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2240      	movs	r2, #64	@ 0x40
 8005566:	2100      	movs	r1, #0
 8005568:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800556a:	230c      	movs	r3, #12
 800556c:	18fb      	adds	r3, r7, r3
 800556e:	881a      	ldrh	r2, [r3, #0]
 8005570:	230f      	movs	r3, #15
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	7819      	ldrb	r1, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	0018      	movs	r0, r3
 800557a:	f7ff fa62 	bl	8004a42 <HAL_I2C_AddrCallback>
}
 800557e:	e007      	b.n	8005590 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2208      	movs	r2, #8
 8005586:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2240      	movs	r2, #64	@ 0x40
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]
}
 8005590:	46c0      	nop			@ (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b004      	add	sp, #16
 8005596:	bdb0      	pop	{r4, r5, r7, pc}

08005598 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2242      	movs	r2, #66	@ 0x42
 80055a4:	2100      	movs	r1, #0
 80055a6:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2241      	movs	r2, #65	@ 0x41
 80055ac:	5c9b      	ldrb	r3, [r3, r2]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b21      	cmp	r3, #33	@ 0x21
 80055b2:	d117      	bne.n	80055e4 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2241      	movs	r2, #65	@ 0x41
 80055b8:	2120      	movs	r1, #32
 80055ba:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2211      	movs	r2, #17
 80055c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2101      	movs	r1, #1
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 ffab 	bl	8006528 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2240      	movs	r2, #64	@ 0x40
 80055d6:	2100      	movs	r1, #0
 80055d8:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	0018      	movs	r0, r3
 80055de:	f7ff fa10 	bl	8004a02 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055e2:	e016      	b.n	8005612 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2241      	movs	r2, #65	@ 0x41
 80055e8:	2120      	movs	r1, #32
 80055ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2212      	movs	r2, #18
 80055f0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2102      	movs	r1, #2
 80055fc:	0018      	movs	r0, r3
 80055fe:	f000 ff93 	bl	8006528 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2240      	movs	r2, #64	@ 0x40
 8005606:	2100      	movs	r1, #0
 8005608:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	0018      	movs	r0, r3
 800560e:	f7ff fa00 	bl	8004a12 <HAL_I2C_MasterRxCpltCallback>
}
 8005612:	46c0      	nop			@ (mov r8, r8)
 8005614:	46bd      	mov	sp, r7
 8005616:	b002      	add	sp, #8
 8005618:	bd80      	pop	{r7, pc}
	...

0800561c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2242      	movs	r2, #66	@ 0x42
 8005630:	2100      	movs	r1, #0
 8005632:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	2380      	movs	r3, #128	@ 0x80
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4013      	ands	r3, r2
 800563c:	d008      	beq.n	8005650 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4924      	ldr	r1, [pc, #144]	@ (80056dc <I2C_ITSlaveSeqCplt+0xc0>)
 800564a:	400a      	ands	r2, r1
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e00c      	b.n	800566a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005650:	68fa      	ldr	r2, [r7, #12]
 8005652:	2380      	movs	r3, #128	@ 0x80
 8005654:	021b      	lsls	r3, r3, #8
 8005656:	4013      	ands	r3, r2
 8005658:	d007      	beq.n	800566a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	491e      	ldr	r1, [pc, #120]	@ (80056e0 <I2C_ITSlaveSeqCplt+0xc4>)
 8005666:	400a      	ands	r2, r1
 8005668:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2241      	movs	r2, #65	@ 0x41
 800566e:	5c9b      	ldrb	r3, [r3, r2]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b29      	cmp	r3, #41	@ 0x29
 8005674:	d114      	bne.n	80056a0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2241      	movs	r2, #65	@ 0x41
 800567a:	2128      	movs	r1, #40	@ 0x28
 800567c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2221      	movs	r2, #33	@ 0x21
 8005682:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2101      	movs	r1, #1
 8005688:	0018      	movs	r0, r3
 800568a:	f000 ff4d 	bl	8006528 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2240      	movs	r2, #64	@ 0x40
 8005692:	2100      	movs	r1, #0
 8005694:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0018      	movs	r0, r3
 800569a:	f7ff f9c2 	bl	8004a22 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800569e:	e019      	b.n	80056d4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2241      	movs	r2, #65	@ 0x41
 80056a4:	5c9b      	ldrb	r3, [r3, r2]
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80056aa:	d113      	bne.n	80056d4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2241      	movs	r2, #65	@ 0x41
 80056b0:	2128      	movs	r1, #40	@ 0x28
 80056b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2222      	movs	r2, #34	@ 0x22
 80056b8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2102      	movs	r1, #2
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 ff32 	bl	8006528 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2240      	movs	r2, #64	@ 0x40
 80056c8:	2100      	movs	r1, #0
 80056ca:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7ff f9af 	bl	8004a32 <HAL_I2C_SlaveRxCpltCallback>
}
 80056d4:	46c0      	nop			@ (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b004      	add	sp, #16
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	ffffbfff 	.word	0xffffbfff
 80056e0:	ffff7fff 	.word	0xffff7fff

080056e4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2220      	movs	r2, #32
 80056f8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2241      	movs	r2, #65	@ 0x41
 80056fe:	5c9b      	ldrb	r3, [r3, r2]
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b21      	cmp	r3, #33	@ 0x21
 8005704:	d108      	bne.n	8005718 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2101      	movs	r1, #1
 800570a:	0018      	movs	r0, r3
 800570c:	f000 ff0c 	bl	8006528 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2211      	movs	r2, #17
 8005714:	631a      	str	r2, [r3, #48]	@ 0x30
 8005716:	e00d      	b.n	8005734 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2241      	movs	r2, #65	@ 0x41
 800571c:	5c9b      	ldrb	r3, [r3, r2]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b22      	cmp	r3, #34	@ 0x22
 8005722:	d107      	bne.n	8005734 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2102      	movs	r1, #2
 8005728:	0018      	movs	r0, r3
 800572a:	f000 fefd 	bl	8006528 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2212      	movs	r2, #18
 8005732:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	494e      	ldr	r1, [pc, #312]	@ (8005878 <I2C_ITMasterCplt+0x194>)
 8005740:	400a      	ands	r2, r1
 8005742:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a4b      	ldr	r2, [pc, #300]	@ (800587c <I2C_ITMasterCplt+0x198>)
 800574e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	2210      	movs	r2, #16
 8005754:	4013      	ands	r3, r2
 8005756:	d009      	beq.n	800576c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2210      	movs	r2, #16
 800575e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005764:	2204      	movs	r2, #4
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2241      	movs	r2, #65	@ 0x41
 8005770:	5c9b      	ldrb	r3, [r3, r2]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b60      	cmp	r3, #96	@ 0x60
 8005776:	d109      	bne.n	800578c <I2C_ITMasterCplt+0xa8>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2204      	movs	r2, #4
 800577c:	4013      	ands	r3, r2
 800577e:	d005      	beq.n	800578c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005786:	b2db      	uxtb	r3, r3
 8005788:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800578a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	0018      	movs	r0, r3
 8005790:	f000 fb81 	bl	8005e96 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005798:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2241      	movs	r2, #65	@ 0x41
 800579e:	5c9b      	ldrb	r3, [r3, r2]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b60      	cmp	r3, #96	@ 0x60
 80057a4:	d002      	beq.n	80057ac <I2C_ITMasterCplt+0xc8>
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0011      	movs	r1, r2
 80057b4:	0018      	movs	r0, r3
 80057b6:	f000 fa43 	bl	8005c40 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80057ba:	e058      	b.n	800586e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2241      	movs	r2, #65	@ 0x41
 80057c0:	5c9b      	ldrb	r3, [r3, r2]
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	2b21      	cmp	r3, #33	@ 0x21
 80057c6:	d126      	bne.n	8005816 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2241      	movs	r2, #65	@ 0x41
 80057cc:	2120      	movs	r1, #32
 80057ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2242      	movs	r2, #66	@ 0x42
 80057da:	5c9b      	ldrb	r3, [r3, r2]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b40      	cmp	r3, #64	@ 0x40
 80057e0:	d10c      	bne.n	80057fc <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2242      	movs	r2, #66	@ 0x42
 80057e6:	2100      	movs	r1, #0
 80057e8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2240      	movs	r2, #64	@ 0x40
 80057ee:	2100      	movs	r1, #0
 80057f0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f7ff f93c 	bl	8004a72 <HAL_I2C_MemTxCpltCallback>
}
 80057fa:	e038      	b.n	800586e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2242      	movs	r2, #66	@ 0x42
 8005800:	2100      	movs	r1, #0
 8005802:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2240      	movs	r2, #64	@ 0x40
 8005808:	2100      	movs	r1, #0
 800580a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	0018      	movs	r0, r3
 8005810:	f7ff f8f7 	bl	8004a02 <HAL_I2C_MasterTxCpltCallback>
}
 8005814:	e02b      	b.n	800586e <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2241      	movs	r2, #65	@ 0x41
 800581a:	5c9b      	ldrb	r3, [r3, r2]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b22      	cmp	r3, #34	@ 0x22
 8005820:	d125      	bne.n	800586e <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2241      	movs	r2, #65	@ 0x41
 8005826:	2120      	movs	r1, #32
 8005828:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2242      	movs	r2, #66	@ 0x42
 8005834:	5c9b      	ldrb	r3, [r3, r2]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b40      	cmp	r3, #64	@ 0x40
 800583a:	d10c      	bne.n	8005856 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2242      	movs	r2, #66	@ 0x42
 8005840:	2100      	movs	r1, #0
 8005842:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2240      	movs	r2, #64	@ 0x40
 8005848:	2100      	movs	r1, #0
 800584a:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	0018      	movs	r0, r3
 8005850:	f7fc feaa 	bl	80025a8 <HAL_I2C_MemRxCpltCallback>
}
 8005854:	e00b      	b.n	800586e <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2242      	movs	r2, #66	@ 0x42
 800585a:	2100      	movs	r1, #0
 800585c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2240      	movs	r2, #64	@ 0x40
 8005862:	2100      	movs	r1, #0
 8005864:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	0018      	movs	r0, r3
 800586a:	f7ff f8d2 	bl	8004a12 <HAL_I2C_MasterRxCpltCallback>
}
 800586e:	46c0      	nop			@ (mov r8, r8)
 8005870:	46bd      	mov	sp, r7
 8005872:	b006      	add	sp, #24
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	fe00e800 	.word	0xfe00e800
 800587c:	ffff0000 	.word	0xffff0000

08005880 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800589c:	200b      	movs	r0, #11
 800589e:	183b      	adds	r3, r7, r0
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	2141      	movs	r1, #65	@ 0x41
 80058a4:	5c52      	ldrb	r2, [r2, r1]
 80058a6:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2220      	movs	r2, #32
 80058ae:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058b0:	183b      	adds	r3, r7, r0
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b21      	cmp	r3, #33	@ 0x21
 80058b6:	d003      	beq.n	80058c0 <I2C_ITSlaveCplt+0x40>
 80058b8:	183b      	adds	r3, r7, r0
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b29      	cmp	r3, #41	@ 0x29
 80058be:	d109      	bne.n	80058d4 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80058c0:	4aac      	ldr	r2, [pc, #688]	@ (8005b74 <I2C_ITSlaveCplt+0x2f4>)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	0011      	movs	r1, r2
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 fe2e 	bl	8006528 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2221      	movs	r2, #33	@ 0x21
 80058d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80058d2:	e020      	b.n	8005916 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80058d4:	220b      	movs	r2, #11
 80058d6:	18bb      	adds	r3, r7, r2
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b22      	cmp	r3, #34	@ 0x22
 80058dc:	d003      	beq.n	80058e6 <I2C_ITSlaveCplt+0x66>
 80058de:	18bb      	adds	r3, r7, r2
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80058e4:	d109      	bne.n	80058fa <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80058e6:	4aa4      	ldr	r2, [pc, #656]	@ (8005b78 <I2C_ITSlaveCplt+0x2f8>)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	0011      	movs	r1, r2
 80058ec:	0018      	movs	r0, r3
 80058ee:	f000 fe1b 	bl	8006528 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2222      	movs	r2, #34	@ 0x22
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80058f8:	e00d      	b.n	8005916 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80058fa:	230b      	movs	r3, #11
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b28      	cmp	r3, #40	@ 0x28
 8005902:	d108      	bne.n	8005916 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005904:	4a9d      	ldr	r2, [pc, #628]	@ (8005b7c <I2C_ITSlaveCplt+0x2fc>)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	0011      	movs	r1, r2
 800590a:	0018      	movs	r0, r3
 800590c:	f000 fe0c 	bl	8006528 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2180      	movs	r1, #128	@ 0x80
 8005922:	0209      	lsls	r1, r1, #8
 8005924:	430a      	orrs	r2, r1
 8005926:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4993      	ldr	r1, [pc, #588]	@ (8005b80 <I2C_ITSlaveCplt+0x300>)
 8005934:	400a      	ands	r2, r1
 8005936:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	0018      	movs	r0, r3
 800593c:	f000 faab 	bl	8005e96 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	2380      	movs	r3, #128	@ 0x80
 8005944:	01db      	lsls	r3, r3, #7
 8005946:	4013      	ands	r3, r2
 8005948:	d013      	beq.n	8005972 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	498b      	ldr	r1, [pc, #556]	@ (8005b84 <I2C_ITSlaveCplt+0x304>)
 8005956:	400a      	ands	r2, r1
 8005958:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800595e:	2b00      	cmp	r3, #0
 8005960:	d01f      	beq.n	80059a2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005970:	e017      	b.n	80059a2 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	2380      	movs	r3, #128	@ 0x80
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	4013      	ands	r3, r2
 800597a:	d012      	beq.n	80059a2 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4980      	ldr	r1, [pc, #512]	@ (8005b88 <I2C_ITSlaveCplt+0x308>)
 8005988:	400a      	ands	r2, r1
 800598a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	b29a      	uxth	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2204      	movs	r2, #4
 80059a6:	4013      	ands	r3, r2
 80059a8:	d020      	beq.n	80059ec <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2204      	movs	r2, #4
 80059ae:	4393      	bics	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d6:	3b01      	subs	r3, #1
 80059d8:	b29a      	uxth	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	3b01      	subs	r3, #1
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	2204      	movs	r2, #4
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2210      	movs	r2, #16
 8005a06:	4013      	ands	r3, r2
 8005a08:	d04f      	beq.n	8005aaa <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2210      	movs	r2, #16
 8005a0e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005a10:	d04b      	beq.n	8005aaa <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d12d      	bne.n	8005a78 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2241      	movs	r2, #65	@ 0x41
 8005a20:	5c9b      	ldrb	r3, [r3, r2]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b28      	cmp	r3, #40	@ 0x28
 8005a26:	d10b      	bne.n	8005a40 <I2C_ITSlaveCplt+0x1c0>
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	2380      	movs	r3, #128	@ 0x80
 8005a2c:	049b      	lsls	r3, r3, #18
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d106      	bne.n	8005a40 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	0011      	movs	r1, r2
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 f8a9 	bl	8005b90 <I2C_ITListenCplt>
 8005a3e:	e034      	b.n	8005aaa <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2241      	movs	r2, #65	@ 0x41
 8005a44:	5c9b      	ldrb	r3, [r3, r2]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b29      	cmp	r3, #41	@ 0x29
 8005a4a:	d110      	bne.n	8005a6e <I2C_ITSlaveCplt+0x1ee>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4a4f      	ldr	r2, [pc, #316]	@ (8005b8c <I2C_ITSlaveCplt+0x30c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d00c      	beq.n	8005a6e <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2210      	movs	r2, #16
 8005a5a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	0018      	movs	r0, r3
 8005a60:	f000 fa19 	bl	8005e96 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f7ff fdd8 	bl	800561c <I2C_ITSlaveSeqCplt>
 8005a6c:	e01d      	b.n	8005aaa <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2210      	movs	r2, #16
 8005a74:	61da      	str	r2, [r3, #28]
 8005a76:	e018      	b.n	8005aaa <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2210      	movs	r2, #16
 8005a7e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a84:	2204      	movs	r2, #4
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <I2C_ITSlaveCplt+0x21c>
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	2380      	movs	r3, #128	@ 0x80
 8005a96:	045b      	lsls	r3, r3, #17
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d106      	bne.n	8005aaa <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	0011      	movs	r1, r2
 8005aa4:	0018      	movs	r0, r3
 8005aa6:	f000 f8cb 	bl	8005c40 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2242      	movs	r2, #66	@ 0x42
 8005aae:	2100      	movs	r1, #0
 8005ab0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d013      	beq.n	8005ae8 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	0011      	movs	r1, r2
 8005ac8:	0018      	movs	r0, r3
 8005aca:	f000 f8b9 	bl	8005c40 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2241      	movs	r2, #65	@ 0x41
 8005ad2:	5c9b      	ldrb	r3, [r3, r2]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b28      	cmp	r3, #40	@ 0x28
 8005ad8:	d147      	bne.n	8005b6a <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	0011      	movs	r1, r2
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f000 f855 	bl	8005b90 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ae6:	e040      	b.n	8005b6a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aec:	4a27      	ldr	r2, [pc, #156]	@ (8005b8c <I2C_ITSlaveCplt+0x30c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d016      	beq.n	8005b20 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7ff fd91 	bl	800561c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a23      	ldr	r2, [pc, #140]	@ (8005b8c <I2C_ITSlaveCplt+0x30c>)
 8005afe:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2241      	movs	r2, #65	@ 0x41
 8005b04:	2120      	movs	r1, #32
 8005b06:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2240      	movs	r2, #64	@ 0x40
 8005b12:	2100      	movs	r1, #0
 8005b14:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f7fe ffa2 	bl	8004a62 <HAL_I2C_ListenCpltCallback>
}
 8005b1e:	e024      	b.n	8005b6a <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2241      	movs	r2, #65	@ 0x41
 8005b24:	5c9b      	ldrb	r3, [r3, r2]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b22      	cmp	r3, #34	@ 0x22
 8005b2a:	d10f      	bne.n	8005b4c <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2241      	movs	r2, #65	@ 0x41
 8005b30:	2120      	movs	r1, #32
 8005b32:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2240      	movs	r2, #64	@ 0x40
 8005b3e:	2100      	movs	r1, #0
 8005b40:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	0018      	movs	r0, r3
 8005b46:	f7fe ff74 	bl	8004a32 <HAL_I2C_SlaveRxCpltCallback>
}
 8005b4a:	e00e      	b.n	8005b6a <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2241      	movs	r2, #65	@ 0x41
 8005b50:	2120      	movs	r1, #32
 8005b52:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2240      	movs	r2, #64	@ 0x40
 8005b5e:	2100      	movs	r1, #0
 8005b60:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f7fe ff5c 	bl	8004a22 <HAL_I2C_SlaveTxCpltCallback>
}
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b006      	add	sp, #24
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			@ (mov r8, r8)
 8005b74:	00008001 	.word	0x00008001
 8005b78:	00008002 	.word	0x00008002
 8005b7c:	00008003 	.word	0x00008003
 8005b80:	fe00e800 	.word	0xfe00e800
 8005b84:	ffffbfff 	.word	0xffffbfff
 8005b88:	ffff7fff 	.word	0xffff7fff
 8005b8c:	ffff0000 	.word	0xffff0000

08005b90 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a26      	ldr	r2, [pc, #152]	@ (8005c38 <I2C_ITListenCplt+0xa8>)
 8005b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2241      	movs	r2, #65	@ 0x41
 8005baa:	2120      	movs	r1, #32
 8005bac:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2242      	movs	r2, #66	@ 0x42
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d012      	beq.n	8005c0a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c02:	2204      	movs	r2, #4
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8005c3c <I2C_ITListenCplt+0xac>)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0011      	movs	r1, r2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f000 fc89 	bl	8006528 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2210      	movs	r2, #16
 8005c1c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2240      	movs	r2, #64	@ 0x40
 8005c22:	2100      	movs	r1, #0
 8005c24:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	0018      	movs	r0, r3
 8005c2a:	f7fe ff1a 	bl	8004a62 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005c2e:	46c0      	nop			@ (mov r8, r8)
 8005c30:	46bd      	mov	sp, r7
 8005c32:	b002      	add	sp, #8
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	46c0      	nop			@ (mov r8, r8)
 8005c38:	ffff0000 	.word	0xffff0000
 8005c3c:	00008003 	.word	0x00008003

08005c40 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005c4a:	200f      	movs	r0, #15
 8005c4c:	183b      	adds	r3, r7, r0
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	2141      	movs	r1, #65	@ 0x41
 8005c52:	5c52      	ldrb	r2, [r2, r1]
 8005c54:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2242      	movs	r2, #66	@ 0x42
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a72      	ldr	r2, [pc, #456]	@ (8005e2c <I2C_ITError+0x1ec>)
 8005c62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005c76:	183b      	adds	r3, r7, r0
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b28      	cmp	r3, #40	@ 0x28
 8005c7c:	d007      	beq.n	8005c8e <I2C_ITError+0x4e>
 8005c7e:	183b      	adds	r3, r7, r0
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	2b29      	cmp	r3, #41	@ 0x29
 8005c84:	d003      	beq.n	8005c8e <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005c86:	183b      	adds	r3, r7, r0
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c8c:	d10c      	bne.n	8005ca8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2103      	movs	r1, #3
 8005c92:	0018      	movs	r0, r3
 8005c94:	f000 fc48 	bl	8006528 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2241      	movs	r2, #65	@ 0x41
 8005c9c:	2128      	movs	r1, #40	@ 0x28
 8005c9e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a63      	ldr	r2, [pc, #396]	@ (8005e30 <I2C_ITError+0x1f0>)
 8005ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8005ca6:	e032      	b.n	8005d0e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005ca8:	4a62      	ldr	r2, [pc, #392]	@ (8005e34 <I2C_ITError+0x1f4>)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	0011      	movs	r1, r2
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 fc3a 	bl	8006528 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	0018      	movs	r0, r3
 8005cb8:	f000 f8ed 	bl	8005e96 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2241      	movs	r2, #65	@ 0x41
 8005cc0:	5c9b      	ldrb	r3, [r3, r2]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b60      	cmp	r3, #96	@ 0x60
 8005cc6:	d01f      	beq.n	8005d08 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2241      	movs	r2, #65	@ 0x41
 8005ccc:	2120      	movs	r1, #32
 8005cce:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	4013      	ands	r3, r2
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d114      	bne.n	8005d08 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2210      	movs	r2, #16
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d109      	bne.n	8005d00 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cf8:	2204      	movs	r2, #4
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2220      	movs	r2, #32
 8005d06:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d03b      	beq.n	8005d94 <I2C_ITError+0x154>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b11      	cmp	r3, #17
 8005d20:	d002      	beq.n	8005d28 <I2C_ITError+0xe8>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2b21      	cmp	r3, #33	@ 0x21
 8005d26:	d135      	bne.n	8005d94 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	2380      	movs	r3, #128	@ 0x80
 8005d30:	01db      	lsls	r3, r3, #7
 8005d32:	401a      	ands	r2, r3
 8005d34:	2380      	movs	r3, #128	@ 0x80
 8005d36:	01db      	lsls	r3, r3, #7
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d107      	bne.n	8005d4c <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	493c      	ldr	r1, [pc, #240]	@ (8005e38 <I2C_ITError+0x1f8>)
 8005d48:	400a      	ands	r2, r1
 8005d4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7fd feb3 	bl	8003abc <HAL_DMA_GetState>
 8005d56:	0003      	movs	r3, r0
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d016      	beq.n	8005d8a <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d60:	4a36      	ldr	r2, [pc, #216]	@ (8005e3c <I2C_ITError+0x1fc>)
 8005d62:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2240      	movs	r2, #64	@ 0x40
 8005d68:	2100      	movs	r1, #0
 8005d6a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7fd fd87 	bl	8003884 <HAL_DMA_Abort_IT>
 8005d76:	1e03      	subs	r3, r0, #0
 8005d78:	d051      	beq.n	8005e1e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d84:	0018      	movs	r0, r3
 8005d86:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d88:	e049      	b.n	8005e1e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	0018      	movs	r0, r3
 8005d8e:	f000 f859 	bl	8005e44 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d92:	e044      	b.n	8005e1e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d03b      	beq.n	8005e14 <I2C_ITError+0x1d4>
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b12      	cmp	r3, #18
 8005da0:	d002      	beq.n	8005da8 <I2C_ITError+0x168>
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b22      	cmp	r3, #34	@ 0x22
 8005da6:	d135      	bne.n	8005e14 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	2380      	movs	r3, #128	@ 0x80
 8005db0:	021b      	lsls	r3, r3, #8
 8005db2:	401a      	ands	r2, r3
 8005db4:	2380      	movs	r3, #128	@ 0x80
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d107      	bne.n	8005dcc <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	491e      	ldr	r1, [pc, #120]	@ (8005e40 <I2C_ITError+0x200>)
 8005dc8:	400a      	ands	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7fd fe73 	bl	8003abc <HAL_DMA_GetState>
 8005dd6:	0003      	movs	r3, r0
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d016      	beq.n	8005e0a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de0:	4a16      	ldr	r2, [pc, #88]	@ (8005e3c <I2C_ITError+0x1fc>)
 8005de2:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2240      	movs	r2, #64	@ 0x40
 8005de8:	2100      	movs	r1, #0
 8005dea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df0:	0018      	movs	r0, r3
 8005df2:	f7fd fd47 	bl	8003884 <HAL_DMA_Abort_IT>
 8005df6:	1e03      	subs	r3, r0, #0
 8005df8:	d013      	beq.n	8005e22 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e04:	0018      	movs	r0, r3
 8005e06:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e08:	e00b      	b.n	8005e22 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 f819 	bl	8005e44 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e12:	e006      	b.n	8005e22 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	0018      	movs	r0, r3
 8005e18:	f000 f814 	bl	8005e44 <I2C_TreatErrorCallback>
  }
}
 8005e1c:	e002      	b.n	8005e24 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005e1e:	46c0      	nop			@ (mov r8, r8)
 8005e20:	e000      	b.n	8005e24 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005e22:	46c0      	nop			@ (mov r8, r8)
}
 8005e24:	46c0      	nop			@ (mov r8, r8)
 8005e26:	46bd      	mov	sp, r7
 8005e28:	b004      	add	sp, #16
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	ffff0000 	.word	0xffff0000
 8005e30:	08004aa5 	.word	0x08004aa5
 8005e34:	00008003 	.word	0x00008003
 8005e38:	ffffbfff 	.word	0xffffbfff
 8005e3c:	08005faf 	.word	0x08005faf
 8005e40:	ffff7fff 	.word	0xffff7fff

08005e44 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2241      	movs	r2, #65	@ 0x41
 8005e50:	5c9b      	ldrb	r3, [r3, r2]
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b60      	cmp	r3, #96	@ 0x60
 8005e56:	d10f      	bne.n	8005e78 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2241      	movs	r2, #65	@ 0x41
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2240      	movs	r2, #64	@ 0x40
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	0018      	movs	r0, r3
 8005e72:	f7fe fe0e 	bl	8004a92 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e76:	e00a      	b.n	8005e8e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2240      	movs	r2, #64	@ 0x40
 8005e82:	2100      	movs	r1, #0
 8005e84:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7fe fdfa 	bl	8004a82 <HAL_I2C_ErrorCallback>
}
 8005e8e:	46c0      	nop			@ (mov r8, r8)
 8005e90:	46bd      	mov	sp, r7
 8005e92:	b002      	add	sp, #8
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b082      	sub	sp, #8
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d103      	bne.n	8005eb4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d007      	beq.n	8005ed2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	699a      	ldr	r2, [r3, #24]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2101      	movs	r1, #1
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	619a      	str	r2, [r3, #24]
  }
}
 8005ed2:	46c0      	nop			@ (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b002      	add	sp, #8
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4920      	ldr	r1, [pc, #128]	@ (8005f78 <I2C_DMAMasterReceiveCplt+0x9c>)
 8005ef6:	400a      	ands	r2, r1
 8005ef8:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d105      	bne.n	8005f10 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2120      	movs	r1, #32
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f000 fa83 	bl	8006414 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005f0e:	e02e      	b.n	8005f6e <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005f18:	189a      	adds	r2, r3, r2
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	2bff      	cmp	r3, #255	@ 0xff
 8005f26:	d903      	bls.n	8005f30 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	22ff      	movs	r2, #255	@ 0xff
 8005f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f2e:	e004      	b.n	8005f3a <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3324      	adds	r3, #36	@ 0x24
 8005f44:	0019      	movs	r1, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f4a:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005f50:	f7fd fc12 	bl	8003778 <HAL_DMA_Start_IT>
 8005f54:	1e03      	subs	r3, r0, #0
 8005f56:	d005      	beq.n	8005f64 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2110      	movs	r1, #16
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f7ff fe6f 	bl	8005c40 <I2C_ITError>
}
 8005f62:	e004      	b.n	8005f6e <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2140      	movs	r1, #64	@ 0x40
 8005f68:	0018      	movs	r0, r3
 8005f6a:	f000 fa53 	bl	8006414 <I2C_Enable_IRQ>
}
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b004      	add	sp, #16
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	46c0      	nop			@ (mov r8, r8)
 8005f78:	ffff7fff 	.word	0xffff7fff

08005f7c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f88:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2180      	movs	r1, #128	@ 0x80
 8005f96:	0209      	lsls	r1, r1, #8
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2110      	movs	r1, #16
 8005fa0:	0018      	movs	r0, r3
 8005fa2:	f7ff fe4d 	bl	8005c40 <I2C_ITError>
}
 8005fa6:	46c0      	nop			@ (mov r8, r8)
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b004      	add	sp, #16
 8005fac:	bd80      	pop	{r7, pc}

08005fae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc8:	2200      	movs	r2, #0
 8005fca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd8:	2200      	movs	r2, #0
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f7ff ff30 	bl	8005e44 <I2C_TreatErrorCallback>
}
 8005fe4:	46c0      	nop			@ (mov r8, r8)
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	b004      	add	sp, #16
 8005fea:	bd80      	pop	{r7, pc}

08005fec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	603b      	str	r3, [r7, #0]
 8005ff8:	1dfb      	adds	r3, r7, #7
 8005ffa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ffc:	e03a      	b.n	8006074 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	0018      	movs	r0, r3
 8006006:	f000 f8d3 	bl	80061b0 <I2C_IsErrorOccurred>
 800600a:	1e03      	subs	r3, r0, #0
 800600c:	d001      	beq.n	8006012 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	e040      	b.n	8006094 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	3301      	adds	r3, #1
 8006016:	d02d      	beq.n	8006074 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006018:	f7fd f9fe 	bl	8003418 <HAL_GetTick>
 800601c:	0002      	movs	r2, r0
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	d302      	bcc.n	800602e <I2C_WaitOnFlagUntilTimeout+0x42>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d122      	bne.n	8006074 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	699b      	ldr	r3, [r3, #24]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	4013      	ands	r3, r2
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	425a      	negs	r2, r3
 800603e:	4153      	adcs	r3, r2
 8006040:	b2db      	uxtb	r3, r3
 8006042:	001a      	movs	r2, r3
 8006044:	1dfb      	adds	r3, r7, #7
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	429a      	cmp	r2, r3
 800604a:	d113      	bne.n	8006074 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006050:	2220      	movs	r2, #32
 8006052:	431a      	orrs	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2241      	movs	r2, #65	@ 0x41
 800605c:	2120      	movs	r1, #32
 800605e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2242      	movs	r2, #66	@ 0x42
 8006064:	2100      	movs	r1, #0
 8006066:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2240      	movs	r2, #64	@ 0x40
 800606c:	2100      	movs	r1, #0
 800606e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e00f      	b.n	8006094 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	4013      	ands	r3, r2
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	425a      	negs	r2, r3
 8006084:	4153      	adcs	r3, r2
 8006086:	b2db      	uxtb	r3, r3
 8006088:	001a      	movs	r2, r3
 800608a:	1dfb      	adds	r3, r7, #7
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d0b5      	beq.n	8005ffe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	0018      	movs	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	b004      	add	sp, #16
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060a8:	e032      	b.n	8006110 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	68b9      	ldr	r1, [r7, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	0018      	movs	r0, r3
 80060b2:	f000 f87d 	bl	80061b0 <I2C_IsErrorOccurred>
 80060b6:	1e03      	subs	r3, r0, #0
 80060b8:	d001      	beq.n	80060be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e030      	b.n	8006120 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	3301      	adds	r3, #1
 80060c2:	d025      	beq.n	8006110 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c4:	f7fd f9a8 	bl	8003418 <HAL_GetTick>
 80060c8:	0002      	movs	r2, r0
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d302      	bcc.n	80060da <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d11a      	bne.n	8006110 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	2202      	movs	r2, #2
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d013      	beq.n	8006110 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ec:	2220      	movs	r2, #32
 80060ee:	431a      	orrs	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2241      	movs	r2, #65	@ 0x41
 80060f8:	2120      	movs	r1, #32
 80060fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2242      	movs	r2, #66	@ 0x42
 8006100:	2100      	movs	r1, #0
 8006102:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2240      	movs	r2, #64	@ 0x40
 8006108:	2100      	movs	r1, #0
 800610a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e007      	b.n	8006120 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2202      	movs	r2, #2
 8006118:	4013      	ands	r3, r2
 800611a:	2b02      	cmp	r3, #2
 800611c:	d1c5      	bne.n	80060aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	0018      	movs	r0, r3
 8006122:	46bd      	mov	sp, r7
 8006124:	b004      	add	sp, #16
 8006126:	bd80      	pop	{r7, pc}

08006128 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006134:	e02f      	b.n	8006196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	68b9      	ldr	r1, [r7, #8]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	0018      	movs	r0, r3
 800613e:	f000 f837 	bl	80061b0 <I2C_IsErrorOccurred>
 8006142:	1e03      	subs	r3, r0, #0
 8006144:	d001      	beq.n	800614a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e02d      	b.n	80061a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614a:	f7fd f965 	bl	8003418 <HAL_GetTick>
 800614e:	0002      	movs	r2, r0
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	68ba      	ldr	r2, [r7, #8]
 8006156:	429a      	cmp	r2, r3
 8006158:	d302      	bcc.n	8006160 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d11a      	bne.n	8006196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2220      	movs	r2, #32
 8006168:	4013      	ands	r3, r2
 800616a:	2b20      	cmp	r3, #32
 800616c:	d013      	beq.n	8006196 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006172:	2220      	movs	r2, #32
 8006174:	431a      	orrs	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2241      	movs	r2, #65	@ 0x41
 800617e:	2120      	movs	r1, #32
 8006180:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2242      	movs	r2, #66	@ 0x42
 8006186:	2100      	movs	r1, #0
 8006188:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2240      	movs	r2, #64	@ 0x40
 800618e:	2100      	movs	r1, #0
 8006190:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e007      	b.n	80061a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	2220      	movs	r2, #32
 800619e:	4013      	ands	r3, r2
 80061a0:	2b20      	cmp	r3, #32
 80061a2:	d1c8      	bne.n	8006136 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	0018      	movs	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	b004      	add	sp, #16
 80061ac:	bd80      	pop	{r7, pc}
	...

080061b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	@ 0x28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061bc:	2327      	movs	r3, #39	@ 0x27
 80061be:	18fb      	adds	r3, r7, r3
 80061c0:	2200      	movs	r2, #0
 80061c2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699b      	ldr	r3, [r3, #24]
 80061ca:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80061cc:	2300      	movs	r3, #0
 80061ce:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	2210      	movs	r2, #16
 80061d8:	4013      	ands	r3, r2
 80061da:	d100      	bne.n	80061de <I2C_IsErrorOccurred+0x2e>
 80061dc:	e079      	b.n	80062d2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2210      	movs	r2, #16
 80061e4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80061e6:	e057      	b.n	8006298 <I2C_IsErrorOccurred+0xe8>
 80061e8:	2227      	movs	r2, #39	@ 0x27
 80061ea:	18bb      	adds	r3, r7, r2
 80061ec:	18ba      	adds	r2, r7, r2
 80061ee:	7812      	ldrb	r2, [r2, #0]
 80061f0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	3301      	adds	r3, #1
 80061f6:	d04f      	beq.n	8006298 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80061f8:	f7fd f90e 	bl	8003418 <HAL_GetTick>
 80061fc:	0002      	movs	r2, r0
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d302      	bcc.n	800620e <I2C_IsErrorOccurred+0x5e>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d144      	bne.n	8006298 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	2380      	movs	r3, #128	@ 0x80
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	4013      	ands	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800621c:	2013      	movs	r0, #19
 800621e:	183b      	adds	r3, r7, r0
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	2142      	movs	r1, #66	@ 0x42
 8006224:	5c52      	ldrb	r2, [r2, r1]
 8006226:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	2380      	movs	r3, #128	@ 0x80
 8006230:	021b      	lsls	r3, r3, #8
 8006232:	401a      	ands	r2, r3
 8006234:	2380      	movs	r3, #128	@ 0x80
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	429a      	cmp	r2, r3
 800623a:	d126      	bne.n	800628a <I2C_IsErrorOccurred+0xda>
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	2380      	movs	r3, #128	@ 0x80
 8006240:	01db      	lsls	r3, r3, #7
 8006242:	429a      	cmp	r2, r3
 8006244:	d021      	beq.n	800628a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8006246:	183b      	adds	r3, r7, r0
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b20      	cmp	r3, #32
 800624c:	d01d      	beq.n	800628a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2180      	movs	r1, #128	@ 0x80
 800625a:	01c9      	lsls	r1, r1, #7
 800625c:	430a      	orrs	r2, r1
 800625e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006260:	f7fd f8da 	bl	8003418 <HAL_GetTick>
 8006264:	0003      	movs	r3, r0
 8006266:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006268:	e00f      	b.n	800628a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800626a:	f7fd f8d5 	bl	8003418 <HAL_GetTick>
 800626e:	0002      	movs	r2, r0
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b19      	cmp	r3, #25
 8006276:	d908      	bls.n	800628a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	2220      	movs	r2, #32
 800627c:	4313      	orrs	r3, r2
 800627e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006280:	2327      	movs	r3, #39	@ 0x27
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]

              break;
 8006288:	e006      	b.n	8006298 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	2220      	movs	r2, #32
 8006292:	4013      	ands	r3, r2
 8006294:	2b20      	cmp	r3, #32
 8006296:	d1e8      	bne.n	800626a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	2220      	movs	r2, #32
 80062a0:	4013      	ands	r3, r2
 80062a2:	2b20      	cmp	r3, #32
 80062a4:	d004      	beq.n	80062b0 <I2C_IsErrorOccurred+0x100>
 80062a6:	2327      	movs	r3, #39	@ 0x27
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d09b      	beq.n	80061e8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80062b0:	2327      	movs	r3, #39	@ 0x27
 80062b2:	18fb      	adds	r3, r7, r3
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d103      	bne.n	80062c2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2220      	movs	r2, #32
 80062c0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80062c2:	6a3b      	ldr	r3, [r7, #32]
 80062c4:	2204      	movs	r2, #4
 80062c6:	4313      	orrs	r3, r2
 80062c8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80062ca:	2327      	movs	r3, #39	@ 0x27
 80062cc:	18fb      	adds	r3, r7, r3
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	2380      	movs	r3, #128	@ 0x80
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	4013      	ands	r3, r2
 80062e2:	d00c      	beq.n	80062fe <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80062e4:	6a3b      	ldr	r3, [r7, #32]
 80062e6:	2201      	movs	r2, #1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2280      	movs	r2, #128	@ 0x80
 80062f2:	0052      	lsls	r2, r2, #1
 80062f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062f6:	2327      	movs	r3, #39	@ 0x27
 80062f8:	18fb      	adds	r3, r7, r3
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80062fe:	69ba      	ldr	r2, [r7, #24]
 8006300:	2380      	movs	r3, #128	@ 0x80
 8006302:	00db      	lsls	r3, r3, #3
 8006304:	4013      	ands	r3, r2
 8006306:	d00c      	beq.n	8006322 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2208      	movs	r2, #8
 800630c:	4313      	orrs	r3, r2
 800630e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2280      	movs	r2, #128	@ 0x80
 8006316:	00d2      	lsls	r2, r2, #3
 8006318:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800631a:	2327      	movs	r3, #39	@ 0x27
 800631c:	18fb      	adds	r3, r7, r3
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	2380      	movs	r3, #128	@ 0x80
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	4013      	ands	r3, r2
 800632a:	d00c      	beq.n	8006346 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	2202      	movs	r2, #2
 8006330:	4313      	orrs	r3, r2
 8006332:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2280      	movs	r2, #128	@ 0x80
 800633a:	0092      	lsls	r2, r2, #2
 800633c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800633e:	2327      	movs	r3, #39	@ 0x27
 8006340:	18fb      	adds	r3, r7, r3
 8006342:	2201      	movs	r2, #1
 8006344:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8006346:	2327      	movs	r3, #39	@ 0x27
 8006348:	18fb      	adds	r3, r7, r3
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01d      	beq.n	800638c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	0018      	movs	r0, r3
 8006354:	f7ff fd9f 	bl	8005e96 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	490e      	ldr	r1, [pc, #56]	@ (800639c <I2C_IsErrorOccurred+0x1ec>)
 8006364:	400a      	ands	r2, r1
 8006366:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	431a      	orrs	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2241      	movs	r2, #65	@ 0x41
 8006378:	2120      	movs	r1, #32
 800637a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2242      	movs	r2, #66	@ 0x42
 8006380:	2100      	movs	r1, #0
 8006382:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2240      	movs	r2, #64	@ 0x40
 8006388:	2100      	movs	r1, #0
 800638a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800638c:	2327      	movs	r3, #39	@ 0x27
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	781b      	ldrb	r3, [r3, #0]
}
 8006392:	0018      	movs	r0, r3
 8006394:	46bd      	mov	sp, r7
 8006396:	b00a      	add	sp, #40	@ 0x28
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	fe00e800 	.word	0xfe00e800

080063a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80063a0:	b590      	push	{r4, r7, lr}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	0008      	movs	r0, r1
 80063aa:	0011      	movs	r1, r2
 80063ac:	607b      	str	r3, [r7, #4]
 80063ae:	240a      	movs	r4, #10
 80063b0:	193b      	adds	r3, r7, r4
 80063b2:	1c02      	adds	r2, r0, #0
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	2009      	movs	r0, #9
 80063b8:	183b      	adds	r3, r7, r0
 80063ba:	1c0a      	adds	r2, r1, #0
 80063bc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063be:	193b      	adds	r3, r7, r4
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	059b      	lsls	r3, r3, #22
 80063c4:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063c6:	183b      	adds	r3, r7, r0
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	0419      	lsls	r1, r3, #16
 80063cc:	23ff      	movs	r3, #255	@ 0xff
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063d2:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80063d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063da:	4313      	orrs	r3, r2
 80063dc:	005b      	lsls	r3, r3, #1
 80063de:	085b      	lsrs	r3, r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063ea:	0d51      	lsrs	r1, r2, #21
 80063ec:	2280      	movs	r2, #128	@ 0x80
 80063ee:	00d2      	lsls	r2, r2, #3
 80063f0:	400a      	ands	r2, r1
 80063f2:	4907      	ldr	r1, [pc, #28]	@ (8006410 <I2C_TransferConfig+0x70>)
 80063f4:	430a      	orrs	r2, r1
 80063f6:	43d2      	mvns	r2, r2
 80063f8:	401a      	ands	r2, r3
 80063fa:	0011      	movs	r1, r2
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	697a      	ldr	r2, [r7, #20]
 8006402:	430a      	orrs	r2, r1
 8006404:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006406:	46c0      	nop			@ (mov r8, r8)
 8006408:	46bd      	mov	sp, r7
 800640a:	b007      	add	sp, #28
 800640c:	bd90      	pop	{r4, r7, pc}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	03ff63ff 	.word	0x03ff63ff

08006414 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	000a      	movs	r2, r1
 800641e:	1cbb      	adds	r3, r7, #2
 8006420:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800642a:	4b3c      	ldr	r3, [pc, #240]	@ (800651c <I2C_Enable_IRQ+0x108>)
 800642c:	429a      	cmp	r2, r3
 800642e:	d035      	beq.n	800649c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006434:	4b3a      	ldr	r3, [pc, #232]	@ (8006520 <I2C_Enable_IRQ+0x10c>)
 8006436:	429a      	cmp	r2, r3
 8006438:	d030      	beq.n	800649c <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800643e:	4b39      	ldr	r3, [pc, #228]	@ (8006524 <I2C_Enable_IRQ+0x110>)
 8006440:	429a      	cmp	r2, r3
 8006442:	d02b      	beq.n	800649c <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006444:	1cbb      	adds	r3, r7, #2
 8006446:	2200      	movs	r2, #0
 8006448:	5e9b      	ldrsh	r3, [r3, r2]
 800644a:	2b00      	cmp	r3, #0
 800644c:	da03      	bge.n	8006456 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	22b8      	movs	r2, #184	@ 0xb8
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006456:	1cbb      	adds	r3, r7, #2
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	2201      	movs	r2, #1
 800645c:	4013      	ands	r3, r2
 800645e:	d003      	beq.n	8006468 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	22f2      	movs	r2, #242	@ 0xf2
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006468:	1cbb      	adds	r3, r7, #2
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	2202      	movs	r2, #2
 800646e:	4013      	ands	r3, r2
 8006470:	d003      	beq.n	800647a <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	22f4      	movs	r2, #244	@ 0xf4
 8006476:	4313      	orrs	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800647a:	1cbb      	adds	r3, r7, #2
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	2b10      	cmp	r3, #16
 8006480:	d103      	bne.n	800648a <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2290      	movs	r2, #144	@ 0x90
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800648a:	1cbb      	adds	r3, r7, #2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	2b20      	cmp	r3, #32
 8006490:	d137      	bne.n	8006502 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800649a:	e032      	b.n	8006502 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800649c:	1cbb      	adds	r3, r7, #2
 800649e:	2200      	movs	r2, #0
 80064a0:	5e9b      	ldrsh	r3, [r3, r2]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	da03      	bge.n	80064ae <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	22b8      	movs	r2, #184	@ 0xb8
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064ae:	1cbb      	adds	r3, r7, #2
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	2201      	movs	r2, #1
 80064b4:	4013      	ands	r3, r2
 80064b6:	d003      	beq.n	80064c0 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	22f2      	movs	r2, #242	@ 0xf2
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80064c0:	1cbb      	adds	r3, r7, #2
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	2202      	movs	r2, #2
 80064c6:	4013      	ands	r3, r2
 80064c8:	d003      	beq.n	80064d2 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	22f4      	movs	r2, #244	@ 0xf4
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80064d2:	1cbb      	adds	r3, r7, #2
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	2b10      	cmp	r3, #16
 80064d8:	d103      	bne.n	80064e2 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2290      	movs	r2, #144	@ 0x90
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80064e2:	1cbb      	adds	r3, r7, #2
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d103      	bne.n	80064f2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2260      	movs	r2, #96	@ 0x60
 80064ee:	4313      	orrs	r3, r2
 80064f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80064f2:	1cbb      	adds	r3, r7, #2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	2b40      	cmp	r3, #64	@ 0x40
 80064f8:	d103      	bne.n	8006502 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2240      	movs	r2, #64	@ 0x40
 80064fe:	4313      	orrs	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6819      	ldr	r1, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	430a      	orrs	r2, r1
 8006510:	601a      	str	r2, [r3, #0]
}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	46bd      	mov	sp, r7
 8006516:	b004      	add	sp, #16
 8006518:	bd80      	pop	{r7, pc}
 800651a:	46c0      	nop			@ (mov r8, r8)
 800651c:	08004ca5 	.word	0x08004ca5
 8006520:	080050f5 	.word	0x080050f5
 8006524:	08004e9d 	.word	0x08004e9d

08006528 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	000a      	movs	r2, r1
 8006532:	1cbb      	adds	r3, r7, #2
 8006534:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800653a:	1cbb      	adds	r3, r7, #2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	2201      	movs	r2, #1
 8006540:	4013      	ands	r3, r2
 8006542:	d010      	beq.n	8006566 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2242      	movs	r2, #66	@ 0x42
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2241      	movs	r2, #65	@ 0x41
 8006550:	5c9b      	ldrb	r3, [r3, r2]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	001a      	movs	r2, r3
 8006556:	2328      	movs	r3, #40	@ 0x28
 8006558:	4013      	ands	r3, r2
 800655a:	2b28      	cmp	r3, #40	@ 0x28
 800655c:	d003      	beq.n	8006566 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	22b0      	movs	r2, #176	@ 0xb0
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006566:	1cbb      	adds	r3, r7, #2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	2202      	movs	r2, #2
 800656c:	4013      	ands	r3, r2
 800656e:	d010      	beq.n	8006592 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2244      	movs	r2, #68	@ 0x44
 8006574:	4313      	orrs	r3, r2
 8006576:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2241      	movs	r2, #65	@ 0x41
 800657c:	5c9b      	ldrb	r3, [r3, r2]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	001a      	movs	r2, r3
 8006582:	2328      	movs	r3, #40	@ 0x28
 8006584:	4013      	ands	r3, r2
 8006586:	2b28      	cmp	r3, #40	@ 0x28
 8006588:	d003      	beq.n	8006592 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	22b0      	movs	r2, #176	@ 0xb0
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006592:	1cbb      	adds	r3, r7, #2
 8006594:	2200      	movs	r2, #0
 8006596:	5e9b      	ldrsh	r3, [r3, r2]
 8006598:	2b00      	cmp	r3, #0
 800659a:	da03      	bge.n	80065a4 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	22b8      	movs	r2, #184	@ 0xb8
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80065a4:	1cbb      	adds	r3, r7, #2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	2b10      	cmp	r3, #16
 80065aa:	d103      	bne.n	80065b4 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2290      	movs	r2, #144	@ 0x90
 80065b0:	4313      	orrs	r3, r2
 80065b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80065b4:	1cbb      	adds	r3, r7, #2
 80065b6:	881b      	ldrh	r3, [r3, #0]
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d103      	bne.n	80065c4 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80065c4:	1cbb      	adds	r3, r7, #2
 80065c6:	881b      	ldrh	r3, [r3, #0]
 80065c8:	2b40      	cmp	r3, #64	@ 0x40
 80065ca:	d103      	bne.n	80065d4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2240      	movs	r2, #64	@ 0x40
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	43d9      	mvns	r1, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	400a      	ands	r2, r1
 80065e4:	601a      	str	r2, [r3, #0]
}
 80065e6:	46c0      	nop			@ (mov r8, r8)
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b004      	add	sp, #16
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2241      	movs	r2, #65	@ 0x41
 80065fe:	5c9b      	ldrb	r3, [r3, r2]
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b20      	cmp	r3, #32
 8006604:	d138      	bne.n	8006678 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2240      	movs	r2, #64	@ 0x40
 800660a:	5c9b      	ldrb	r3, [r3, r2]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006610:	2302      	movs	r3, #2
 8006612:	e032      	b.n	800667a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2240      	movs	r2, #64	@ 0x40
 8006618:	2101      	movs	r1, #1
 800661a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2241      	movs	r2, #65	@ 0x41
 8006620:	2124      	movs	r1, #36	@ 0x24
 8006622:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2101      	movs	r1, #1
 8006630:	438a      	bics	r2, r1
 8006632:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4911      	ldr	r1, [pc, #68]	@ (8006684 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8006640:	400a      	ands	r2, r1
 8006642:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6819      	ldr	r1, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2101      	movs	r1, #1
 8006660:	430a      	orrs	r2, r1
 8006662:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2241      	movs	r2, #65	@ 0x41
 8006668:	2120      	movs	r1, #32
 800666a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2240      	movs	r2, #64	@ 0x40
 8006670:	2100      	movs	r1, #0
 8006672:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	e000      	b.n	800667a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006678:	2302      	movs	r3, #2
  }
}
 800667a:	0018      	movs	r0, r3
 800667c:	46bd      	mov	sp, r7
 800667e:	b002      	add	sp, #8
 8006680:	bd80      	pop	{r7, pc}
 8006682:	46c0      	nop			@ (mov r8, r8)
 8006684:	ffffefff 	.word	0xffffefff

08006688 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2241      	movs	r2, #65	@ 0x41
 8006696:	5c9b      	ldrb	r3, [r3, r2]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b20      	cmp	r3, #32
 800669c:	d139      	bne.n	8006712 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2240      	movs	r2, #64	@ 0x40
 80066a2:	5c9b      	ldrb	r3, [r3, r2]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d101      	bne.n	80066ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066a8:	2302      	movs	r3, #2
 80066aa:	e033      	b.n	8006714 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2240      	movs	r2, #64	@ 0x40
 80066b0:	2101      	movs	r1, #1
 80066b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2241      	movs	r2, #65	@ 0x41
 80066b8:	2124      	movs	r1, #36	@ 0x24
 80066ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2101      	movs	r1, #1
 80066c8:	438a      	bics	r2, r1
 80066ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a11      	ldr	r2, [pc, #68]	@ (800671c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80066d8:	4013      	ands	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2101      	movs	r1, #1
 80066fa:	430a      	orrs	r2, r1
 80066fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2241      	movs	r2, #65	@ 0x41
 8006702:	2120      	movs	r1, #32
 8006704:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2240      	movs	r2, #64	@ 0x40
 800670a:	2100      	movs	r1, #0
 800670c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	e000      	b.n	8006714 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006712:	2302      	movs	r3, #2
  }
}
 8006714:	0018      	movs	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	b004      	add	sp, #16
 800671a:	bd80      	pop	{r7, pc}
 800671c:	fffff0ff 	.word	0xfffff0ff

08006720 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	000a      	movs	r2, r1
 800672a:	1cfb      	adds	r3, r7, #3
 800672c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10d      	bne.n	8006750 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006734:	4b15      	ldr	r3, [pc, #84]	@ (800678c <HAL_PWR_EnterSLEEPMode+0x6c>)
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	401a      	ands	r2, r3
 800673e:	2380      	movs	r3, #128	@ 0x80
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	429a      	cmp	r2, r3
 8006744:	d10f      	bne.n	8006766 <HAL_PWR_EnterSLEEPMode+0x46>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8006746:	f000 f89f 	bl	8006888 <HAL_PWREx_DisableLowPowerRunMode>
 800674a:	1e03      	subs	r3, r0, #0
 800674c:	d00b      	beq.n	8006766 <HAL_PWR_EnterSLEEPMode+0x46>
      {
        return ;
 800674e:	e019      	b.n	8006784 <HAL_PWR_EnterSLEEPMode+0x64>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8006750:	4b0e      	ldr	r3, [pc, #56]	@ (800678c <HAL_PWR_EnterSLEEPMode+0x6c>)
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	2380      	movs	r3, #128	@ 0x80
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	401a      	ands	r2, r3
 800675a:	2380      	movs	r3, #128	@ 0x80
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	429a      	cmp	r2, r3
 8006760:	d001      	beq.n	8006766 <HAL_PWR_EnterSLEEPMode+0x46>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8006762:	f000 f883 	bl	800686c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006766:	4b0a      	ldr	r3, [pc, #40]	@ (8006790 <HAL_PWR_EnterSLEEPMode+0x70>)
 8006768:	691a      	ldr	r2, [r3, #16]
 800676a:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <HAL_PWR_EnterSLEEPMode+0x70>)
 800676c:	2104      	movs	r1, #4
 800676e:	438a      	bics	r2, r1
 8006770:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006772:	1cfb      	adds	r3, r7, #3
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b01      	cmp	r3, #1
 8006778:	d101      	bne.n	800677e <HAL_PWR_EnterSLEEPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800677a:	bf30      	wfi
 800677c:	e002      	b.n	8006784 <HAL_PWR_EnterSLEEPMode+0x64>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800677e:	bf40      	sev
    __WFE();
 8006780:	bf20      	wfe
    __WFE();
 8006782:	bf20      	wfe
  }
}
 8006784:	46bd      	mov	sp, r7
 8006786:	b002      	add	sp, #8
 8006788:	bd80      	pop	{r7, pc}
 800678a:	46c0      	nop			@ (mov r8, r8)
 800678c:	40007000 	.word	0x40007000
 8006790:	e000ed00 	.word	0xe000ed00

08006794 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	2380      	movs	r3, #128	@ 0x80
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d137      	bne.n	8006816 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80067a6:	4b27      	ldr	r3, [pc, #156]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	23c0      	movs	r3, #192	@ 0xc0
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	401a      	ands	r2, r3
 80067b0:	2380      	movs	r3, #128	@ 0x80
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d040      	beq.n	800683a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067b8:	4b22      	ldr	r3, [pc, #136]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a22      	ldr	r2, [pc, #136]	@ (8006848 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80067be:	401a      	ands	r2, r3
 80067c0:	4b20      	ldr	r3, [pc, #128]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80067c2:	2180      	movs	r1, #128	@ 0x80
 80067c4:	0089      	lsls	r1, r1, #2
 80067c6:	430a      	orrs	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067ca:	4b20      	ldr	r3, [pc, #128]	@ (800684c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2232      	movs	r2, #50	@ 0x32
 80067d0:	4353      	muls	r3, r2
 80067d2:	491f      	ldr	r1, [pc, #124]	@ (8006850 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80067d4:	0018      	movs	r0, r3
 80067d6:	f7f9 fc97 	bl	8000108 <__udivsi3>
 80067da:	0003      	movs	r3, r0
 80067dc:	3301      	adds	r3, #1
 80067de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067e0:	e002      	b.n	80067e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067e8:	4b16      	ldr	r3, [pc, #88]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80067ea:	695a      	ldr	r2, [r3, #20]
 80067ec:	2380      	movs	r3, #128	@ 0x80
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	401a      	ands	r2, r3
 80067f2:	2380      	movs	r3, #128	@ 0x80
 80067f4:	00db      	lsls	r3, r3, #3
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d102      	bne.n	8006800 <HAL_PWREx_ControlVoltageScaling+0x6c>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f0      	bne.n	80067e2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006800:	4b10      	ldr	r3, [pc, #64]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006802:	695a      	ldr	r2, [r3, #20]
 8006804:	2380      	movs	r3, #128	@ 0x80
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	401a      	ands	r2, r3
 800680a:	2380      	movs	r3, #128	@ 0x80
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	429a      	cmp	r2, r3
 8006810:	d113      	bne.n	800683a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e012      	b.n	800683c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006816:	4b0b      	ldr	r3, [pc, #44]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	23c0      	movs	r3, #192	@ 0xc0
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	401a      	ands	r2, r3
 8006820:	2380      	movs	r3, #128	@ 0x80
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	429a      	cmp	r2, r3
 8006826:	d008      	beq.n	800683a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006828:	4b06      	ldr	r3, [pc, #24]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a06      	ldr	r2, [pc, #24]	@ (8006848 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800682e:	401a      	ands	r2, r3
 8006830:	4b04      	ldr	r3, [pc, #16]	@ (8006844 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006832:	2180      	movs	r1, #128	@ 0x80
 8006834:	00c9      	lsls	r1, r1, #3
 8006836:	430a      	orrs	r2, r1
 8006838:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	0018      	movs	r0, r3
 800683e:	46bd      	mov	sp, r7
 8006840:	b004      	add	sp, #16
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40007000 	.word	0x40007000
 8006848:	fffff9ff 	.word	0xfffff9ff
 800684c:	20000014 	.word	0x20000014
 8006850:	000f4240 	.word	0x000f4240

08006854 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006858:	4b03      	ldr	r3, [pc, #12]	@ (8006868 <HAL_PWREx_GetVoltageRange+0x14>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	23c0      	movs	r3, #192	@ 0xc0
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	4013      	ands	r3, r2
}
 8006862:	0018      	movs	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40007000 	.word	0x40007000

0800686c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006870:	4b04      	ldr	r3, [pc, #16]	@ (8006884 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	4b03      	ldr	r3, [pc, #12]	@ (8006884 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8006876:	2180      	movs	r1, #128	@ 0x80
 8006878:	01c9      	lsls	r1, r1, #7
 800687a:	430a      	orrs	r2, r1
 800687c:	601a      	str	r2, [r3, #0]
}
 800687e:	46c0      	nop			@ (mov r8, r8)
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40007000 	.word	0x40007000

08006888 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800688e:	4b18      	ldr	r3, [pc, #96]	@ (80068f0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b17      	ldr	r3, [pc, #92]	@ (80068f0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006894:	4917      	ldr	r1, [pc, #92]	@ (80068f4 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 8006896:	400a      	ands	r2, r1
 8006898:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800689a:	4b17      	ldr	r3, [pc, #92]	@ (80068f8 <HAL_PWREx_DisableLowPowerRunMode+0x70>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2232      	movs	r2, #50	@ 0x32
 80068a0:	4353      	muls	r3, r2
 80068a2:	4916      	ldr	r1, [pc, #88]	@ (80068fc <HAL_PWREx_DisableLowPowerRunMode+0x74>)
 80068a4:	0018      	movs	r0, r3
 80068a6:	f7f9 fc2f 	bl	8000108 <__udivsi3>
 80068aa:	0003      	movs	r3, r0
 80068ac:	3301      	adds	r3, #1
 80068ae:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80068b0:	e002      	b.n	80068b8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80068b8:	4b0d      	ldr	r3, [pc, #52]	@ (80068f0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80068ba:	695a      	ldr	r2, [r3, #20]
 80068bc:	2380      	movs	r3, #128	@ 0x80
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	401a      	ands	r2, r3
 80068c2:	2380      	movs	r3, #128	@ 0x80
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d102      	bne.n	80068d0 <HAL_PWREx_DisableLowPowerRunMode+0x48>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d1f0      	bne.n	80068b2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80068d0:	4b07      	ldr	r3, [pc, #28]	@ (80068f0 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	2380      	movs	r3, #128	@ 0x80
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	401a      	ands	r2, r3
 80068da:	2380      	movs	r3, #128	@ 0x80
 80068dc:	009b      	lsls	r3, r3, #2
 80068de:	429a      	cmp	r2, r3
 80068e0:	d101      	bne.n	80068e6 <HAL_PWREx_DisableLowPowerRunMode+0x5e>
  {
    return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e000      	b.n	80068e8 <HAL_PWREx_DisableLowPowerRunMode+0x60>
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	0018      	movs	r0, r3
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b002      	add	sp, #8
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	40007000 	.word	0x40007000
 80068f4:	ffffbfff 	.word	0xffffbfff
 80068f8:	20000014 	.word	0x20000014
 80068fc:	000f4240 	.word	0x000f4240

08006900 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	0002      	movs	r2, r0
 8006908:	1dfb      	adds	r3, r7, #7
 800690a:	701a      	strb	r2, [r3, #0]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
  /* Clear LPR Bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800690c:	4b13      	ldr	r3, [pc, #76]	@ (800695c <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4b12      	ldr	r3, [pc, #72]	@ (800695c <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8006912:	4913      	ldr	r1, [pc, #76]	@ (8006960 <HAL_PWREx_EnterSTOP2Mode+0x60>)
 8006914:	400a      	ands	r2, r1
 8006916:	601a      	str	r2, [r3, #0]
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 8006918:	4b10      	ldr	r3, [pc, #64]	@ (800695c <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2207      	movs	r2, #7
 800691e:	4393      	bics	r3, r2
 8006920:	001a      	movs	r2, r3
 8006922:	4b0e      	ldr	r3, [pc, #56]	@ (800695c <HAL_PWREx_EnterSTOP2Mode+0x5c>)
 8006924:	2102      	movs	r1, #2
 8006926:	430a      	orrs	r2, r1
 8006928:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800692a:	4b0e      	ldr	r3, [pc, #56]	@ (8006964 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 8006930:	2104      	movs	r1, #4
 8006932:	430a      	orrs	r2, r1
 8006934:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8006936:	1dfb      	adds	r3, r7, #7
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d101      	bne.n	8006942 <HAL_PWREx_EnterSTOP2Mode+0x42>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800693e:	bf30      	wfi
 8006940:	e002      	b.n	8006948 <HAL_PWREx_EnterSTOP2Mode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006942:	bf40      	sev
    __WFE();
 8006944:	bf20      	wfe
    __WFE();
 8006946:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006948:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 800694a:	691a      	ldr	r2, [r3, #16]
 800694c:	4b05      	ldr	r3, [pc, #20]	@ (8006964 <HAL_PWREx_EnterSTOP2Mode+0x64>)
 800694e:	2104      	movs	r1, #4
 8006950:	438a      	bics	r2, r1
 8006952:	611a      	str	r2, [r3, #16]
}
 8006954:	46c0      	nop			@ (mov r8, r8)
 8006956:	46bd      	mov	sp, r7
 8006958:	b002      	add	sp, #8
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40007000 	.word	0x40007000
 8006960:	ffffbfff 	.word	0xffffbfff
 8006964:	e000ed00 	.word	0xe000ed00

08006968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006968:	b5b0      	push	{r4, r5, r7, lr}
 800696a:	b088      	sub	sp, #32
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006970:	4bc8      	ldr	r3, [pc, #800]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2238      	movs	r2, #56	@ 0x38
 8006976:	4013      	ands	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800697a:	4bc6      	ldr	r3, [pc, #792]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	2203      	movs	r2, #3
 8006980:	4013      	ands	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2210      	movs	r2, #16
 800698a:	4013      	ands	r3, r2
 800698c:	d100      	bne.n	8006990 <HAL_RCC_OscConfig+0x28>
 800698e:	e0ee      	b.n	8006b6e <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <HAL_RCC_OscConfig+0x3e>
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b18      	cmp	r3, #24
 800699a:	d000      	beq.n	800699e <HAL_RCC_OscConfig+0x36>
 800699c:	e093      	b.n	8006ac6 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d000      	beq.n	80069a6 <HAL_RCC_OscConfig+0x3e>
 80069a4:	e08f      	b.n	8006ac6 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069a6:	4bbb      	ldr	r3, [pc, #748]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2202      	movs	r2, #2
 80069ac:	4013      	ands	r3, r2
 80069ae:	d006      	beq.n	80069be <HAL_RCC_OscConfig+0x56>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	f000 fbae 	bl	800711a <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069c2:	4bb4      	ldr	r3, [pc, #720]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2108      	movs	r1, #8
 80069c8:	400b      	ands	r3, r1
 80069ca:	d004      	beq.n	80069d6 <HAL_RCC_OscConfig+0x6e>
 80069cc:	4bb1      	ldr	r3, [pc, #708]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	21f0      	movs	r1, #240	@ 0xf0
 80069d2:	400b      	ands	r3, r1
 80069d4:	e005      	b.n	80069e2 <HAL_RCC_OscConfig+0x7a>
 80069d6:	49af      	ldr	r1, [pc, #700]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 80069d8:	2394      	movs	r3, #148	@ 0x94
 80069da:	58cb      	ldr	r3, [r1, r3]
 80069dc:	091b      	lsrs	r3, r3, #4
 80069de:	21f0      	movs	r1, #240	@ 0xf0
 80069e0:	400b      	ands	r3, r1
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d225      	bcs.n	8006a32 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	0018      	movs	r0, r3
 80069ec:	f000 fd8c 	bl	8007508 <RCC_SetFlashLatencyFromMSIRange>
 80069f0:	1e03      	subs	r3, r0, #0
 80069f2:	d002      	beq.n	80069fa <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	f000 fb90 	bl	800711a <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069fa:	4ba6      	ldr	r3, [pc, #664]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4ba5      	ldr	r3, [pc, #660]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a00:	2108      	movs	r1, #8
 8006a02:	430a      	orrs	r2, r1
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	4ba3      	ldr	r3, [pc, #652]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	22f0      	movs	r2, #240	@ 0xf0
 8006a0c:	4393      	bics	r3, r2
 8006a0e:	0019      	movs	r1, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a14:	4b9f      	ldr	r3, [pc, #636]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a16:	430a      	orrs	r2, r1
 8006a18:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a1a:	4b9e      	ldr	r3, [pc, #632]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	4a9e      	ldr	r2, [pc, #632]	@ (8006c98 <HAL_RCC_OscConfig+0x330>)
 8006a20:	4013      	ands	r3, r2
 8006a22:	0019      	movs	r1, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	021a      	lsls	r2, r3, #8
 8006a2a:	4b9a      	ldr	r3, [pc, #616]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	605a      	str	r2, [r3, #4]
 8006a30:	e027      	b.n	8006a82 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a32:	4b98      	ldr	r3, [pc, #608]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4b97      	ldr	r3, [pc, #604]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a38:	2108      	movs	r1, #8
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	4b95      	ldr	r3, [pc, #596]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	22f0      	movs	r2, #240	@ 0xf0
 8006a44:	4393      	bics	r3, r2
 8006a46:	0019      	movs	r1, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a4c:	4b91      	ldr	r3, [pc, #580]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a52:	4b90      	ldr	r3, [pc, #576]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	4a90      	ldr	r2, [pc, #576]	@ (8006c98 <HAL_RCC_OscConfig+0x330>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	0019      	movs	r1, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a1b      	ldr	r3, [r3, #32]
 8006a60:	021a      	lsls	r2, r3, #8
 8006a62:	4b8c      	ldr	r3, [pc, #560]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d109      	bne.n	8006a82 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 fd48 	bl	8007508 <RCC_SetFlashLatencyFromMSIRange>
 8006a78:	1e03      	subs	r3, r0, #0
 8006a7a:	d002      	beq.n	8006a82 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	f000 fb4c 	bl	800711a <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006a82:	f000 fca7 	bl	80073d4 <HAL_RCC_GetSysClockFreq>
 8006a86:	0001      	movs	r1, r0
 8006a88:	4b82      	ldr	r3, [pc, #520]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	220f      	movs	r2, #15
 8006a90:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006a92:	4a82      	ldr	r2, [pc, #520]	@ (8006c9c <HAL_RCC_OscConfig+0x334>)
 8006a94:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006a96:	001a      	movs	r2, r3
 8006a98:	231f      	movs	r3, #31
 8006a9a:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8006a9c:	000a      	movs	r2, r1
 8006a9e:	40da      	lsrs	r2, r3
 8006aa0:	4b7f      	ldr	r3, [pc, #508]	@ (8006ca0 <HAL_RCC_OscConfig+0x338>)
 8006aa2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006aa4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ca4 <HAL_RCC_OscConfig+0x33c>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	250f      	movs	r5, #15
 8006aaa:	197c      	adds	r4, r7, r5
 8006aac:	0018      	movs	r0, r3
 8006aae:	f7fc fc59 	bl	8003364 <HAL_InitTick>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8006ab6:	197b      	adds	r3, r7, r5
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d056      	beq.n	8006b6c <HAL_RCC_OscConfig+0x204>
        {
          return status;
 8006abe:	197b      	adds	r3, r7, r5
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f000 fb2a 	bl	800711a <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	69db      	ldr	r3, [r3, #28]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d034      	beq.n	8006b38 <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006ace:	4b71      	ldr	r3, [pc, #452]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b70      	ldr	r3, [pc, #448]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006ada:	f7fc fc9d 	bl	8003418 <HAL_GetTick>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006ae2:	e008      	b.n	8006af6 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006ae4:	f7fc fc98 	bl	8003418 <HAL_GetTick>
 8006ae8:	0002      	movs	r2, r0
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e311      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006af6:	4b67      	ldr	r3, [pc, #412]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2202      	movs	r2, #2
 8006afc:	4013      	ands	r3, r2
 8006afe:	d0f1      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b00:	4b64      	ldr	r3, [pc, #400]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	4b63      	ldr	r3, [pc, #396]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b06:	2108      	movs	r1, #8
 8006b08:	430a      	orrs	r2, r1
 8006b0a:	601a      	str	r2, [r3, #0]
 8006b0c:	4b61      	ldr	r3, [pc, #388]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	22f0      	movs	r2, #240	@ 0xf0
 8006b12:	4393      	bics	r3, r2
 8006b14:	0019      	movs	r1, r3
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b20:	4b5c      	ldr	r3, [pc, #368]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	4a5c      	ldr	r2, [pc, #368]	@ (8006c98 <HAL_RCC_OscConfig+0x330>)
 8006b26:	4013      	ands	r3, r2
 8006b28:	0019      	movs	r1, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	021a      	lsls	r2, r3, #8
 8006b30:	4b58      	ldr	r3, [pc, #352]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
 8006b36:	e01a      	b.n	8006b6e <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b38:	4b56      	ldr	r3, [pc, #344]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4b55      	ldr	r3, [pc, #340]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b3e:	2101      	movs	r1, #1
 8006b40:	438a      	bics	r2, r1
 8006b42:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b44:	f7fc fc68 	bl	8003418 <HAL_GetTick>
 8006b48:	0003      	movs	r3, r0
 8006b4a:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b4c:	e008      	b.n	8006b60 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006b4e:	f7fc fc63 	bl	8003418 <HAL_GetTick>
 8006b52:	0002      	movs	r2, r0
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	2b02      	cmp	r3, #2
 8006b5a:	d901      	bls.n	8006b60 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8006b5c:	2303      	movs	r3, #3
 8006b5e:	e2dc      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b60:	4b4c      	ldr	r3, [pc, #304]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2202      	movs	r2, #2
 8006b66:	4013      	ands	r3, r2
 8006b68:	d1f1      	bne.n	8006b4e <HAL_RCC_OscConfig+0x1e6>
 8006b6a:	e000      	b.n	8006b6e <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b6c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2201      	movs	r2, #1
 8006b74:	4013      	ands	r3, r2
 8006b76:	d100      	bne.n	8006b7a <HAL_RCC_OscConfig+0x212>
 8006b78:	e065      	b.n	8006c46 <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b10      	cmp	r3, #16
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_OscConfig+0x224>
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b18      	cmp	r3, #24
 8006b84:	d10e      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b03      	cmp	r3, #3
 8006b8a:	d10b      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b8c:	4b41      	ldr	r3, [pc, #260]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	2380      	movs	r3, #128	@ 0x80
 8006b92:	029b      	lsls	r3, r3, #10
 8006b94:	4013      	ands	r3, r2
 8006b96:	d055      	beq.n	8006c44 <HAL_RCC_OscConfig+0x2dc>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d151      	bne.n	8006c44 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e2ba      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	2380      	movs	r3, #128	@ 0x80
 8006baa:	025b      	lsls	r3, r3, #9
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d107      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x258>
 8006bb0:	4b38      	ldr	r3, [pc, #224]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	4b37      	ldr	r3, [pc, #220]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006bb6:	2180      	movs	r1, #128	@ 0x80
 8006bb8:	0249      	lsls	r1, r1, #9
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	601a      	str	r2, [r3, #0]
 8006bbe:	e013      	b.n	8006be8 <HAL_RCC_OscConfig+0x280>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	23a0      	movs	r3, #160	@ 0xa0
 8006bc6:	02db      	lsls	r3, r3, #11
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d107      	bne.n	8006bdc <HAL_RCC_OscConfig+0x274>
 8006bcc:	4b31      	ldr	r3, [pc, #196]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b30      	ldr	r3, [pc, #192]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006bd2:	21a0      	movs	r1, #160	@ 0xa0
 8006bd4:	02c9      	lsls	r1, r1, #11
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e005      	b.n	8006be8 <HAL_RCC_OscConfig+0x280>
 8006bdc:	4b2d      	ldr	r3, [pc, #180]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	4b2c      	ldr	r3, [pc, #176]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006be2:	4931      	ldr	r1, [pc, #196]	@ (8006ca8 <HAL_RCC_OscConfig+0x340>)
 8006be4:	400a      	ands	r2, r1
 8006be6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d014      	beq.n	8006c1a <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf0:	f7fc fc12 	bl	8003418 <HAL_GetTick>
 8006bf4:	0003      	movs	r3, r0
 8006bf6:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006bfa:	f7fc fc0d 	bl	8003418 <HAL_GetTick>
 8006bfe:	0002      	movs	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b64      	cmp	r3, #100	@ 0x64
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e286      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c0c:	4b21      	ldr	r3, [pc, #132]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	2380      	movs	r3, #128	@ 0x80
 8006c12:	029b      	lsls	r3, r3, #10
 8006c14:	4013      	ands	r3, r2
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCC_OscConfig+0x292>
 8006c18:	e015      	b.n	8006c46 <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1a:	f7fc fbfd 	bl	8003418 <HAL_GetTick>
 8006c1e:	0003      	movs	r3, r0
 8006c20:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006c24:	f7fc fbf8 	bl	8003418 <HAL_GetTick>
 8006c28:	0002      	movs	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b64      	cmp	r3, #100	@ 0x64
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e271      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c36:	4b17      	ldr	r3, [pc, #92]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	2380      	movs	r3, #128	@ 0x80
 8006c3c:	029b      	lsls	r3, r3, #10
 8006c3e:	4013      	ands	r3, r2
 8006c40:	d1f0      	bne.n	8006c24 <HAL_RCC_OscConfig+0x2bc>
 8006c42:	e000      	b.n	8006c46 <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c44:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d100      	bne.n	8006c52 <HAL_RCC_OscConfig+0x2ea>
 8006c50:	e073      	b.n	8006d3a <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d005      	beq.n	8006c64 <HAL_RCC_OscConfig+0x2fc>
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b18      	cmp	r3, #24
 8006c5c:	d128      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d125      	bne.n	8006cb0 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c64:	4b0b      	ldr	r3, [pc, #44]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	2380      	movs	r3, #128	@ 0x80
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d005      	beq.n	8006c7c <HAL_RCC_OscConfig+0x314>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e24e      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c7c:	4b05      	ldr	r3, [pc, #20]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	4a0a      	ldr	r2, [pc, #40]	@ (8006cac <HAL_RCC_OscConfig+0x344>)
 8006c82:	4013      	ands	r3, r2
 8006c84:	0019      	movs	r1, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	061a      	lsls	r2, r3, #24
 8006c8c:	4b01      	ldr	r3, [pc, #4]	@ (8006c94 <HAL_RCC_OscConfig+0x32c>)
 8006c8e:	430a      	orrs	r2, r1
 8006c90:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c92:	e052      	b.n	8006d3a <HAL_RCC_OscConfig+0x3d2>
 8006c94:	40021000 	.word	0x40021000
 8006c98:	ffff00ff 	.word	0xffff00ff
 8006c9c:	08007f28 	.word	0x08007f28
 8006ca0:	20000014 	.word	0x20000014
 8006ca4:	20000018 	.word	0x20000018
 8006ca8:	fffaffff 	.word	0xfffaffff
 8006cac:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d026      	beq.n	8006d06 <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cb8:	4bc7      	ldr	r3, [pc, #796]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	4bc6      	ldr	r3, [pc, #792]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006cbe:	2180      	movs	r1, #128	@ 0x80
 8006cc0:	0049      	lsls	r1, r1, #1
 8006cc2:	430a      	orrs	r2, r1
 8006cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc6:	f7fc fba7 	bl	8003418 <HAL_GetTick>
 8006cca:	0003      	movs	r3, r0
 8006ccc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006cd0:	f7fc fba2 	bl	8003418 <HAL_GetTick>
 8006cd4:	0002      	movs	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e21b      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ce2:	4bbd      	ldr	r3, [pc, #756]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	2380      	movs	r3, #128	@ 0x80
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	4013      	ands	r3, r2
 8006cec:	d0f0      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cee:	4bba      	ldr	r3, [pc, #744]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	4aba      	ldr	r2, [pc, #744]	@ (8006fdc <HAL_RCC_OscConfig+0x674>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	0019      	movs	r1, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	061a      	lsls	r2, r3, #24
 8006cfe:	4bb6      	ldr	r3, [pc, #728]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d00:	430a      	orrs	r2, r1
 8006d02:	605a      	str	r2, [r3, #4]
 8006d04:	e019      	b.n	8006d3a <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d06:	4bb4      	ldr	r3, [pc, #720]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	4bb3      	ldr	r3, [pc, #716]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d0c:	49b4      	ldr	r1, [pc, #720]	@ (8006fe0 <HAL_RCC_OscConfig+0x678>)
 8006d0e:	400a      	ands	r2, r1
 8006d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d12:	f7fc fb81 	bl	8003418 <HAL_GetTick>
 8006d16:	0003      	movs	r3, r0
 8006d18:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006d1c:	f7fc fb7c 	bl	8003418 <HAL_GetTick>
 8006d20:	0002      	movs	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e1f5      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d2e:	4baa      	ldr	r3, [pc, #680]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	2380      	movs	r3, #128	@ 0x80
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	4013      	ands	r3, r2
 8006d38:	d1f0      	bne.n	8006d1c <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2208      	movs	r2, #8
 8006d40:	4013      	ands	r3, r2
 8006d42:	d051      	beq.n	8006de8 <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d031      	beq.n	8006db0 <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d108      	bne.n	8006d66 <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006d54:	4aa0      	ldr	r2, [pc, #640]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d56:	2394      	movs	r3, #148	@ 0x94
 8006d58:	58d3      	ldr	r3, [r2, r3]
 8006d5a:	499f      	ldr	r1, [pc, #636]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d5c:	2204      	movs	r2, #4
 8006d5e:	4393      	bics	r3, r2
 8006d60:	2294      	movs	r2, #148	@ 0x94
 8006d62:	508b      	str	r3, [r1, r2]
 8006d64:	e007      	b.n	8006d76 <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006d66:	4a9c      	ldr	r2, [pc, #624]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d68:	2394      	movs	r3, #148	@ 0x94
 8006d6a:	58d3      	ldr	r3, [r2, r3]
 8006d6c:	499a      	ldr	r1, [pc, #616]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d6e:	2204      	movs	r2, #4
 8006d70:	4313      	orrs	r3, r2
 8006d72:	2294      	movs	r2, #148	@ 0x94
 8006d74:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d76:	4a98      	ldr	r2, [pc, #608]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d78:	2394      	movs	r3, #148	@ 0x94
 8006d7a:	58d3      	ldr	r3, [r2, r3]
 8006d7c:	4996      	ldr	r1, [pc, #600]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4313      	orrs	r3, r2
 8006d82:	2294      	movs	r2, #148	@ 0x94
 8006d84:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d86:	f7fc fb47 	bl	8003418 <HAL_GetTick>
 8006d8a:	0003      	movs	r3, r0
 8006d8c:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d8e:	e008      	b.n	8006da2 <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d90:	f7fc fb42 	bl	8003418 <HAL_GetTick>
 8006d94:	0002      	movs	r2, r0
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	2b11      	cmp	r3, #17
 8006d9c:	d901      	bls.n	8006da2 <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8006d9e:	2303      	movs	r3, #3
 8006da0:	e1bb      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006da2:	4a8d      	ldr	r2, [pc, #564]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006da4:	2394      	movs	r3, #148	@ 0x94
 8006da6:	58d3      	ldr	r3, [r2, r3]
 8006da8:	2202      	movs	r2, #2
 8006daa:	4013      	ands	r3, r2
 8006dac:	d0f0      	beq.n	8006d90 <HAL_RCC_OscConfig+0x428>
 8006dae:	e01b      	b.n	8006de8 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006db0:	4a89      	ldr	r2, [pc, #548]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006db2:	2394      	movs	r3, #148	@ 0x94
 8006db4:	58d3      	ldr	r3, [r2, r3]
 8006db6:	4988      	ldr	r1, [pc, #544]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	4393      	bics	r3, r2
 8006dbc:	2294      	movs	r2, #148	@ 0x94
 8006dbe:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc0:	f7fc fb2a 	bl	8003418 <HAL_GetTick>
 8006dc4:	0003      	movs	r3, r0
 8006dc6:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006dc8:	e008      	b.n	8006ddc <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dca:	f7fc fb25 	bl	8003418 <HAL_GetTick>
 8006dce:	0002      	movs	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b11      	cmp	r3, #17
 8006dd6:	d901      	bls.n	8006ddc <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e19e      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006ddc:	4a7e      	ldr	r2, [pc, #504]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006dde:	2394      	movs	r3, #148	@ 0x94
 8006de0:	58d3      	ldr	r3, [r2, r3]
 8006de2:	2202      	movs	r2, #2
 8006de4:	4013      	ands	r3, r2
 8006de6:	d1f0      	bne.n	8006dca <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2204      	movs	r2, #4
 8006dee:	4013      	ands	r3, r2
 8006df0:	d100      	bne.n	8006df4 <HAL_RCC_OscConfig+0x48c>
 8006df2:	e10d      	b.n	8007010 <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006df4:	201f      	movs	r0, #31
 8006df6:	183b      	adds	r3, r7, r0
 8006df8:	2200      	movs	r2, #0
 8006dfa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8006dfc:	4b76      	ldr	r3, [pc, #472]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006dfe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e00:	2380      	movs	r3, #128	@ 0x80
 8006e02:	055b      	lsls	r3, r3, #21
 8006e04:	4013      	ands	r3, r2
 8006e06:	d110      	bne.n	8006e2a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e08:	4b73      	ldr	r3, [pc, #460]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006e0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e0c:	4b72      	ldr	r3, [pc, #456]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006e0e:	2180      	movs	r1, #128	@ 0x80
 8006e10:	0549      	lsls	r1, r1, #21
 8006e12:	430a      	orrs	r2, r1
 8006e14:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e16:	4b70      	ldr	r3, [pc, #448]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006e18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e1a:	2380      	movs	r3, #128	@ 0x80
 8006e1c:	055b      	lsls	r3, r3, #21
 8006e1e:	4013      	ands	r3, r2
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e24:	183b      	adds	r3, r7, r0
 8006e26:	2201      	movs	r2, #1
 8006e28:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e2a:	4b6e      	ldr	r3, [pc, #440]	@ (8006fe4 <HAL_RCC_OscConfig+0x67c>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	2380      	movs	r3, #128	@ 0x80
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	4013      	ands	r3, r2
 8006e34:	d11a      	bne.n	8006e6c <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e36:	4b6b      	ldr	r3, [pc, #428]	@ (8006fe4 <HAL_RCC_OscConfig+0x67c>)
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8006fe4 <HAL_RCC_OscConfig+0x67c>)
 8006e3c:	2180      	movs	r1, #128	@ 0x80
 8006e3e:	0049      	lsls	r1, r1, #1
 8006e40:	430a      	orrs	r2, r1
 8006e42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e44:	f7fc fae8 	bl	8003418 <HAL_GetTick>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e4c:	e008      	b.n	8006e60 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e4e:	f7fc fae3 	bl	8003418 <HAL_GetTick>
 8006e52:	0002      	movs	r2, r0
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d901      	bls.n	8006e60 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	e15c      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e60:	4b60      	ldr	r3, [pc, #384]	@ (8006fe4 <HAL_RCC_OscConfig+0x67c>)
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	2380      	movs	r3, #128	@ 0x80
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	4013      	ands	r3, r2
 8006e6a:	d0f0      	beq.n	8006e4e <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	2201      	movs	r2, #1
 8006e72:	4013      	ands	r3, r2
 8006e74:	d01e      	beq.n	8006eb4 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	d010      	beq.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006e80:	4a55      	ldr	r2, [pc, #340]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006e82:	2390      	movs	r3, #144	@ 0x90
 8006e84:	58d3      	ldr	r3, [r2, r3]
 8006e86:	4954      	ldr	r1, [pc, #336]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006e88:	2204      	movs	r2, #4
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	2290      	movs	r2, #144	@ 0x90
 8006e8e:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006e90:	4a51      	ldr	r2, [pc, #324]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006e92:	2390      	movs	r3, #144	@ 0x90
 8006e94:	58d3      	ldr	r3, [r2, r3]
 8006e96:	4950      	ldr	r1, [pc, #320]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006e98:	2201      	movs	r2, #1
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	2290      	movs	r2, #144	@ 0x90
 8006e9e:	508b      	str	r3, [r1, r2]
 8006ea0:	e018      	b.n	8006ed4 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006ea2:	4a4d      	ldr	r2, [pc, #308]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006ea4:	2390      	movs	r3, #144	@ 0x90
 8006ea6:	58d3      	ldr	r3, [r2, r3]
 8006ea8:	494b      	ldr	r1, [pc, #300]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	4313      	orrs	r3, r2
 8006eae:	2290      	movs	r2, #144	@ 0x90
 8006eb0:	508b      	str	r3, [r1, r2]
 8006eb2:	e00f      	b.n	8006ed4 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006eb4:	4a48      	ldr	r2, [pc, #288]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006eb6:	2390      	movs	r3, #144	@ 0x90
 8006eb8:	58d3      	ldr	r3, [r2, r3]
 8006eba:	4947      	ldr	r1, [pc, #284]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	4393      	bics	r3, r2
 8006ec0:	2290      	movs	r2, #144	@ 0x90
 8006ec2:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ec4:	4a44      	ldr	r2, [pc, #272]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006ec6:	2390      	movs	r3, #144	@ 0x90
 8006ec8:	58d3      	ldr	r3, [r2, r3]
 8006eca:	4943      	ldr	r1, [pc, #268]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006ecc:	2204      	movs	r2, #4
 8006ece:	4393      	bics	r3, r2
 8006ed0:	2290      	movs	r2, #144	@ 0x90
 8006ed2:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d04f      	beq.n	8006f7c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006edc:	f7fc fa9c 	bl	8003418 <HAL_GetTick>
 8006ee0:	0003      	movs	r3, r0
 8006ee2:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ee4:	e009      	b.n	8006efa <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ee6:	f7fc fa97 	bl	8003418 <HAL_GetTick>
 8006eea:	0002      	movs	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	4a3d      	ldr	r2, [pc, #244]	@ (8006fe8 <HAL_RCC_OscConfig+0x680>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e10f      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006efa:	4a37      	ldr	r2, [pc, #220]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006efc:	2390      	movs	r3, #144	@ 0x90
 8006efe:	58d3      	ldr	r3, [r2, r3]
 8006f00:	2202      	movs	r2, #2
 8006f02:	4013      	ands	r3, r2
 8006f04:	d0ef      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	2280      	movs	r2, #128	@ 0x80
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	d01a      	beq.n	8006f46 <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006f10:	4a31      	ldr	r2, [pc, #196]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006f12:	2390      	movs	r3, #144	@ 0x90
 8006f14:	58d3      	ldr	r3, [r2, r3]
 8006f16:	4930      	ldr	r1, [pc, #192]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006f18:	2280      	movs	r2, #128	@ 0x80
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	2290      	movs	r2, #144	@ 0x90
 8006f1e:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006f20:	e009      	b.n	8006f36 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f22:	f7fc fa79 	bl	8003418 <HAL_GetTick>
 8006f26:	0002      	movs	r2, r0
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8006fe8 <HAL_RCC_OscConfig+0x680>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d901      	bls.n	8006f36 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e0f1      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006f36:	4a28      	ldr	r2, [pc, #160]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006f38:	2390      	movs	r3, #144	@ 0x90
 8006f3a:	58d2      	ldr	r2, [r2, r3]
 8006f3c:	2380      	movs	r3, #128	@ 0x80
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	4013      	ands	r3, r2
 8006f42:	d0ee      	beq.n	8006f22 <HAL_RCC_OscConfig+0x5ba>
 8006f44:	e059      	b.n	8006ffa <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006f46:	4a24      	ldr	r2, [pc, #144]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006f48:	2390      	movs	r3, #144	@ 0x90
 8006f4a:	58d3      	ldr	r3, [r2, r3]
 8006f4c:	4922      	ldr	r1, [pc, #136]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006f4e:	2280      	movs	r2, #128	@ 0x80
 8006f50:	4393      	bics	r3, r2
 8006f52:	2290      	movs	r2, #144	@ 0x90
 8006f54:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006f56:	e009      	b.n	8006f6c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f58:	f7fc fa5e 	bl	8003418 <HAL_GetTick>
 8006f5c:	0002      	movs	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	4a21      	ldr	r2, [pc, #132]	@ (8006fe8 <HAL_RCC_OscConfig+0x680>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e0d6      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006f6c:	4a1a      	ldr	r2, [pc, #104]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006f6e:	2390      	movs	r3, #144	@ 0x90
 8006f70:	58d2      	ldr	r2, [r2, r3]
 8006f72:	2380      	movs	r3, #128	@ 0x80
 8006f74:	011b      	lsls	r3, r3, #4
 8006f76:	4013      	ands	r3, r2
 8006f78:	d1ee      	bne.n	8006f58 <HAL_RCC_OscConfig+0x5f0>
 8006f7a:	e03e      	b.n	8006ffa <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f7c:	f7fc fa4c 	bl	8003418 <HAL_GetTick>
 8006f80:	0003      	movs	r3, r0
 8006f82:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f84:	e009      	b.n	8006f9a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f86:	f7fc fa47 	bl	8003418 <HAL_GetTick>
 8006f8a:	0002      	movs	r2, r0
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	4a15      	ldr	r2, [pc, #84]	@ (8006fe8 <HAL_RCC_OscConfig+0x680>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e0bf      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f9a:	4a0f      	ldr	r2, [pc, #60]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006f9c:	2390      	movs	r3, #144	@ 0x90
 8006f9e:	58d3      	ldr	r3, [r2, r3]
 8006fa0:	2202      	movs	r2, #2
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	d1ef      	bne.n	8006f86 <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006fa8:	2390      	movs	r3, #144	@ 0x90
 8006faa:	58d3      	ldr	r3, [r2, r3]
 8006fac:	2280      	movs	r2, #128	@ 0x80
 8006fae:	4013      	ands	r3, r2
 8006fb0:	d023      	beq.n	8006ffa <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006fb2:	4a09      	ldr	r2, [pc, #36]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006fb4:	2390      	movs	r3, #144	@ 0x90
 8006fb6:	58d3      	ldr	r3, [r2, r3]
 8006fb8:	4907      	ldr	r1, [pc, #28]	@ (8006fd8 <HAL_RCC_OscConfig+0x670>)
 8006fba:	2280      	movs	r2, #128	@ 0x80
 8006fbc:	4393      	bics	r3, r2
 8006fbe:	2290      	movs	r2, #144	@ 0x90
 8006fc0:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006fc2:	e013      	b.n	8006fec <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fc4:	f7fc fa28 	bl	8003418 <HAL_GetTick>
 8006fc8:	0002      	movs	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	4a06      	ldr	r2, [pc, #24]	@ (8006fe8 <HAL_RCC_OscConfig+0x680>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d90b      	bls.n	8006fec <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006fd4:	2303      	movs	r3, #3
 8006fd6:	e0a0      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
 8006fd8:	40021000 	.word	0x40021000
 8006fdc:	80ffffff 	.word	0x80ffffff
 8006fe0:	fffffeff 	.word	0xfffffeff
 8006fe4:	40007000 	.word	0x40007000
 8006fe8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006fec:	4a4d      	ldr	r2, [pc, #308]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 8006fee:	2390      	movs	r3, #144	@ 0x90
 8006ff0:	58d2      	ldr	r2, [r2, r3]
 8006ff2:	2380      	movs	r3, #128	@ 0x80
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d1e4      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ffa:	231f      	movs	r3, #31
 8006ffc:	18fb      	adds	r3, r7, r3
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d105      	bne.n	8007010 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007004:	4b47      	ldr	r3, [pc, #284]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 8007006:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007008:	4b46      	ldr	r3, [pc, #280]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 800700a:	4947      	ldr	r1, [pc, #284]	@ (8007128 <HAL_RCC_OscConfig+0x7c0>)
 800700c:	400a      	ands	r2, r1
 800700e:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007014:	2b00      	cmp	r3, #0
 8007016:	d100      	bne.n	800701a <HAL_RCC_OscConfig+0x6b2>
 8007018:	e07e      	b.n	8007118 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800701a:	4b42      	ldr	r3, [pc, #264]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2238      	movs	r2, #56	@ 0x38
 8007020:	4013      	ands	r3, r2
 8007022:	2b18      	cmp	r3, #24
 8007024:	d100      	bne.n	8007028 <HAL_RCC_OscConfig+0x6c0>
 8007026:	e075      	b.n	8007114 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800702c:	2b02      	cmp	r3, #2
 800702e:	d156      	bne.n	80070de <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007030:	4b3c      	ldr	r3, [pc, #240]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b3b      	ldr	r3, [pc, #236]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 8007036:	493d      	ldr	r1, [pc, #244]	@ (800712c <HAL_RCC_OscConfig+0x7c4>)
 8007038:	400a      	ands	r2, r1
 800703a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7fc f9ec 	bl	8003418 <HAL_GetTick>
 8007040:	0003      	movs	r3, r0
 8007042:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007044:	e008      	b.n	8007058 <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007046:	f7fc f9e7 	bl	8003418 <HAL_GetTick>
 800704a:	0002      	movs	r2, r0
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	1ad3      	subs	r3, r2, r3
 8007050:	2b02      	cmp	r3, #2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e060      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007058:	4b32      	ldr	r3, [pc, #200]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	2380      	movs	r3, #128	@ 0x80
 800705e:	049b      	lsls	r3, r3, #18
 8007060:	4013      	ands	r3, r2
 8007062:	d1f0      	bne.n	8007046 <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007064:	4b2f      	ldr	r3, [pc, #188]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	4a31      	ldr	r2, [pc, #196]	@ (8007130 <HAL_RCC_OscConfig+0x7c8>)
 800706a:	4013      	ands	r3, r2
 800706c:	0019      	movs	r1, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708a:	431a      	orrs	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007090:	431a      	orrs	r2, r3
 8007092:	4b24      	ldr	r3, [pc, #144]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 8007094:	430a      	orrs	r2, r1
 8007096:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8007098:	4b22      	ldr	r3, [pc, #136]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	4b21      	ldr	r3, [pc, #132]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 800709e:	2180      	movs	r1, #128	@ 0x80
 80070a0:	0549      	lsls	r1, r1, #21
 80070a2:	430a      	orrs	r2, r1
 80070a4:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	4b1e      	ldr	r3, [pc, #120]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 80070ac:	2180      	movs	r1, #128	@ 0x80
 80070ae:	0449      	lsls	r1, r1, #17
 80070b0:	430a      	orrs	r2, r1
 80070b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f7fc f9b0 	bl	8003418 <HAL_GetTick>
 80070b8:	0003      	movs	r3, r0
 80070ba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070bc:	e008      	b.n	80070d0 <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070be:	f7fc f9ab 	bl	8003418 <HAL_GetTick>
 80070c2:	0002      	movs	r2, r0
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e024      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070d0:	4b14      	ldr	r3, [pc, #80]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	2380      	movs	r3, #128	@ 0x80
 80070d6:	049b      	lsls	r3, r3, #18
 80070d8:	4013      	ands	r3, r2
 80070da:	d0f0      	beq.n	80070be <HAL_RCC_OscConfig+0x756>
 80070dc:	e01c      	b.n	8007118 <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070de:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	4b10      	ldr	r3, [pc, #64]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 80070e4:	4911      	ldr	r1, [pc, #68]	@ (800712c <HAL_RCC_OscConfig+0x7c4>)
 80070e6:	400a      	ands	r2, r1
 80070e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ea:	f7fc f995 	bl	8003418 <HAL_GetTick>
 80070ee:	0003      	movs	r3, r0
 80070f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070f4:	f7fc f990 	bl	8003418 <HAL_GetTick>
 80070f8:	0002      	movs	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e009      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007106:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <HAL_RCC_OscConfig+0x7bc>)
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	2380      	movs	r3, #128	@ 0x80
 800710c:	049b      	lsls	r3, r3, #18
 800710e:	4013      	ands	r3, r2
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x78c>
 8007112:	e001      	b.n	8007118 <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	0018      	movs	r0, r3
 800711c:	46bd      	mov	sp, r7
 800711e:	b008      	add	sp, #32
 8007120:	bdb0      	pop	{r4, r5, r7, pc}
 8007122:	46c0      	nop			@ (mov r8, r8)
 8007124:	40021000 	.word	0x40021000
 8007128:	efffffff 	.word	0xefffffff
 800712c:	feffffff 	.word	0xfeffffff
 8007130:	11c1808c 	.word	0x11c1808c

08007134 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8007134:	b5b0      	push	{r4, r5, r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800713e:	4b6c      	ldr	r3, [pc, #432]	@ (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2207      	movs	r2, #7
 8007144:	4013      	ands	r3, r2
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d911      	bls.n	8007170 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714c:	4b68      	ldr	r3, [pc, #416]	@ (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2207      	movs	r2, #7
 8007152:	4393      	bics	r3, r2
 8007154:	0019      	movs	r1, r3
 8007156:	4b66      	ldr	r3, [pc, #408]	@ (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007158:	683a      	ldr	r2, [r7, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800715e:	4b64      	ldr	r3, [pc, #400]	@ (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2207      	movs	r2, #7
 8007164:	4013      	ands	r3, r2
 8007166:	683a      	ldr	r2, [r7, #0]
 8007168:	429a      	cmp	r2, r3
 800716a:	d001      	beq.n	8007170 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e0bb      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2201      	movs	r2, #1
 8007176:	4013      	ands	r3, r2
 8007178:	d100      	bne.n	800717c <HAL_RCC_ClockConfig+0x48>
 800717a:	e064      	b.n	8007246 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	2b03      	cmp	r3, #3
 8007182:	d107      	bne.n	8007194 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007184:	4b5b      	ldr	r3, [pc, #364]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	2380      	movs	r3, #128	@ 0x80
 800718a:	049b      	lsls	r3, r3, #18
 800718c:	4013      	ands	r3, r2
 800718e:	d138      	bne.n	8007202 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e0a9      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d107      	bne.n	80071ac <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800719c:	4b55      	ldr	r3, [pc, #340]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	2380      	movs	r3, #128	@ 0x80
 80071a2:	029b      	lsls	r3, r3, #10
 80071a4:	4013      	ands	r3, r2
 80071a6:	d12c      	bne.n	8007202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	e09d      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80071b4:	4b4f      	ldr	r3, [pc, #316]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2202      	movs	r2, #2
 80071ba:	4013      	ands	r3, r2
 80071bc:	d121      	bne.n	8007202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	e092      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d107      	bne.n	80071da <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80071ca:	4b4a      	ldr	r3, [pc, #296]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	2380      	movs	r3, #128	@ 0x80
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	4013      	ands	r3, r2
 80071d4:	d115      	bne.n	8007202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	e086      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d107      	bne.n	80071f2 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071e2:	4a44      	ldr	r2, [pc, #272]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 80071e4:	2394      	movs	r3, #148	@ 0x94
 80071e6:	58d3      	ldr	r3, [r2, r3]
 80071e8:	2202      	movs	r2, #2
 80071ea:	4013      	ands	r3, r2
 80071ec:	d109      	bne.n	8007202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e07a      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071f2:	4a40      	ldr	r2, [pc, #256]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 80071f4:	2390      	movs	r3, #144	@ 0x90
 80071f6:	58d3      	ldr	r3, [r2, r3]
 80071f8:	2202      	movs	r2, #2
 80071fa:	4013      	ands	r3, r2
 80071fc:	d101      	bne.n	8007202 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e072      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007202:	4b3c      	ldr	r3, [pc, #240]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	2207      	movs	r2, #7
 8007208:	4393      	bics	r3, r2
 800720a:	0019      	movs	r1, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	4b38      	ldr	r3, [pc, #224]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007212:	430a      	orrs	r2, r1
 8007214:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007216:	f7fc f8ff 	bl	8003418 <HAL_GetTick>
 800721a:	0003      	movs	r3, r0
 800721c:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800721e:	e009      	b.n	8007234 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007220:	f7fc f8fa 	bl	8003418 <HAL_GetTick>
 8007224:	0002      	movs	r2, r0
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	4a33      	ldr	r2, [pc, #204]	@ (80072f8 <HAL_RCC_ClockConfig+0x1c4>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d901      	bls.n	8007234 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	e059      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007234:	4b2f      	ldr	r3, [pc, #188]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	2238      	movs	r2, #56	@ 0x38
 800723a:	401a      	ands	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	429a      	cmp	r2, r3
 8007244:	d1ec      	bne.n	8007220 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2202      	movs	r2, #2
 800724c:	4013      	ands	r3, r2
 800724e:	d009      	beq.n	8007264 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007250:	4b28      	ldr	r3, [pc, #160]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	4a29      	ldr	r2, [pc, #164]	@ (80072fc <HAL_RCC_ClockConfig+0x1c8>)
 8007256:	4013      	ands	r3, r2
 8007258:	0019      	movs	r1, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689a      	ldr	r2, [r3, #8]
 800725e:	4b25      	ldr	r3, [pc, #148]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 8007260:	430a      	orrs	r2, r1
 8007262:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007264:	4b22      	ldr	r3, [pc, #136]	@ (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2207      	movs	r2, #7
 800726a:	4013      	ands	r3, r2
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	d211      	bcs.n	8007296 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007272:	4b1f      	ldr	r3, [pc, #124]	@ (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2207      	movs	r2, #7
 8007278:	4393      	bics	r3, r2
 800727a:	0019      	movs	r1, r3
 800727c:	4b1c      	ldr	r3, [pc, #112]	@ (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007284:	4b1a      	ldr	r3, [pc, #104]	@ (80072f0 <HAL_RCC_ClockConfig+0x1bc>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2207      	movs	r2, #7
 800728a:	4013      	ands	r3, r2
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d001      	beq.n	8007296 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e028      	b.n	80072e8 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2204      	movs	r2, #4
 800729c:	4013      	ands	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80072a0:	4b14      	ldr	r3, [pc, #80]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	4a16      	ldr	r2, [pc, #88]	@ (8007300 <HAL_RCC_ClockConfig+0x1cc>)
 80072a6:	4013      	ands	r3, r2
 80072a8:	0019      	movs	r1, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	4b11      	ldr	r3, [pc, #68]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 80072b0:	430a      	orrs	r2, r1
 80072b2:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80072b4:	f000 f88e 	bl	80073d4 <HAL_RCC_GetSysClockFreq>
 80072b8:	0001      	movs	r1, r0
 80072ba:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <HAL_RCC_ClockConfig+0x1c0>)
 80072bc:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072be:	0a1b      	lsrs	r3, r3, #8
 80072c0:	220f      	movs	r2, #15
 80072c2:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80072c4:	4a0f      	ldr	r2, [pc, #60]	@ (8007304 <HAL_RCC_ClockConfig+0x1d0>)
 80072c6:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80072c8:	001a      	movs	r2, r3
 80072ca:	231f      	movs	r3, #31
 80072cc:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80072ce:	000a      	movs	r2, r1
 80072d0:	40da      	lsrs	r2, r3
 80072d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007308 <HAL_RCC_ClockConfig+0x1d4>)
 80072d4:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80072d6:	250b      	movs	r5, #11
 80072d8:	197c      	adds	r4, r7, r5
 80072da:	2003      	movs	r0, #3
 80072dc:	f7fc f842 	bl	8003364 <HAL_InitTick>
 80072e0:	0003      	movs	r3, r0
 80072e2:	7023      	strb	r3, [r4, #0]

  return halstatus;
 80072e4:	197b      	adds	r3, r7, r5
 80072e6:	781b      	ldrb	r3, [r3, #0]
}
 80072e8:	0018      	movs	r0, r3
 80072ea:	46bd      	mov	sp, r7
 80072ec:	b004      	add	sp, #16
 80072ee:	bdb0      	pop	{r4, r5, r7, pc}
 80072f0:	40022000 	.word	0x40022000
 80072f4:	40021000 	.word	0x40021000
 80072f8:	00001388 	.word	0x00001388
 80072fc:	fffff0ff 	.word	0xfffff0ff
 8007300:	ffff8fff 	.word	0xffff8fff
 8007304:	08007f28 	.word	0x08007f28
 8007308:	20000014 	.word	0x20000014

0800730c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCO2DIV_512 division by 512 applied to MCO clock
  *            @arg @ref RCC_MCO2DIV_1024 division by 1024 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08c      	sub	sp, #48	@ 0x30
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  uint32_t mco_gpio_index;
  GPIO_TypeDef *mco_gpio_port;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007318:	2010      	movs	r0, #16
 800731a:	183b      	adds	r3, r7, r0
 800731c:	2202      	movs	r2, #2
 800731e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007320:	183b      	adds	r3, r7, r0
 8007322:	2203      	movs	r2, #3
 8007324:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007326:	183b      	adds	r3, r7, r0
 8007328:	2200      	movs	r2, #0
 800732a:	609a      	str	r2, [r3, #8]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	2380      	movs	r3, #128	@ 0x80
 8007330:	055b      	lsls	r3, r3, #21
 8007332:	4013      	ands	r3, r2
 8007334:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	0c1b      	lsrs	r3, r3, #16
 800733a:	220f      	movs	r2, #15
 800733c:	4013      	ands	r3, r2
 800733e:	22a0      	movs	r2, #160	@ 0xa0
 8007340:	0352      	lsls	r2, r2, #13
 8007342:	4694      	mov	ip, r2
 8007344:	4463      	add	r3, ip
 8007346:	029b      	lsls	r3, r3, #10
 8007348:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	0c1b      	lsrs	r3, r3, #16
 800734e:	220f      	movs	r2, #15
 8007350:	4013      	ands	r3, r2
 8007352:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->IOPENR, (1UL << mco_gpio_index));
 8007354:	4b1d      	ldr	r3, [pc, #116]	@ (80073cc <HAL_RCC_MCOConfig+0xc0>)
 8007356:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007358:	2201      	movs	r2, #1
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	409a      	lsls	r2, r3
 800735e:	4b1b      	ldr	r3, [pc, #108]	@ (80073cc <HAL_RCC_MCOConfig+0xc0>)
 8007360:	430a      	orrs	r2, r1
 8007362:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  GPIO_InitStruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	041b      	lsls	r3, r3, #16
 8007368:	0c1a      	lsrs	r2, r3, #16
 800736a:	183b      	adds	r3, r7, r0
 800736c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	0d1b      	lsrs	r3, r3, #20
 8007372:	22ff      	movs	r2, #255	@ 0xff
 8007374:	401a      	ands	r2, r3
 8007376:	183b      	adds	r3, r7, r0
 8007378:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(mco_gpio_port, &GPIO_InitStruct);
 800737a:	183a      	adds	r2, r7, r0
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	0011      	movs	r1, r2
 8007380:	0018      	movs	r0, r3
 8007382:	f7fc fc37 	bl	8003bf4 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 8007386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10a      	bne.n	80073a2 <HAL_RCC_MCOConfig+0x96>
  {
    assert_param(IS_RCC_MCO1DIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1SEL | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800738c:	4b0f      	ldr	r3, [pc, #60]	@ (80073cc <HAL_RCC_MCOConfig+0xc0>)
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	021b      	lsls	r3, r3, #8
 8007392:	0a19      	lsrs	r1, r3, #8
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	431a      	orrs	r2, r3
 800739a:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <HAL_RCC_MCOConfig+0xc0>)
 800739c:	430a      	orrs	r2, r1
 800739e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    /* unexpected case: added to resolve MISRA 15.7 rule */
  }
}
 80073a0:	e00f      	b.n	80073c2 <HAL_RCC_MCOConfig+0xb6>
  else if (mcoindex == RCC_MCO2_INDEX)
 80073a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073a4:	2380      	movs	r3, #128	@ 0x80
 80073a6:	055b      	lsls	r3, r3, #21
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d10a      	bne.n	80073c2 <HAL_RCC_MCOConfig+0xb6>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2SEL | RCC_CFGR_MCO2PRE), (RCC_MCOSource | RCC_MCODiv));
 80073ac:	4b07      	ldr	r3, [pc, #28]	@ (80073cc <HAL_RCC_MCOConfig+0xc0>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	4a07      	ldr	r2, [pc, #28]	@ (80073d0 <HAL_RCC_MCOConfig+0xc4>)
 80073b2:	4013      	ands	r3, r2
 80073b4:	0019      	movs	r1, r3
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	431a      	orrs	r2, r3
 80073bc:	4b03      	ldr	r3, [pc, #12]	@ (80073cc <HAL_RCC_MCOConfig+0xc0>)
 80073be:	430a      	orrs	r2, r1
 80073c0:	609a      	str	r2, [r3, #8]
}
 80073c2:	46c0      	nop			@ (mov r8, r8)
 80073c4:	46bd      	mov	sp, r7
 80073c6:	b00c      	add	sp, #48	@ 0x30
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	46c0      	nop			@ (mov r8, r8)
 80073cc:	40021000 	.word	0x40021000
 80073d0:	ff00ffff 	.word	0xff00ffff

080073d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08a      	sub	sp, #40	@ 0x28
 80073d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80073da:	2300      	movs	r3, #0
 80073dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073e2:	4b46      	ldr	r3, [pc, #280]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2238      	movs	r2, #56	@ 0x38
 80073e8:	4013      	ands	r3, r2
 80073ea:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073ec:	4b43      	ldr	r3, [pc, #268]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	2203      	movs	r2, #3
 80073f2:	4013      	ands	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <HAL_RCC_GetSysClockFreq+0x34>
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b18      	cmp	r3, #24
 8007400:	d125      	bne.n	800744e <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d122      	bne.n	800744e <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007408:	4b3c      	ldr	r3, [pc, #240]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2208      	movs	r2, #8
 800740e:	4013      	ands	r3, r2
 8007410:	d107      	bne.n	8007422 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8007412:	4a3a      	ldr	r2, [pc, #232]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 8007414:	2394      	movs	r3, #148	@ 0x94
 8007416:	58d3      	ldr	r3, [r2, r3]
 8007418:	0a1b      	lsrs	r3, r3, #8
 800741a:	220f      	movs	r2, #15
 800741c:	4013      	ands	r3, r2
 800741e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007420:	e005      	b.n	800742e <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007422:	4b36      	ldr	r3, [pc, #216]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	091b      	lsrs	r3, r3, #4
 8007428:	220f      	movs	r2, #15
 800742a:	4013      	ands	r3, r2
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	2b0b      	cmp	r3, #11
 8007432:	d901      	bls.n	8007438 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8007438:	4b31      	ldr	r3, [pc, #196]	@ (8007500 <HAL_RCC_GetSysClockFreq+0x12c>)
 800743a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800743c:	0092      	lsls	r2, r2, #2
 800743e:	58d3      	ldr	r3, [r2, r3]
 8007440:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d11b      	bne.n	8007480 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800744c:	e018      	b.n	8007480 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800744e:	69bb      	ldr	r3, [r7, #24]
 8007450:	2b08      	cmp	r3, #8
 8007452:	d102      	bne.n	800745a <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007454:	4b2b      	ldr	r3, [pc, #172]	@ (8007504 <HAL_RCC_GetSysClockFreq+0x130>)
 8007456:	623b      	str	r3, [r7, #32]
 8007458:	e012      	b.n	8007480 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	2b10      	cmp	r3, #16
 800745e:	d102      	bne.n	8007466 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007460:	4b28      	ldr	r3, [pc, #160]	@ (8007504 <HAL_RCC_GetSysClockFreq+0x130>)
 8007462:	623b      	str	r3, [r7, #32]
 8007464:	e00c      	b.n	8007480 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	2b20      	cmp	r3, #32
 800746a:	d103      	bne.n	8007474 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800746c:	23fa      	movs	r3, #250	@ 0xfa
 800746e:	01db      	lsls	r3, r3, #7
 8007470:	623b      	str	r3, [r7, #32]
 8007472:	e005      	b.n	8007480 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	2b28      	cmp	r3, #40	@ 0x28
 8007478:	d102      	bne.n	8007480 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800747a:	2380      	movs	r3, #128	@ 0x80
 800747c:	021b      	lsls	r3, r3, #8
 800747e:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	2b18      	cmp	r3, #24
 8007484:	d135      	bne.n	80074f2 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007486:	4b1d      	ldr	r3, [pc, #116]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	2203      	movs	r2, #3
 800748c:	4013      	ands	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007490:	4b1a      	ldr	r3, [pc, #104]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	2207      	movs	r2, #7
 8007498:	4013      	ands	r3, r2
 800749a:	3301      	adds	r3, #1
 800749c:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d003      	beq.n	80074ac <HAL_RCC_GetSysClockFreq+0xd8>
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d003      	beq.n	80074b2 <HAL_RCC_GetSysClockFreq+0xde>
 80074aa:	e005      	b.n	80074b8 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80074ac:	4b15      	ldr	r3, [pc, #84]	@ (8007504 <HAL_RCC_GetSysClockFreq+0x130>)
 80074ae:	61fb      	str	r3, [r7, #28]
        break;
 80074b0:	e005      	b.n	80074be <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80074b2:	4b14      	ldr	r3, [pc, #80]	@ (8007504 <HAL_RCC_GetSysClockFreq+0x130>)
 80074b4:	61fb      	str	r3, [r7, #28]
        break;
 80074b6:	e002      	b.n	80074be <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80074b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ba:	61fb      	str	r3, [r7, #28]
        break;
 80074bc:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80074be:	4b0f      	ldr	r3, [pc, #60]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	0a1b      	lsrs	r3, r3, #8
 80074c4:	227f      	movs	r2, #127	@ 0x7f
 80074c6:	4013      	ands	r3, r2
 80074c8:	69fa      	ldr	r2, [r7, #28]
 80074ca:	4353      	muls	r3, r2
 80074cc:	68f9      	ldr	r1, [r7, #12]
 80074ce:	0018      	movs	r0, r3
 80074d0:	f7f8 fe1a 	bl	8000108 <__udivsi3>
 80074d4:	0003      	movs	r3, r0
 80074d6:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80074d8:	4b08      	ldr	r3, [pc, #32]	@ (80074fc <HAL_RCC_GetSysClockFreq+0x128>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	0f5b      	lsrs	r3, r3, #29
 80074de:	2207      	movs	r2, #7
 80074e0:	4013      	ands	r3, r2
 80074e2:	3301      	adds	r3, #1
 80074e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	68b8      	ldr	r0, [r7, #8]
 80074ea:	f7f8 fe0d 	bl	8000108 <__udivsi3>
 80074ee:	0003      	movs	r3, r0
 80074f0:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80074f2:	6a3b      	ldr	r3, [r7, #32]
}
 80074f4:	0018      	movs	r0, r3
 80074f6:	46bd      	mov	sp, r7
 80074f8:	b00a      	add	sp, #40	@ 0x28
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	40021000 	.word	0x40021000
 8007500:	08007f38 	.word	0x08007f38
 8007504:	00f42400 	.word	0x00f42400

08007508 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007514:	4b2f      	ldr	r3, [pc, #188]	@ (80075d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007516:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007518:	2380      	movs	r3, #128	@ 0x80
 800751a:	055b      	lsls	r3, r3, #21
 800751c:	4013      	ands	r3, r2
 800751e:	d004      	beq.n	800752a <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007520:	f7ff f998 	bl	8006854 <HAL_PWREx_GetVoltageRange>
 8007524:	0003      	movs	r3, r0
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e017      	b.n	800755a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800752a:	4b2a      	ldr	r3, [pc, #168]	@ (80075d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800752c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800752e:	4b29      	ldr	r3, [pc, #164]	@ (80075d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007530:	2180      	movs	r1, #128	@ 0x80
 8007532:	0549      	lsls	r1, r1, #21
 8007534:	430a      	orrs	r2, r1
 8007536:	659a      	str	r2, [r3, #88]	@ 0x58
 8007538:	4b26      	ldr	r3, [pc, #152]	@ (80075d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800753a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800753c:	2380      	movs	r3, #128	@ 0x80
 800753e:	055b      	lsls	r3, r3, #21
 8007540:	4013      	ands	r3, r2
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007546:	f7ff f985 	bl	8006854 <HAL_PWREx_GetVoltageRange>
 800754a:	0003      	movs	r3, r0
 800754c:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800754e:	4b21      	ldr	r3, [pc, #132]	@ (80075d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007550:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007552:	4b20      	ldr	r3, [pc, #128]	@ (80075d4 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007554:	4920      	ldr	r1, [pc, #128]	@ (80075d8 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 8007556:	400a      	ands	r2, r1
 8007558:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	2380      	movs	r3, #128	@ 0x80
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	429a      	cmp	r2, r3
 8007562:	d111      	bne.n	8007588 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b80      	cmp	r3, #128	@ 0x80
 8007568:	d91c      	bls.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2bb0      	cmp	r3, #176	@ 0xb0
 800756e:	d902      	bls.n	8007576 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007570:	2302      	movs	r3, #2
 8007572:	613b      	str	r3, [r7, #16]
 8007574:	e016      	b.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2b90      	cmp	r3, #144	@ 0x90
 800757a:	d902      	bls.n	8007582 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800757c:	2301      	movs	r3, #1
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	e010      	b.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8007582:	2300      	movs	r3, #0
 8007584:	613b      	str	r3, [r7, #16]
 8007586:	e00d      	b.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b7f      	cmp	r3, #127	@ 0x7f
 800758c:	d902      	bls.n	8007594 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 800758e:	2302      	movs	r3, #2
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	e007      	b.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b70      	cmp	r3, #112	@ 0x70
 8007598:	d102      	bne.n	80075a0 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800759a:	2301      	movs	r3, #1
 800759c:	613b      	str	r3, [r7, #16]
 800759e:	e001      	b.n	80075a4 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80075a0:	2300      	movs	r3, #0
 80075a2:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80075a4:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2207      	movs	r2, #7
 80075aa:	4393      	bics	r3, r2
 80075ac:	0019      	movs	r1, r3
 80075ae:	4b0b      	ldr	r3, [pc, #44]	@ (80075dc <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80075b6:	4b09      	ldr	r3, [pc, #36]	@ (80075dc <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	2207      	movs	r2, #7
 80075bc:	4013      	ands	r3, r2
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d001      	beq.n	80075c8 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e000      	b.n	80075ca <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	0018      	movs	r0, r3
 80075cc:	46bd      	mov	sp, r7
 80075ce:	b006      	add	sp, #24
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			@ (mov r8, r8)
 80075d4:	40021000 	.word	0x40021000
 80075d8:	efffffff 	.word	0xefffffff
 80075dc:	40022000 	.word	0x40022000

080075e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80075e8:	2313      	movs	r3, #19
 80075ea:	18fb      	adds	r3, r7, r3
 80075ec:	2200      	movs	r2, #0
 80075ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80075f0:	2312      	movs	r3, #18
 80075f2:	18fb      	adds	r3, r7, r3
 80075f4:	2200      	movs	r2, #0
 80075f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	2380      	movs	r3, #128	@ 0x80
 80075fe:	021b      	lsls	r3, r3, #8
 8007600:	4013      	ands	r3, r2
 8007602:	d100      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007604:	e0b7      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007606:	2011      	movs	r0, #17
 8007608:	183b      	adds	r3, r7, r0
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800760e:	4b4c      	ldr	r3, [pc, #304]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007610:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007612:	2380      	movs	r3, #128	@ 0x80
 8007614:	055b      	lsls	r3, r3, #21
 8007616:	4013      	ands	r3, r2
 8007618:	d110      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800761a:	4b49      	ldr	r3, [pc, #292]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800761c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800761e:	4b48      	ldr	r3, [pc, #288]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007620:	2180      	movs	r1, #128	@ 0x80
 8007622:	0549      	lsls	r1, r1, #21
 8007624:	430a      	orrs	r2, r1
 8007626:	659a      	str	r2, [r3, #88]	@ 0x58
 8007628:	4b45      	ldr	r3, [pc, #276]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800762a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800762c:	2380      	movs	r3, #128	@ 0x80
 800762e:	055b      	lsls	r3, r3, #21
 8007630:	4013      	ands	r3, r2
 8007632:	60bb      	str	r3, [r7, #8]
 8007634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007636:	183b      	adds	r3, r7, r0
 8007638:	2201      	movs	r2, #1
 800763a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800763c:	4b41      	ldr	r3, [pc, #260]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	4b40      	ldr	r3, [pc, #256]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007642:	2180      	movs	r1, #128	@ 0x80
 8007644:	0049      	lsls	r1, r1, #1
 8007646:	430a      	orrs	r2, r1
 8007648:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800764a:	f7fb fee5 	bl	8003418 <HAL_GetTick>
 800764e:	0003      	movs	r3, r0
 8007650:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007652:	e00b      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007654:	f7fb fee0 	bl	8003418 <HAL_GetTick>
 8007658:	0002      	movs	r2, r0
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d904      	bls.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007662:	2313      	movs	r3, #19
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	2203      	movs	r2, #3
 8007668:	701a      	strb	r2, [r3, #0]
        break;
 800766a:	e005      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800766c:	4b35      	ldr	r3, [pc, #212]	@ (8007744 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	2380      	movs	r3, #128	@ 0x80
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4013      	ands	r3, r2
 8007676:	d0ed      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007678:	2313      	movs	r3, #19
 800767a:	18fb      	adds	r3, r7, r3
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d168      	bne.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007682:	4a2f      	ldr	r2, [pc, #188]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007684:	2390      	movs	r3, #144	@ 0x90
 8007686:	58d2      	ldr	r2, [r2, r3]
 8007688:	23c0      	movs	r3, #192	@ 0xc0
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	4013      	ands	r3, r2
 800768e:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01f      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	429a      	cmp	r2, r3
 800769e:	d01a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80076a0:	4a27      	ldr	r2, [pc, #156]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076a2:	2390      	movs	r3, #144	@ 0x90
 80076a4:	58d3      	ldr	r3, [r2, r3]
 80076a6:	4a28      	ldr	r2, [pc, #160]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80076a8:	4013      	ands	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076ac:	4a24      	ldr	r2, [pc, #144]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076ae:	2390      	movs	r3, #144	@ 0x90
 80076b0:	58d3      	ldr	r3, [r2, r3]
 80076b2:	4923      	ldr	r1, [pc, #140]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076b4:	2280      	movs	r2, #128	@ 0x80
 80076b6:	0252      	lsls	r2, r2, #9
 80076b8:	4313      	orrs	r3, r2
 80076ba:	2290      	movs	r2, #144	@ 0x90
 80076bc:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076be:	4a20      	ldr	r2, [pc, #128]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076c0:	2390      	movs	r3, #144	@ 0x90
 80076c2:	58d3      	ldr	r3, [r2, r3]
 80076c4:	491e      	ldr	r1, [pc, #120]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076c6:	4a21      	ldr	r2, [pc, #132]	@ (800774c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	2290      	movs	r2, #144	@ 0x90
 80076cc:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80076ce:	491c      	ldr	r1, [pc, #112]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80076d0:	2290      	movs	r2, #144	@ 0x90
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	2201      	movs	r2, #1
 80076da:	4013      	ands	r3, r2
 80076dc:	d017      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076de:	f7fb fe9b 	bl	8003418 <HAL_GetTick>
 80076e2:	0003      	movs	r3, r0
 80076e4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80076e6:	e00c      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e8:	f7fb fe96 	bl	8003418 <HAL_GetTick>
 80076ec:	0002      	movs	r2, r0
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	4a17      	ldr	r2, [pc, #92]	@ (8007750 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d904      	bls.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 80076f8:	2313      	movs	r3, #19
 80076fa:	18fb      	adds	r3, r7, r3
 80076fc:	2203      	movs	r2, #3
 80076fe:	701a      	strb	r2, [r3, #0]
            break;
 8007700:	e005      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007702:	4a0f      	ldr	r2, [pc, #60]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007704:	2390      	movs	r3, #144	@ 0x90
 8007706:	58d3      	ldr	r3, [r2, r3]
 8007708:	2202      	movs	r2, #2
 800770a:	4013      	ands	r3, r2
 800770c:	d0ec      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 800770e:	2313      	movs	r3, #19
 8007710:	18fb      	adds	r3, r7, r3
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10b      	bne.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007718:	4a09      	ldr	r2, [pc, #36]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800771a:	2390      	movs	r3, #144	@ 0x90
 800771c:	58d3      	ldr	r3, [r2, r3]
 800771e:	4a0a      	ldr	r2, [pc, #40]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007720:	401a      	ands	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007726:	4906      	ldr	r1, [pc, #24]	@ (8007740 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007728:	4313      	orrs	r3, r2
 800772a:	2290      	movs	r2, #144	@ 0x90
 800772c:	508b      	str	r3, [r1, r2]
 800772e:	e017      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007730:	2312      	movs	r3, #18
 8007732:	18fb      	adds	r3, r7, r3
 8007734:	2213      	movs	r2, #19
 8007736:	18ba      	adds	r2, r7, r2
 8007738:	7812      	ldrb	r2, [r2, #0]
 800773a:	701a      	strb	r2, [r3, #0]
 800773c:	e010      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800773e:	46c0      	nop			@ (mov r8, r8)
 8007740:	40021000 	.word	0x40021000
 8007744:	40007000 	.word	0x40007000
 8007748:	fffffcff 	.word	0xfffffcff
 800774c:	fffeffff 	.word	0xfffeffff
 8007750:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007754:	2312      	movs	r3, #18
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	2213      	movs	r2, #19
 800775a:	18ba      	adds	r2, r7, r2
 800775c:	7812      	ldrb	r2, [r2, #0]
 800775e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007760:	2311      	movs	r3, #17
 8007762:	18fb      	adds	r3, r7, r3
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d105      	bne.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800776a:	4b84      	ldr	r3, [pc, #528]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800776c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800776e:	4b83      	ldr	r3, [pc, #524]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007770:	4983      	ldr	r1, [pc, #524]	@ (8007980 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8007772:	400a      	ands	r2, r1
 8007774:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2201      	movs	r2, #1
 800777c:	4013      	ands	r3, r2
 800777e:	d00b      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007780:	4a7e      	ldr	r2, [pc, #504]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007782:	2388      	movs	r3, #136	@ 0x88
 8007784:	58d3      	ldr	r3, [r2, r3]
 8007786:	2203      	movs	r2, #3
 8007788:	4393      	bics	r3, r2
 800778a:	001a      	movs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	497a      	ldr	r1, [pc, #488]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007792:	4313      	orrs	r3, r2
 8007794:	2288      	movs	r2, #136	@ 0x88
 8007796:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2202      	movs	r2, #2
 800779e:	4013      	ands	r3, r2
 80077a0:	d00b      	beq.n	80077ba <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077a2:	4a76      	ldr	r2, [pc, #472]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80077a4:	2388      	movs	r3, #136	@ 0x88
 80077a6:	58d3      	ldr	r3, [r2, r3]
 80077a8:	220c      	movs	r2, #12
 80077aa:	4393      	bics	r3, r2
 80077ac:	001a      	movs	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	4972      	ldr	r1, [pc, #456]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80077b4:	4313      	orrs	r3, r2
 80077b6:	2288      	movs	r2, #136	@ 0x88
 80077b8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2210      	movs	r2, #16
 80077c0:	4013      	ands	r3, r2
 80077c2:	d00a      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077c4:	4a6d      	ldr	r2, [pc, #436]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80077c6:	2388      	movs	r3, #136	@ 0x88
 80077c8:	58d3      	ldr	r3, [r2, r3]
 80077ca:	4a6e      	ldr	r2, [pc, #440]	@ (8007984 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80077cc:	401a      	ands	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	496a      	ldr	r1, [pc, #424]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	2288      	movs	r2, #136	@ 0x88
 80077d8:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2208      	movs	r2, #8
 80077e0:	4013      	ands	r3, r2
 80077e2:	d00a      	beq.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80077e4:	4a65      	ldr	r2, [pc, #404]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80077e6:	2388      	movs	r3, #136	@ 0x88
 80077e8:	58d3      	ldr	r3, [r2, r3]
 80077ea:	4a67      	ldr	r2, [pc, #412]	@ (8007988 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80077ec:	401a      	ands	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	4962      	ldr	r1, [pc, #392]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	2288      	movs	r2, #136	@ 0x88
 80077f8:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2220      	movs	r2, #32
 8007800:	4013      	ands	r3, r2
 8007802:	d00a      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007804:	4a5d      	ldr	r2, [pc, #372]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007806:	2388      	movs	r3, #136	@ 0x88
 8007808:	58d3      	ldr	r3, [r2, r3]
 800780a:	4a60      	ldr	r2, [pc, #384]	@ (800798c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 800780c:	401a      	ands	r2, r3
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	495a      	ldr	r1, [pc, #360]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007814:	4313      	orrs	r3, r2
 8007816:	2288      	movs	r2, #136	@ 0x88
 8007818:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2240      	movs	r2, #64	@ 0x40
 8007820:	4013      	ands	r3, r2
 8007822:	d00a      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007824:	4a55      	ldr	r2, [pc, #340]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007826:	2388      	movs	r3, #136	@ 0x88
 8007828:	58d3      	ldr	r3, [r2, r3]
 800782a:	4a59      	ldr	r2, [pc, #356]	@ (8007990 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800782c:	401a      	ands	r2, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	4952      	ldr	r1, [pc, #328]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007834:	4313      	orrs	r3, r2
 8007836:	2288      	movs	r2, #136	@ 0x88
 8007838:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2280      	movs	r2, #128	@ 0x80
 8007840:	4013      	ands	r3, r2
 8007842:	d00a      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007844:	4a4d      	ldr	r2, [pc, #308]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007846:	2388      	movs	r3, #136	@ 0x88
 8007848:	58d3      	ldr	r3, [r2, r3]
 800784a:	4a52      	ldr	r2, [pc, #328]	@ (8007994 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 800784c:	401a      	ands	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	494a      	ldr	r1, [pc, #296]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007854:	4313      	orrs	r3, r2
 8007856:	2288      	movs	r2, #136	@ 0x88
 8007858:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	2380      	movs	r3, #128	@ 0x80
 8007860:	005b      	lsls	r3, r3, #1
 8007862:	4013      	ands	r3, r2
 8007864:	d00a      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007866:	4a45      	ldr	r2, [pc, #276]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007868:	2388      	movs	r3, #136	@ 0x88
 800786a:	58d3      	ldr	r3, [r2, r3]
 800786c:	4a4a      	ldr	r2, [pc, #296]	@ (8007998 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800786e:	401a      	ands	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a1b      	ldr	r3, [r3, #32]
 8007874:	4941      	ldr	r1, [pc, #260]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007876:	4313      	orrs	r3, r2
 8007878:	2288      	movs	r2, #136	@ 0x88
 800787a:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	2380      	movs	r3, #128	@ 0x80
 8007882:	01db      	lsls	r3, r3, #7
 8007884:	4013      	ands	r3, r2
 8007886:	d017      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800788c:	2380      	movs	r3, #128	@ 0x80
 800788e:	055b      	lsls	r3, r3, #21
 8007890:	429a      	cmp	r2, r3
 8007892:	d106      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 8007894:	4b39      	ldr	r3, [pc, #228]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	4b38      	ldr	r3, [pc, #224]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800789a:	2180      	movs	r1, #128	@ 0x80
 800789c:	0249      	lsls	r1, r1, #9
 800789e:	430a      	orrs	r2, r1
 80078a0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80078a2:	4a36      	ldr	r2, [pc, #216]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80078a4:	2388      	movs	r3, #136	@ 0x88
 80078a6:	58d3      	ldr	r3, [r2, r3]
 80078a8:	4a3c      	ldr	r2, [pc, #240]	@ (800799c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80078aa:	401a      	ands	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078b0:	4932      	ldr	r1, [pc, #200]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	2288      	movs	r2, #136	@ 0x88
 80078b6:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	2380      	movs	r3, #128	@ 0x80
 80078be:	019b      	lsls	r3, r3, #6
 80078c0:	4013      	ands	r3, r2
 80078c2:	d017      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078c8:	2380      	movs	r3, #128	@ 0x80
 80078ca:	051b      	lsls	r3, r3, #20
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d106      	bne.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80078d0:	4b2a      	ldr	r3, [pc, #168]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80078d2:	68da      	ldr	r2, [r3, #12]
 80078d4:	4b29      	ldr	r3, [pc, #164]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80078d6:	2180      	movs	r1, #128	@ 0x80
 80078d8:	0449      	lsls	r1, r1, #17
 80078da:	430a      	orrs	r2, r1
 80078dc:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078de:	4a27      	ldr	r2, [pc, #156]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80078e0:	2388      	movs	r3, #136	@ 0x88
 80078e2:	58d3      	ldr	r3, [r2, r3]
 80078e4:	4a2e      	ldr	r2, [pc, #184]	@ (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80078e6:	401a      	ands	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ec:	4923      	ldr	r1, [pc, #140]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	2288      	movs	r2, #136	@ 0x88
 80078f2:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	2380      	movs	r3, #128	@ 0x80
 80078fa:	00db      	lsls	r3, r3, #3
 80078fc:	4013      	ands	r3, r2
 80078fe:	d017      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007904:	2380      	movs	r3, #128	@ 0x80
 8007906:	045b      	lsls	r3, r3, #17
 8007908:	429a      	cmp	r2, r3
 800790a:	d106      	bne.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800790c:	4b1b      	ldr	r3, [pc, #108]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800790e:	68da      	ldr	r2, [r3, #12]
 8007910:	4b1a      	ldr	r3, [pc, #104]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007912:	2180      	movs	r1, #128	@ 0x80
 8007914:	0449      	lsls	r1, r1, #17
 8007916:	430a      	orrs	r2, r1
 8007918:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800791a:	4a18      	ldr	r2, [pc, #96]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800791c:	2388      	movs	r3, #136	@ 0x88
 800791e:	58d3      	ldr	r3, [r2, r3]
 8007920:	4a20      	ldr	r2, [pc, #128]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8007922:	401a      	ands	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007928:	4914      	ldr	r1, [pc, #80]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800792a:	4313      	orrs	r3, r2
 800792c:	2288      	movs	r2, #136	@ 0x88
 800792e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	2380      	movs	r3, #128	@ 0x80
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	4013      	ands	r3, r2
 800793a:	d017      	beq.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007940:	2380      	movs	r3, #128	@ 0x80
 8007942:	049b      	lsls	r3, r3, #18
 8007944:	429a      	cmp	r2, r3
 8007946:	d106      	bne.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	4b0b      	ldr	r3, [pc, #44]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800794e:	2180      	movs	r1, #128	@ 0x80
 8007950:	0449      	lsls	r1, r1, #17
 8007952:	430a      	orrs	r2, r1
 8007954:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007956:	4a09      	ldr	r2, [pc, #36]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007958:	2388      	movs	r3, #136	@ 0x88
 800795a:	58d3      	ldr	r3, [r2, r3]
 800795c:	4a11      	ldr	r2, [pc, #68]	@ (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800795e:	401a      	ands	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007964:	4905      	ldr	r1, [pc, #20]	@ (800797c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007966:	4313      	orrs	r3, r2
 8007968:	2288      	movs	r2, #136	@ 0x88
 800796a:	508b      	str	r3, [r1, r2]

  }

  return status;
 800796c:	2312      	movs	r3, #18
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	781b      	ldrb	r3, [r3, #0]
}
 8007972:	0018      	movs	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	b006      	add	sp, #24
 8007978:	bd80      	pop	{r7, pc}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	40021000 	.word	0x40021000
 8007980:	efffffff 	.word	0xefffffff
 8007984:	fffff3ff 	.word	0xfffff3ff
 8007988:	fffffcff 	.word	0xfffffcff
 800798c:	ffffcfff 	.word	0xffffcfff
 8007990:	fffcffff 	.word	0xfffcffff
 8007994:	fff3ffff 	.word	0xfff3ffff
 8007998:	ffcfffff 	.word	0xffcfffff
 800799c:	cfffffff 	.word	0xcfffffff
 80079a0:	f3ffffff 	.word	0xf3ffffff
 80079a4:	feffffff 	.word	0xfeffffff

080079a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80079b0:	210f      	movs	r1, #15
 80079b2:	187b      	adds	r3, r7, r1
 80079b4:	2201      	movs	r2, #1
 80079b6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d100      	bne.n	80079c0 <HAL_RTC_Init+0x18>
 80079be:	e08b      	b.n	8007ad8 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 80079c0:	187b      	adds	r3, r7, r1
 80079c2:	2200      	movs	r2, #0
 80079c4:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	222d      	movs	r2, #45	@ 0x2d
 80079ca:	5c9b      	ldrb	r3, [r3, r2]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d107      	bne.n	80079e2 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	222c      	movs	r2, #44	@ 0x2c
 80079d6:	2100      	movs	r1, #0
 80079d8:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	0018      	movs	r0, r3
 80079de:	f7fb fbc7 	bl	8003170 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	222d      	movs	r2, #45	@ 0x2d
 80079e6:	2102      	movs	r1, #2
 80079e8:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079ea:	4b3f      	ldr	r3, [pc, #252]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 80079ec:	22ca      	movs	r2, #202	@ 0xca
 80079ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80079f0:	4b3d      	ldr	r3, [pc, #244]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 80079f2:	2253      	movs	r2, #83	@ 0x53
 80079f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	0018      	movs	r0, r3
 80079fa:	f000 fa07 	bl	8007e0c <RTC_EnterInitMode>
 80079fe:	1e03      	subs	r3, r0, #0
 8007a00:	d00b      	beq.n	8007a1a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a02:	4b39      	ldr	r3, [pc, #228]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a04:	22ff      	movs	r2, #255	@ 0xff
 8007a06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	222d      	movs	r2, #45	@ 0x2d
 8007a0c:	2104      	movs	r1, #4
 8007a0e:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8007a10:	230f      	movs	r3, #15
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	2201      	movs	r2, #1
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e05e      	b.n	8007ad8 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007a1a:	4b33      	ldr	r3, [pc, #204]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a1c:	699a      	ldr	r2, [r3, #24]
 8007a1e:	4b32      	ldr	r3, [pc, #200]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a20:	4932      	ldr	r1, [pc, #200]	@ (8007aec <HAL_RTC_Init+0x144>)
 8007a22:	400a      	ands	r2, r1
 8007a24:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007a26:	4b30      	ldr	r3, [pc, #192]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a28:	6999      	ldr	r1, [r3, #24]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685a      	ldr	r2, [r3, #4]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	431a      	orrs	r2, r3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	699b      	ldr	r3, [r3, #24]
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	68d9      	ldr	r1, [r3, #12]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	041a      	lsls	r2, r3, #16
 8007a4a:	4b27      	ldr	r3, [pc, #156]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007a50:	4b25      	ldr	r3, [pc, #148]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	4a26      	ldr	r2, [pc, #152]	@ (8007af0 <HAL_RTC_Init+0x148>)
 8007a56:	4013      	ands	r3, r2
 8007a58:	0019      	movs	r1, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a62:	431a      	orrs	r2, r3
 8007a64:	4b20      	ldr	r3, [pc, #128]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a66:	430a      	orrs	r2, r1
 8007a68:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a70:	2180      	movs	r1, #128	@ 0x80
 8007a72:	438a      	bics	r2, r1
 8007a74:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a76:	4b1c      	ldr	r3, [pc, #112]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	d110      	bne.n	8007aa2 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	0018      	movs	r0, r3
 8007a84:	f000 f99c 	bl	8007dc0 <HAL_RTC_WaitForSynchro>
 8007a88:	1e03      	subs	r3, r0, #0
 8007a8a:	d00a      	beq.n	8007aa2 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a8c:	4b16      	ldr	r3, [pc, #88]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007a8e:	22ff      	movs	r2, #255	@ 0xff
 8007a90:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	222d      	movs	r2, #45	@ 0x2d
 8007a96:	2104      	movs	r1, #4
 8007a98:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8007a9a:	230f      	movs	r3, #15
 8007a9c:	18fb      	adds	r3, r7, r3
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8007aa2:	230f      	movs	r3, #15
 8007aa4:	18fb      	adds	r3, r7, r3
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d115      	bne.n	8007ad8 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8007aac:	4b0e      	ldr	r3, [pc, #56]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	08d9      	lsrs	r1, r3, #3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a1a      	ldr	r2, [r3, #32]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	69db      	ldr	r3, [r3, #28]
 8007abc:	431a      	orrs	r2, r3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	431a      	orrs	r2, r3
 8007ac4:	4b08      	ldr	r3, [pc, #32]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007ac6:	430a      	orrs	r2, r1
 8007ac8:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007aca:	4b07      	ldr	r3, [pc, #28]	@ (8007ae8 <HAL_RTC_Init+0x140>)
 8007acc:	22ff      	movs	r2, #255	@ 0xff
 8007ace:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	222d      	movs	r2, #45	@ 0x2d
 8007ad4:	2101      	movs	r1, #1
 8007ad6:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8007ad8:	230f      	movs	r3, #15
 8007ada:	18fb      	adds	r3, r7, r3
 8007adc:	781b      	ldrb	r3, [r3, #0]
}
 8007ade:	0018      	movs	r0, r3
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	b004      	add	sp, #16
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	46c0      	nop			@ (mov r8, r8)
 8007ae8:	40002800 	.word	0x40002800
 8007aec:	fb8fffbf 	.word	0xfb8fffbf
 8007af0:	ffffe0ff 	.word	0xffffe0ff

08007af4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007af4:	b590      	push	{r4, r7, lr}
 8007af6:	b087      	sub	sp, #28
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	60b9      	str	r1, [r7, #8]
 8007afe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	222c      	movs	r2, #44	@ 0x2c
 8007b04:	5c9b      	ldrb	r3, [r3, r2]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d101      	bne.n	8007b0e <HAL_RTC_SetTime+0x1a>
 8007b0a:	2302      	movs	r3, #2
 8007b0c:	e0a7      	b.n	8007c5e <HAL_RTC_SetTime+0x16a>
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	222c      	movs	r2, #44	@ 0x2c
 8007b12:	2101      	movs	r1, #1
 8007b14:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	222d      	movs	r2, #45	@ 0x2d
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b1e:	4b52      	ldr	r3, [pc, #328]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007b20:	22ca      	movs	r2, #202	@ 0xca
 8007b22:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b24:	4b50      	ldr	r3, [pc, #320]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007b26:	2253      	movs	r2, #83	@ 0x53
 8007b28:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	f000 f96d 	bl	8007e0c <RTC_EnterInitMode>
 8007b32:	1e03      	subs	r3, r0, #0
 8007b34:	d00c      	beq.n	8007b50 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b36:	4b4c      	ldr	r3, [pc, #304]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007b38:	22ff      	movs	r2, #255	@ 0xff
 8007b3a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	222d      	movs	r2, #45	@ 0x2d
 8007b40:	2104      	movs	r1, #4
 8007b42:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	222c      	movs	r2, #44	@ 0x2c
 8007b48:	2100      	movs	r1, #0
 8007b4a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e086      	b.n	8007c5e <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007b50:	4b45      	ldr	r3, [pc, #276]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007b52:	68da      	ldr	r2, [r3, #12]
 8007b54:	23c0      	movs	r3, #192	@ 0xc0
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	401a      	ands	r2, r3
 8007b5a:	2380      	movs	r3, #128	@ 0x80
 8007b5c:	005b      	lsls	r3, r3, #1
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d053      	beq.n	8007c0a <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d124      	bne.n	8007bb2 <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007b68:	4b3f      	ldr	r3, [pc, #252]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2240      	movs	r2, #64	@ 0x40
 8007b6e:	4013      	ands	r3, r2
 8007b70:	d102      	bne.n	8007b78 <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	2200      	movs	r2, #0
 8007b76:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	0018      	movs	r0, r3
 8007b7e:	f000 f971 	bl	8007e64 <RTC_ByteToBcd2>
 8007b82:	0003      	movs	r3, r0
 8007b84:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	785b      	ldrb	r3, [r3, #1]
 8007b8a:	0018      	movs	r0, r3
 8007b8c:	f000 f96a 	bl	8007e64 <RTC_ByteToBcd2>
 8007b90:	0003      	movs	r3, r0
 8007b92:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b94:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	789b      	ldrb	r3, [r3, #2]
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	f000 f962 	bl	8007e64 <RTC_ByteToBcd2>
 8007ba0:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ba2:	0022      	movs	r2, r4
 8007ba4:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	78db      	ldrb	r3, [r3, #3]
 8007baa:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bac:	4313      	orrs	r3, r2
 8007bae:	617b      	str	r3, [r7, #20]
 8007bb0:	e016      	b.n	8007be0 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	2240      	movs	r2, #64	@ 0x40
 8007bb8:	4013      	ands	r3, r2
 8007bba:	d102      	bne.n	8007bc2 <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	785b      	ldrb	r3, [r3, #1]
 8007bcc:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bce:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007bd4:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	78db      	ldrb	r3, [r3, #3]
 8007bda:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8007be0:	4b21      	ldr	r3, [pc, #132]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	4921      	ldr	r1, [pc, #132]	@ (8007c6c <HAL_RTC_SetTime+0x178>)
 8007be6:	400a      	ands	r2, r1
 8007be8:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8007bea:	4b1f      	ldr	r3, [pc, #124]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	4b1e      	ldr	r3, [pc, #120]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007bf0:	491f      	ldr	r1, [pc, #124]	@ (8007c70 <HAL_RTC_SetTime+0x17c>)
 8007bf2:	400a      	ands	r2, r1
 8007bf4:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8007bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007bf8:	6999      	ldr	r1, [r3, #24]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	68da      	ldr	r2, [r3, #12]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	431a      	orrs	r2, r3
 8007c04:	4b18      	ldr	r3, [pc, #96]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007c06:	430a      	orrs	r2, r1
 8007c08:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007c0a:	4b17      	ldr	r3, [pc, #92]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	4b16      	ldr	r3, [pc, #88]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007c10:	2180      	movs	r1, #128	@ 0x80
 8007c12:	438a      	bics	r2, r1
 8007c14:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007c16:	4b14      	ldr	r3, [pc, #80]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	4013      	ands	r3, r2
 8007c1e:	d112      	bne.n	8007c46 <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	0018      	movs	r0, r3
 8007c24:	f000 f8cc 	bl	8007dc0 <HAL_RTC_WaitForSynchro>
 8007c28:	1e03      	subs	r3, r0, #0
 8007c2a:	d00c      	beq.n	8007c46 <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007c2e:	22ff      	movs	r2, #255	@ 0xff
 8007c30:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	222d      	movs	r2, #45	@ 0x2d
 8007c36:	2104      	movs	r1, #4
 8007c38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	222c      	movs	r2, #44	@ 0x2c
 8007c3e:	2100      	movs	r1, #0
 8007c40:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e00b      	b.n	8007c5e <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c46:	4b08      	ldr	r3, [pc, #32]	@ (8007c68 <HAL_RTC_SetTime+0x174>)
 8007c48:	22ff      	movs	r2, #255	@ 0xff
 8007c4a:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	222d      	movs	r2, #45	@ 0x2d
 8007c50:	2101      	movs	r1, #1
 8007c52:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	222c      	movs	r2, #44	@ 0x2c
 8007c58:	2100      	movs	r1, #0
 8007c5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
  }
}
 8007c5e:	0018      	movs	r0, r3
 8007c60:	46bd      	mov	sp, r7
 8007c62:	b007      	add	sp, #28
 8007c64:	bd90      	pop	{r4, r7, pc}
 8007c66:	46c0      	nop			@ (mov r8, r8)
 8007c68:	40002800 	.word	0x40002800
 8007c6c:	007f7f7f 	.word	0x007f7f7f
 8007c70:	fffbffff 	.word	0xfffbffff

08007c74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c74:	b590      	push	{r4, r7, lr}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	222c      	movs	r2, #44	@ 0x2c
 8007c84:	5c9b      	ldrb	r3, [r3, r2]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d101      	bne.n	8007c8e <HAL_RTC_SetDate+0x1a>
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e090      	b.n	8007db0 <HAL_RTC_SetDate+0x13c>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	222c      	movs	r2, #44	@ 0x2c
 8007c92:	2101      	movs	r1, #1
 8007c94:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	222d      	movs	r2, #45	@ 0x2d
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10e      	bne.n	8007cc2 <HAL_RTC_SetDate+0x4e>
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	785b      	ldrb	r3, [r3, #1]
 8007ca8:	001a      	movs	r2, r3
 8007caa:	2310      	movs	r3, #16
 8007cac:	4013      	ands	r3, r2
 8007cae:	d008      	beq.n	8007cc2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	2210      	movs	r2, #16
 8007cb6:	4393      	bics	r3, r2
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	330a      	adds	r3, #10
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d11c      	bne.n	8007d02 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	78db      	ldrb	r3, [r3, #3]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f000 f8c9 	bl	8007e64 <RTC_ByteToBcd2>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	785b      	ldrb	r3, [r3, #1]
 8007cda:	0018      	movs	r0, r3
 8007cdc:	f000 f8c2 	bl	8007e64 <RTC_ByteToBcd2>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007ce4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	789b      	ldrb	r3, [r3, #2]
 8007cea:	0018      	movs	r0, r3
 8007cec:	f000 f8ba 	bl	8007e64 <RTC_ByteToBcd2>
 8007cf0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007cf2:	0022      	movs	r2, r4
 8007cf4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
 8007d00:	e00e      	b.n	8007d20 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	78db      	ldrb	r3, [r3, #3]
 8007d06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	785b      	ldrb	r3, [r3, #1]
 8007d0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d0e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007d14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007d16:	68bb      	ldr	r3, [r7, #8]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d20:	4b25      	ldr	r3, [pc, #148]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d22:	22ca      	movs	r2, #202	@ 0xca
 8007d24:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d26:	4b24      	ldr	r3, [pc, #144]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d28:	2253      	movs	r2, #83	@ 0x53
 8007d2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	0018      	movs	r0, r3
 8007d30:	f000 f86c 	bl	8007e0c <RTC_EnterInitMode>
 8007d34:	1e03      	subs	r3, r0, #0
 8007d36:	d00c      	beq.n	8007d52 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d38:	4b1f      	ldr	r3, [pc, #124]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d3a:	22ff      	movs	r2, #255	@ 0xff
 8007d3c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	222d      	movs	r2, #45	@ 0x2d
 8007d42:	2104      	movs	r1, #4
 8007d44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	222c      	movs	r2, #44	@ 0x2c
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	e02e      	b.n	8007db0 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8007d52:	4b19      	ldr	r3, [pc, #100]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4919      	ldr	r1, [pc, #100]	@ (8007dbc <HAL_RTC_SetDate+0x148>)
 8007d58:	400a      	ands	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007d5c:	4b16      	ldr	r3, [pc, #88]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d5e:	68da      	ldr	r2, [r3, #12]
 8007d60:	4b15      	ldr	r3, [pc, #84]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d62:	2180      	movs	r1, #128	@ 0x80
 8007d64:	438a      	bics	r2, r1
 8007d66:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007d68:	4b13      	ldr	r3, [pc, #76]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	2220      	movs	r2, #32
 8007d6e:	4013      	ands	r3, r2
 8007d70:	d112      	bne.n	8007d98 <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	0018      	movs	r0, r3
 8007d76:	f000 f823 	bl	8007dc0 <HAL_RTC_WaitForSynchro>
 8007d7a:	1e03      	subs	r3, r0, #0
 8007d7c:	d00c      	beq.n	8007d98 <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d80:	22ff      	movs	r2, #255	@ 0xff
 8007d82:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	222d      	movs	r2, #45	@ 0x2d
 8007d88:	2104      	movs	r1, #4
 8007d8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	222c      	movs	r2, #44	@ 0x2c
 8007d90:	2100      	movs	r1, #0
 8007d92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e00b      	b.n	8007db0 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d98:	4b07      	ldr	r3, [pc, #28]	@ (8007db8 <HAL_RTC_SetDate+0x144>)
 8007d9a:	22ff      	movs	r2, #255	@ 0xff
 8007d9c:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	222d      	movs	r2, #45	@ 0x2d
 8007da2:	2101      	movs	r1, #1
 8007da4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	222c      	movs	r2, #44	@ 0x2c
 8007daa:	2100      	movs	r1, #0
 8007dac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007dae:	2300      	movs	r3, #0
  }
}
 8007db0:	0018      	movs	r0, r3
 8007db2:	46bd      	mov	sp, r7
 8007db4:	b007      	add	sp, #28
 8007db6:	bd90      	pop	{r4, r7, pc}
 8007db8:	40002800 	.word	0x40002800
 8007dbc:	00ffff3f 	.word	0x00ffff3f

08007dc0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007e08 <HAL_RTC_WaitForSynchro+0x48>)
 8007dca:	68da      	ldr	r2, [r3, #12]
 8007dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8007e08 <HAL_RTC_WaitForSynchro+0x48>)
 8007dce:	2120      	movs	r1, #32
 8007dd0:	438a      	bics	r2, r1
 8007dd2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007dd4:	f7fb fb20 	bl	8003418 <HAL_GetTick>
 8007dd8:	0003      	movs	r3, r0
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007ddc:	e00a      	b.n	8007df4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007dde:	f7fb fb1b 	bl	8003418 <HAL_GetTick>
 8007de2:	0002      	movs	r2, r0
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	1ad2      	subs	r2, r2, r3
 8007de8:	23fa      	movs	r3, #250	@ 0xfa
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d901      	bls.n	8007df4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007df0:	2303      	movs	r3, #3
 8007df2:	e005      	b.n	8007e00 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007df4:	4b04      	ldr	r3, [pc, #16]	@ (8007e08 <HAL_RTC_WaitForSynchro+0x48>)
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	2220      	movs	r2, #32
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	d0ef      	beq.n	8007dde <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	0018      	movs	r0, r3
 8007e02:	46bd      	mov	sp, r7
 8007e04:	b004      	add	sp, #16
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40002800 	.word	0x40002800

08007e0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007e14:	4b12      	ldr	r3, [pc, #72]	@ (8007e60 <RTC_EnterInitMode+0x54>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	2240      	movs	r2, #64	@ 0x40
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	d11a      	bne.n	8007e54 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007e1e:	4b10      	ldr	r3, [pc, #64]	@ (8007e60 <RTC_EnterInitMode+0x54>)
 8007e20:	68da      	ldr	r2, [r3, #12]
 8007e22:	4b0f      	ldr	r3, [pc, #60]	@ (8007e60 <RTC_EnterInitMode+0x54>)
 8007e24:	2180      	movs	r1, #128	@ 0x80
 8007e26:	430a      	orrs	r2, r1
 8007e28:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e2a:	f7fb faf5 	bl	8003418 <HAL_GetTick>
 8007e2e:	0003      	movs	r3, r0
 8007e30:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007e32:	e00a      	b.n	8007e4a <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007e34:	f7fb faf0 	bl	8003418 <HAL_GetTick>
 8007e38:	0002      	movs	r2, r0
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	1ad2      	subs	r2, r2, r3
 8007e3e:	23fa      	movs	r3, #250	@ 0xfa
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d901      	bls.n	8007e4a <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e005      	b.n	8007e56 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007e4a:	4b05      	ldr	r3, [pc, #20]	@ (8007e60 <RTC_EnterInitMode+0x54>)
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	2240      	movs	r2, #64	@ 0x40
 8007e50:	4013      	ands	r3, r2
 8007e52:	d0ef      	beq.n	8007e34 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	0018      	movs	r0, r3
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	b004      	add	sp, #16
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	40002800 	.word	0x40002800

08007e64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	0002      	movs	r2, r0
 8007e6c:	1dfb      	adds	r3, r7, #7
 8007e6e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007e74:	230b      	movs	r3, #11
 8007e76:	18fb      	adds	r3, r7, r3
 8007e78:	1dfa      	adds	r2, r7, #7
 8007e7a:	7812      	ldrb	r2, [r2, #0]
 8007e7c:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8007e7e:	e008      	b.n	8007e92 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3301      	adds	r3, #1
 8007e84:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007e86:	220b      	movs	r2, #11
 8007e88:	18bb      	adds	r3, r7, r2
 8007e8a:	18ba      	adds	r2, r7, r2
 8007e8c:	7812      	ldrb	r2, [r2, #0]
 8007e8e:	3a0a      	subs	r2, #10
 8007e90:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8007e92:	210b      	movs	r1, #11
 8007e94:	187b      	adds	r3, r7, r1
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	2b09      	cmp	r3, #9
 8007e9a:	d8f1      	bhi.n	8007e80 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	011b      	lsls	r3, r3, #4
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	187b      	adds	r3, r7, r1
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	b2db      	uxtb	r3, r3
}
 8007eac:	0018      	movs	r0, r3
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	b004      	add	sp, #16
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <memset>:
 8007eb4:	0003      	movs	r3, r0
 8007eb6:	1882      	adds	r2, r0, r2
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d100      	bne.n	8007ebe <memset+0xa>
 8007ebc:	4770      	bx	lr
 8007ebe:	7019      	strb	r1, [r3, #0]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	e7f9      	b.n	8007eb8 <memset+0x4>

08007ec4 <__libc_init_array>:
 8007ec4:	b570      	push	{r4, r5, r6, lr}
 8007ec6:	2600      	movs	r6, #0
 8007ec8:	4c0c      	ldr	r4, [pc, #48]	@ (8007efc <__libc_init_array+0x38>)
 8007eca:	4d0d      	ldr	r5, [pc, #52]	@ (8007f00 <__libc_init_array+0x3c>)
 8007ecc:	1b64      	subs	r4, r4, r5
 8007ece:	10a4      	asrs	r4, r4, #2
 8007ed0:	42a6      	cmp	r6, r4
 8007ed2:	d109      	bne.n	8007ee8 <__libc_init_array+0x24>
 8007ed4:	2600      	movs	r6, #0
 8007ed6:	f000 f819 	bl	8007f0c <_init>
 8007eda:	4c0a      	ldr	r4, [pc, #40]	@ (8007f04 <__libc_init_array+0x40>)
 8007edc:	4d0a      	ldr	r5, [pc, #40]	@ (8007f08 <__libc_init_array+0x44>)
 8007ede:	1b64      	subs	r4, r4, r5
 8007ee0:	10a4      	asrs	r4, r4, #2
 8007ee2:	42a6      	cmp	r6, r4
 8007ee4:	d105      	bne.n	8007ef2 <__libc_init_array+0x2e>
 8007ee6:	bd70      	pop	{r4, r5, r6, pc}
 8007ee8:	00b3      	lsls	r3, r6, #2
 8007eea:	58eb      	ldr	r3, [r5, r3]
 8007eec:	4798      	blx	r3
 8007eee:	3601      	adds	r6, #1
 8007ef0:	e7ee      	b.n	8007ed0 <__libc_init_array+0xc>
 8007ef2:	00b3      	lsls	r3, r6, #2
 8007ef4:	58eb      	ldr	r3, [r5, r3]
 8007ef6:	4798      	blx	r3
 8007ef8:	3601      	adds	r6, #1
 8007efa:	e7f2      	b.n	8007ee2 <__libc_init_array+0x1e>
 8007efc:	08007f68 	.word	0x08007f68
 8007f00:	08007f68 	.word	0x08007f68
 8007f04:	08007f6c 	.word	0x08007f6c
 8007f08:	08007f68 	.word	0x08007f68

08007f0c <_init>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	46c0      	nop			@ (mov r8, r8)
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr

08007f18 <_fini>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	46c0      	nop			@ (mov r8, r8)
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr
