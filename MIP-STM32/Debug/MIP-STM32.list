
MIP-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c88  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08007d48  08007d48  00008d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d8c  08007d8c  00009020  2**0
                  CONTENTS
  4 .ARM          00000000  08007d8c  08007d8c  00009020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d8c  08007d8c  00009020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d8c  08007d8c  00008d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d90  08007d90  00008d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08007d94  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000020  08007db4  00009020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08007db4  000091c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c41  00000000  00000000  00009048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000236f  00000000  00000000  0001fc89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  00021ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001101  00000000  00000000  00023600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab03  00000000  00000000  00024701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012fc2  00000000  00000000  0003f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aafac  00000000  00000000  000521c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005264  00000000  00000000  000fd1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010241c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000020 	.word	0x20000020
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007d30 	.word	0x08007d30

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000024 	.word	0x20000024
 8000104:	08007d30 	.word	0x08007d30

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <lsm6dsr_read_reg>:
  *
  */
int32_t __weak lsm6dsr_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	0008      	movs	r0, r1
 800022a:	607a      	str	r2, [r7, #4]
 800022c:	0019      	movs	r1, r3
 800022e:	230b      	movs	r3, #11
 8000230:	18fb      	adds	r3, r7, r3
 8000232:	1c02      	adds	r2, r0, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	2308      	movs	r3, #8
 8000238:	18fb      	adds	r3, r7, r3
 800023a:	1c0a      	adds	r2, r1, #0
 800023c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d102      	bne.n	800024a <lsm6dsr_read_reg+0x2a>
  {
    return -1;
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	e00f      	b.n	800026a <lsm6dsr_read_reg+0x4a>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	685c      	ldr	r4, [r3, #4]
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	68d8      	ldr	r0, [r3, #12]
 8000252:	2308      	movs	r3, #8
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	881d      	ldrh	r5, [r3, #0]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	230b      	movs	r3, #11
 800025c:	18fb      	adds	r3, r7, r3
 800025e:	7819      	ldrb	r1, [r3, #0]
 8000260:	002b      	movs	r3, r5
 8000262:	47a0      	blx	r4
 8000264:	0003      	movs	r3, r0
 8000266:	617b      	str	r3, [r7, #20]
  return ret;
 8000268:	697b      	ldr	r3, [r7, #20]
}
 800026a:	0018      	movs	r0, r3
 800026c:	46bd      	mov	sp, r7
 800026e:	b006      	add	sp, #24
 8000270:	bdb0      	pop	{r4, r5, r7, pc}

08000272 <lsm6dsr_write_reg>:
  *
  */
int32_t __weak lsm6dsr_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8000272:	b5b0      	push	{r4, r5, r7, lr}
 8000274:	b086      	sub	sp, #24
 8000276:	af00      	add	r7, sp, #0
 8000278:	60f8      	str	r0, [r7, #12]
 800027a:	0008      	movs	r0, r1
 800027c:	607a      	str	r2, [r7, #4]
 800027e:	0019      	movs	r1, r3
 8000280:	230b      	movs	r3, #11
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	1c02      	adds	r2, r0, #0
 8000286:	701a      	strb	r2, [r3, #0]
 8000288:	2308      	movs	r3, #8
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	1c0a      	adds	r2, r1, #0
 800028e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  if (ctx == NULL)
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d102      	bne.n	800029c <lsm6dsr_write_reg+0x2a>
  {
    return -1;
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	e00f      	b.n	80002bc <lsm6dsr_write_reg+0x4a>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	681c      	ldr	r4, [r3, #0]
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	68d8      	ldr	r0, [r3, #12]
 80002a4:	2308      	movs	r3, #8
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	881d      	ldrh	r5, [r3, #0]
 80002aa:	687a      	ldr	r2, [r7, #4]
 80002ac:	230b      	movs	r3, #11
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	7819      	ldrb	r1, [r3, #0]
 80002b2:	002b      	movs	r3, r5
 80002b4:	47a0      	blx	r4
 80002b6:	0003      	movs	r3, r0
 80002b8:	617b      	str	r3, [r7, #20]
  return ret;
 80002ba:	697b      	ldr	r3, [r7, #20]
}
 80002bc:	0018      	movs	r0, r3
 80002be:	46bd      	mov	sp, r7
 80002c0:	b006      	add	sp, #24
 80002c2:	bdb0      	pop	{r4, r5, r7, pc}

080002c4 <lsm6dsr_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsr_fs_xl_t val)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	000a      	movs	r2, r1
 80002ce:	1cfb      	adds	r3, r7, #3
 80002d0:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL,
 80002d2:	2408      	movs	r4, #8
 80002d4:	193a      	adds	r2, r7, r4
 80002d6:	6878      	ldr	r0, [r7, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	2110      	movs	r1, #16
 80002dc:	f7ff ffa0 	bl	8000220 <lsm6dsr_read_reg>
 80002e0:	0003      	movs	r3, r0
 80002e2:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d117      	bne.n	800031a <lsm6dsr_xl_full_scale_set+0x56>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 80002ea:	1cfb      	adds	r3, r7, #3
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	2203      	movs	r2, #3
 80002f0:	4013      	ands	r3, r2
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2103      	movs	r1, #3
 80002f8:	400a      	ands	r2, r1
 80002fa:	0090      	lsls	r0, r2, #2
 80002fc:	781a      	ldrb	r2, [r3, #0]
 80002fe:	210c      	movs	r1, #12
 8000300:	438a      	bics	r2, r1
 8000302:	1c11      	adds	r1, r2, #0
 8000304:	1c02      	adds	r2, r0, #0
 8000306:	430a      	orrs	r2, r1
 8000308:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 800030a:	193a      	adds	r2, r7, r4
 800030c:	6878      	ldr	r0, [r7, #4]
 800030e:	2301      	movs	r3, #1
 8000310:	2110      	movs	r1, #16
 8000312:	f7ff ffae 	bl	8000272 <lsm6dsr_write_reg>
 8000316:	0003      	movs	r3, r0
 8000318:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800031a:	68fb      	ldr	r3, [r7, #12]
}
 800031c:	0018      	movs	r0, r3
 800031e:	46bd      	mov	sp, r7
 8000320:	b005      	add	sp, #20
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <lsm6dsr_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_xl_t val)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b087      	sub	sp, #28
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	000a      	movs	r2, r1
 800032e:	1cfb      	adds	r3, r7, #3
 8000330:	701a      	strb	r2, [r3, #0]
  lsm6dsr_odr_xl_t odr_xl =  val;
 8000332:	2317      	movs	r3, #23
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	1cfa      	adds	r2, r7, #3
 8000338:	7812      	ldrb	r2, [r2, #0]
 800033a:	701a      	strb	r2, [r3, #0]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 800033c:	240c      	movs	r4, #12
 800033e:	193a      	adds	r2, r7, r4
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	0011      	movs	r1, r2
 8000344:	0018      	movs	r0, r3
 8000346:	f001 f92f 	bl	80015a8 <lsm6dsr_fsm_enable_get>
 800034a:	0003      	movs	r3, r0
 800034c:	613b      	str	r3, [r7, #16]

  if (ret == 0)
 800034e:	693b      	ldr	r3, [r7, #16]
 8000350:	2b00      	cmp	r3, #0
 8000352:	d000      	beq.n	8000356 <lsm6dsr_xl_data_rate_set+0x32>
 8000354:	e105      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000356:	0021      	movs	r1, r4
 8000358:	187b      	adds	r3, r7, r1
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	07db      	lsls	r3, r3, #31
 800035e:	0fdb      	lsrs	r3, r3, #31
 8000360:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8000362:	187b      	adds	r3, r7, r1
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	079b      	lsls	r3, r3, #30
 8000368:	0fdb      	lsrs	r3, r3, #31
 800036a:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800036c:	4313      	orrs	r3, r2
 800036e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8000370:	187b      	adds	r3, r7, r1
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	075b      	lsls	r3, r3, #29
 8000376:	0fdb      	lsrs	r3, r3, #31
 8000378:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800037a:	4313      	orrs	r3, r2
 800037c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800037e:	187b      	adds	r3, r7, r1
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	071b      	lsls	r3, r3, #28
 8000384:	0fdb      	lsrs	r3, r3, #31
 8000386:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8000388:	4313      	orrs	r3, r2
 800038a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800038c:	187b      	adds	r3, r7, r1
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	06db      	lsls	r3, r3, #27
 8000392:	0fdb      	lsrs	r3, r3, #31
 8000394:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8000396:	4313      	orrs	r3, r2
 8000398:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800039a:	187b      	adds	r3, r7, r1
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	069b      	lsls	r3, r3, #26
 80003a0:	0fdb      	lsrs	r3, r3, #31
 80003a2:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80003a4:	4313      	orrs	r3, r2
 80003a6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80003a8:	187b      	adds	r3, r7, r1
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	065b      	lsls	r3, r3, #25
 80003ae:	0fdb      	lsrs	r3, r3, #31
 80003b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80003b2:	4313      	orrs	r3, r2
 80003b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	061b      	lsls	r3, r3, #24
 80003bc:	0fdb      	lsrs	r3, r3, #31
 80003be:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80003c0:	4313      	orrs	r3, r2
 80003c2:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	785b      	ldrb	r3, [r3, #1]
 80003c8:	07db      	lsls	r3, r3, #31
 80003ca:	0fdb      	lsrs	r3, r3, #31
 80003cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80003ce:	4313      	orrs	r3, r2
 80003d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	785b      	ldrb	r3, [r3, #1]
 80003d6:	079b      	lsls	r3, r3, #30
 80003d8:	0fdb      	lsrs	r3, r3, #31
 80003da:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80003dc:	4313      	orrs	r3, r2
 80003de:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	785b      	ldrb	r3, [r3, #1]
 80003e4:	075b      	lsls	r3, r3, #29
 80003e6:	0fdb      	lsrs	r3, r3, #31
 80003e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80003ea:	4313      	orrs	r3, r2
 80003ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	785b      	ldrb	r3, [r3, #1]
 80003f2:	071b      	lsls	r3, r3, #28
 80003f4:	0fdb      	lsrs	r3, r3, #31
 80003f6:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80003f8:	4313      	orrs	r3, r2
 80003fa:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	785b      	ldrb	r3, [r3, #1]
 8000400:	06db      	lsls	r3, r3, #27
 8000402:	0fdb      	lsrs	r3, r3, #31
 8000404:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8000406:	4313      	orrs	r3, r2
 8000408:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800040a:	187b      	adds	r3, r7, r1
 800040c:	785b      	ldrb	r3, [r3, #1]
 800040e:	069b      	lsls	r3, r3, #26
 8000410:	0fdb      	lsrs	r3, r3, #31
 8000412:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8000414:	4313      	orrs	r3, r2
 8000416:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8000418:	187b      	adds	r3, r7, r1
 800041a:	785b      	ldrb	r3, [r3, #1]
 800041c:	065b      	lsls	r3, r3, #25
 800041e:	0fdb      	lsrs	r3, r3, #31
 8000420:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8000422:	4313      	orrs	r3, r2
 8000424:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8000426:	187b      	adds	r3, r7, r1
 8000428:	785b      	ldrb	r3, [r3, #1]
 800042a:	061b      	lsls	r3, r3, #24
 800042c:	0fdb      	lsrs	r3, r3, #31
 800042e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8000430:	4313      	orrs	r3, r2
 8000432:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000434:	2b01      	cmp	r3, #1
 8000436:	d000      	beq.n	800043a <lsm6dsr_xl_data_rate_set+0x116>
 8000438:	e093      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 800043a:	240b      	movs	r4, #11
 800043c:	193a      	adds	r2, r7, r4
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	0011      	movs	r1, r2
 8000442:	0018      	movs	r0, r3
 8000444:	f001 f8e2 	bl	800160c <lsm6dsr_fsm_data_rate_get>
 8000448:	0003      	movs	r3, r0
 800044a:	613b      	str	r3, [r7, #16]

      if (ret == 0)
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	2b00      	cmp	r3, #0
 8000450:	d000      	beq.n	8000454 <lsm6dsr_xl_data_rate_set+0x130>
 8000452:	e086      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 8000454:	193b      	adds	r3, r7, r4
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b03      	cmp	r3, #3
 800045a:	d052      	beq.n	8000502 <lsm6dsr_xl_data_rate_set+0x1de>
 800045c:	dd00      	ble.n	8000460 <lsm6dsr_xl_data_rate_set+0x13c>
 800045e:	e07a      	b.n	8000556 <lsm6dsr_xl_data_rate_set+0x232>
 8000460:	2b02      	cmp	r3, #2
 8000462:	d02d      	beq.n	80004c0 <lsm6dsr_xl_data_rate_set+0x19c>
 8000464:	dd00      	ble.n	8000468 <lsm6dsr_xl_data_rate_set+0x144>
 8000466:	e076      	b.n	8000556 <lsm6dsr_xl_data_rate_set+0x232>
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <lsm6dsr_xl_data_rate_set+0x14e>
 800046c:	2b01      	cmp	r3, #1
 800046e:	d00f      	beq.n	8000490 <lsm6dsr_xl_data_rate_set+0x16c>
 8000470:	e071      	b.n	8000556 <lsm6dsr_xl_data_rate_set+0x232>
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_XL_ODR_OFF)
 8000472:	1cfb      	adds	r3, r7, #3
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d104      	bne.n	8000484 <lsm6dsr_xl_data_rate_set+0x160>
            {
              odr_xl = LSM6DSR_XL_ODR_12Hz5;
 800047a:	2317      	movs	r3, #23
 800047c:	18fb      	adds	r3, r7, r3
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8000482:	e06e      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
              odr_xl = val;
 8000484:	2317      	movs	r3, #23
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	1cfa      	adds	r2, r7, #3
 800048a:	7812      	ldrb	r2, [r2, #0]
 800048c:	701a      	strb	r2, [r3, #0]
            break;
 800048e:	e068      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8000490:	1cfb      	adds	r3, r7, #3
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d104      	bne.n	80004a2 <lsm6dsr_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 8000498:	2317      	movs	r3, #23
 800049a:	18fb      	adds	r3, r7, r3
 800049c:	2202      	movs	r2, #2
 800049e:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 80004a0:	e05f      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80004a2:	1cfb      	adds	r3, r7, #3
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	d104      	bne.n	80004b4 <lsm6dsr_xl_data_rate_set+0x190>
              odr_xl = LSM6DSR_XL_ODR_26Hz;
 80004aa:	2317      	movs	r3, #23
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	2202      	movs	r2, #2
 80004b0:	701a      	strb	r2, [r3, #0]
            break;
 80004b2:	e056      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
              odr_xl = val;
 80004b4:	2317      	movs	r3, #23
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	1cfa      	adds	r2, r7, #3
 80004ba:	7812      	ldrb	r2, [r2, #0]
 80004bc:	701a      	strb	r2, [r3, #0]
            break;
 80004be:	e050      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 80004c0:	1cfb      	adds	r3, r7, #3
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d104      	bne.n	80004d2 <lsm6dsr_xl_data_rate_set+0x1ae>
            {
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80004c8:	2317      	movs	r3, #23
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	2203      	movs	r2, #3
 80004ce:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 80004d0:	e047      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 80004d2:	1cfb      	adds	r3, r7, #3
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d104      	bne.n	80004e4 <lsm6dsr_xl_data_rate_set+0x1c0>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80004da:	2317      	movs	r3, #23
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	2203      	movs	r2, #3
 80004e0:	701a      	strb	r2, [r3, #0]
            break;
 80004e2:	e03e      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 80004e4:	1cfb      	adds	r3, r7, #3
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d104      	bne.n	80004f6 <lsm6dsr_xl_data_rate_set+0x1d2>
              odr_xl = LSM6DSR_XL_ODR_52Hz;
 80004ec:	2317      	movs	r3, #23
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	2203      	movs	r2, #3
 80004f2:	701a      	strb	r2, [r3, #0]
            break;
 80004f4:	e035      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
              odr_xl = val;
 80004f6:	2317      	movs	r3, #23
 80004f8:	18fb      	adds	r3, r7, r3
 80004fa:	1cfa      	adds	r2, r7, #3
 80004fc:	7812      	ldrb	r2, [r2, #0]
 80004fe:	701a      	strb	r2, [r3, #0]
            break;
 8000500:	e02f      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_XL_ODR_OFF)
 8000502:	1cfb      	adds	r3, r7, #3
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d104      	bne.n	8000514 <lsm6dsr_xl_data_rate_set+0x1f0>
            {
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800050a:	2317      	movs	r3, #23
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	2204      	movs	r2, #4
 8000510:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8000512:	e026      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_12Hz5)
 8000514:	1cfb      	adds	r3, r7, #3
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b01      	cmp	r3, #1
 800051a:	d104      	bne.n	8000526 <lsm6dsr_xl_data_rate_set+0x202>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800051c:	2317      	movs	r3, #23
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	2204      	movs	r2, #4
 8000522:	701a      	strb	r2, [r3, #0]
            break;
 8000524:	e01d      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_26Hz)
 8000526:	1cfb      	adds	r3, r7, #3
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d104      	bne.n	8000538 <lsm6dsr_xl_data_rate_set+0x214>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 800052e:	2317      	movs	r3, #23
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	2204      	movs	r2, #4
 8000534:	701a      	strb	r2, [r3, #0]
            break;
 8000536:	e014      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
            else if (val == LSM6DSR_XL_ODR_52Hz)
 8000538:	1cfb      	adds	r3, r7, #3
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2b03      	cmp	r3, #3
 800053e:	d104      	bne.n	800054a <lsm6dsr_xl_data_rate_set+0x226>
              odr_xl = LSM6DSR_XL_ODR_104Hz;
 8000540:	2317      	movs	r3, #23
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	2204      	movs	r2, #4
 8000546:	701a      	strb	r2, [r3, #0]
            break;
 8000548:	e00b      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>
              odr_xl = val;
 800054a:	2317      	movs	r3, #23
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	1cfa      	adds	r2, r7, #3
 8000550:	7812      	ldrb	r2, [r2, #0]
 8000552:	701a      	strb	r2, [r3, #0]
            break;
 8000554:	e005      	b.n	8000562 <lsm6dsr_xl_data_rate_set+0x23e>

          default:
            odr_xl = val;
 8000556:	2317      	movs	r3, #23
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	1cfa      	adds	r2, r7, #3
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	701a      	strb	r2, [r3, #0]
            break;
 8000560:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d108      	bne.n	800057a <lsm6dsr_xl_data_rate_set+0x256>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL1_XL,
 8000568:	2308      	movs	r3, #8
 800056a:	18fa      	adds	r2, r7, r3
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	2110      	movs	r1, #16
 8000572:	f7ff fe55 	bl	8000220 <lsm6dsr_read_reg>
 8000576:	0003      	movs	r3, r0
 8000578:	613b      	str	r3, [r7, #16]
                           (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d117      	bne.n	80005b0 <lsm6dsr_xl_data_rate_set+0x28c>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 8000580:	2317      	movs	r3, #23
 8000582:	18fb      	adds	r3, r7, r3
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	220f      	movs	r2, #15
 8000588:	4013      	ands	r3, r2
 800058a:	b2da      	uxtb	r2, r3
 800058c:	2408      	movs	r4, #8
 800058e:	193b      	adds	r3, r7, r4
 8000590:	0110      	lsls	r0, r2, #4
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	210f      	movs	r1, #15
 8000596:	400a      	ands	r2, r1
 8000598:	1c11      	adds	r1, r2, #0
 800059a:	1c02      	adds	r2, r0, #0
 800059c:	430a      	orrs	r2, r1
 800059e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL1_XL,
 80005a0:	193a      	adds	r2, r7, r4
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	2301      	movs	r3, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	f7ff fe63 	bl	8000272 <lsm6dsr_write_reg>
 80005ac:	0003      	movs	r3, r0
 80005ae:	613b      	str	r3, [r7, #16]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80005b0:	693b      	ldr	r3, [r7, #16]
}
 80005b2:	0018      	movs	r0, r3
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b007      	add	sp, #28
 80005b8:	bd90      	pop	{r4, r7, pc}

080005ba <lsm6dsr_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsr_odr_g_t val)
{
 80005ba:	b590      	push	{r4, r7, lr}
 80005bc:	b087      	sub	sp, #28
 80005be:	af00      	add	r7, sp, #0
 80005c0:	6078      	str	r0, [r7, #4]
 80005c2:	000a      	movs	r2, r1
 80005c4:	1cfb      	adds	r3, r7, #3
 80005c6:	701a      	strb	r2, [r3, #0]
  lsm6dsr_odr_g_t odr_gy =  val;
 80005c8:	2317      	movs	r3, #23
 80005ca:	18fb      	adds	r3, r7, r3
 80005cc:	1cfa      	adds	r2, r7, #3
 80005ce:	7812      	ldrb	r2, [r2, #0]
 80005d0:	701a      	strb	r2, [r3, #0]
  lsm6dsr_fsm_odr_t fsm_odr;
  lsm6dsr_ctrl2_g_t ctrl2_g;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dsr_fsm_enable_get(ctx, &fsm_enable);
 80005d2:	240c      	movs	r4, #12
 80005d4:	193a      	adds	r2, r7, r4
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	0011      	movs	r1, r2
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 ffe4 	bl	80015a8 <lsm6dsr_fsm_enable_get>
 80005e0:	0003      	movs	r3, r0
 80005e2:	613b      	str	r3, [r7, #16]

  if (ret == 0)
 80005e4:	693b      	ldr	r3, [r7, #16]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d000      	beq.n	80005ec <lsm6dsr_gy_data_rate_set+0x32>
 80005ea:	e105      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80005ec:	0021      	movs	r1, r4
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	07db      	lsls	r3, r3, #31
 80005f4:	0fdb      	lsrs	r3, r3, #31
 80005f6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	079b      	lsls	r3, r3, #30
 80005fe:	0fdb      	lsrs	r3, r3, #31
 8000600:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8000602:	4313      	orrs	r3, r2
 8000604:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8000606:	187b      	adds	r3, r7, r1
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	075b      	lsls	r3, r3, #29
 800060c:	0fdb      	lsrs	r3, r3, #31
 800060e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8000610:	4313      	orrs	r3, r2
 8000612:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8000614:	187b      	adds	r3, r7, r1
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	071b      	lsls	r3, r3, #28
 800061a:	0fdb      	lsrs	r3, r3, #31
 800061c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800061e:	4313      	orrs	r3, r2
 8000620:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8000622:	187b      	adds	r3, r7, r1
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	06db      	lsls	r3, r3, #27
 8000628:	0fdb      	lsrs	r3, r3, #31
 800062a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800062c:	4313      	orrs	r3, r2
 800062e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8000630:	187b      	adds	r3, r7, r1
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	069b      	lsls	r3, r3, #26
 8000636:	0fdb      	lsrs	r3, r3, #31
 8000638:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800063a:	4313      	orrs	r3, r2
 800063c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800063e:	187b      	adds	r3, r7, r1
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	065b      	lsls	r3, r3, #25
 8000644:	0fdb      	lsrs	r3, r3, #31
 8000646:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8000648:	4313      	orrs	r3, r2
 800064a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800064c:	187b      	adds	r3, r7, r1
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	061b      	lsls	r3, r3, #24
 8000652:	0fdb      	lsrs	r3, r3, #31
 8000654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8000656:	4313      	orrs	r3, r2
 8000658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800065a:	187b      	adds	r3, r7, r1
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	07db      	lsls	r3, r3, #31
 8000660:	0fdb      	lsrs	r3, r3, #31
 8000662:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8000664:	4313      	orrs	r3, r2
 8000666:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8000668:	187b      	adds	r3, r7, r1
 800066a:	785b      	ldrb	r3, [r3, #1]
 800066c:	079b      	lsls	r3, r3, #30
 800066e:	0fdb      	lsrs	r3, r3, #31
 8000670:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8000672:	4313      	orrs	r3, r2
 8000674:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8000676:	187b      	adds	r3, r7, r1
 8000678:	785b      	ldrb	r3, [r3, #1]
 800067a:	075b      	lsls	r3, r3, #29
 800067c:	0fdb      	lsrs	r3, r3, #31
 800067e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8000680:	4313      	orrs	r3, r2
 8000682:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8000684:	187b      	adds	r3, r7, r1
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	071b      	lsls	r3, r3, #28
 800068a:	0fdb      	lsrs	r3, r3, #31
 800068c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800068e:	4313      	orrs	r3, r2
 8000690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8000692:	187b      	adds	r3, r7, r1
 8000694:	785b      	ldrb	r3, [r3, #1]
 8000696:	06db      	lsls	r3, r3, #27
 8000698:	0fdb      	lsrs	r3, r3, #31
 800069a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800069c:	4313      	orrs	r3, r2
 800069e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	069b      	lsls	r3, r3, #26
 80006a6:	0fdb      	lsrs	r3, r3, #31
 80006a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80006aa:	4313      	orrs	r3, r2
 80006ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	785b      	ldrb	r3, [r3, #1]
 80006b2:	065b      	lsls	r3, r3, #25
 80006b4:	0fdb      	lsrs	r3, r3, #31
 80006b6:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	785b      	ldrb	r3, [r3, #1]
 80006c0:	061b      	lsls	r3, r3, #24
 80006c2:	0fdb      	lsrs	r3, r3, #31
 80006c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80006c6:	4313      	orrs	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d000      	beq.n	80006d0 <lsm6dsr_gy_data_rate_set+0x116>
 80006ce:	e093      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
    {
      ret =  lsm6dsr_fsm_data_rate_get(ctx, &fsm_odr);
 80006d0:	240b      	movs	r4, #11
 80006d2:	193a      	adds	r2, r7, r4
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	0011      	movs	r1, r2
 80006d8:	0018      	movs	r0, r3
 80006da:	f000 ff97 	bl	800160c <lsm6dsr_fsm_data_rate_get>
 80006de:	0003      	movs	r3, r0
 80006e0:	613b      	str	r3, [r7, #16]

      if (ret == 0)
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d000      	beq.n	80006ea <lsm6dsr_gy_data_rate_set+0x130>
 80006e8:	e086      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b03      	cmp	r3, #3
 80006f0:	d052      	beq.n	8000798 <lsm6dsr_gy_data_rate_set+0x1de>
 80006f2:	dd00      	ble.n	80006f6 <lsm6dsr_gy_data_rate_set+0x13c>
 80006f4:	e07a      	b.n	80007ec <lsm6dsr_gy_data_rate_set+0x232>
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d02d      	beq.n	8000756 <lsm6dsr_gy_data_rate_set+0x19c>
 80006fa:	dd00      	ble.n	80006fe <lsm6dsr_gy_data_rate_set+0x144>
 80006fc:	e076      	b.n	80007ec <lsm6dsr_gy_data_rate_set+0x232>
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d002      	beq.n	8000708 <lsm6dsr_gy_data_rate_set+0x14e>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d00f      	beq.n	8000726 <lsm6dsr_gy_data_rate_set+0x16c>
 8000706:	e071      	b.n	80007ec <lsm6dsr_gy_data_rate_set+0x232>
        {
          case LSM6DSR_ODR_FSM_12Hz5:
            if (val == LSM6DSR_GY_ODR_OFF)
 8000708:	1cfb      	adds	r3, r7, #3
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d104      	bne.n	800071a <lsm6dsr_gy_data_rate_set+0x160>
            {
              odr_gy = LSM6DSR_GY_ODR_12Hz5;
 8000710:	2317      	movs	r3, #23
 8000712:	18fb      	adds	r3, r7, r3
 8000714:	2201      	movs	r2, #1
 8000716:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8000718:	e06e      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
              odr_gy = val;
 800071a:	2317      	movs	r3, #23
 800071c:	18fb      	adds	r3, r7, r3
 800071e:	1cfa      	adds	r2, r7, #3
 8000720:	7812      	ldrb	r2, [r2, #0]
 8000722:	701a      	strb	r2, [r3, #0]
            break;
 8000724:	e068      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_26Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8000726:	1cfb      	adds	r3, r7, #3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d104      	bne.n	8000738 <lsm6dsr_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 800072e:	2317      	movs	r3, #23
 8000730:	18fb      	adds	r3, r7, r3
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8000736:	e05f      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8000738:	1cfb      	adds	r3, r7, #3
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d104      	bne.n	800074a <lsm6dsr_gy_data_rate_set+0x190>
              odr_gy = LSM6DSR_GY_ODR_26Hz;
 8000740:	2317      	movs	r3, #23
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	2202      	movs	r2, #2
 8000746:	701a      	strb	r2, [r3, #0]
            break;
 8000748:	e056      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
              odr_gy = val;
 800074a:	2317      	movs	r3, #23
 800074c:	18fb      	adds	r3, r7, r3
 800074e:	1cfa      	adds	r2, r7, #3
 8000750:	7812      	ldrb	r2, [r2, #0]
 8000752:	701a      	strb	r2, [r3, #0]
            break;
 8000754:	e050      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_52Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8000756:	1cfb      	adds	r3, r7, #3
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d104      	bne.n	8000768 <lsm6dsr_gy_data_rate_set+0x1ae>
            {
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 800075e:	2317      	movs	r3, #23
 8000760:	18fb      	adds	r3, r7, r3
 8000762:	2203      	movs	r2, #3
 8000764:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 8000766:	e047      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 8000768:	1cfb      	adds	r3, r7, #3
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b01      	cmp	r3, #1
 800076e:	d104      	bne.n	800077a <lsm6dsr_gy_data_rate_set+0x1c0>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8000770:	2317      	movs	r3, #23
 8000772:	18fb      	adds	r3, r7, r3
 8000774:	2203      	movs	r2, #3
 8000776:	701a      	strb	r2, [r3, #0]
            break;
 8000778:	e03e      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 800077a:	1cfb      	adds	r3, r7, #3
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d104      	bne.n	800078c <lsm6dsr_gy_data_rate_set+0x1d2>
              odr_gy = LSM6DSR_GY_ODR_52Hz;
 8000782:	2317      	movs	r3, #23
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	2203      	movs	r2, #3
 8000788:	701a      	strb	r2, [r3, #0]
            break;
 800078a:	e035      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
              odr_gy = val;
 800078c:	2317      	movs	r3, #23
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	1cfa      	adds	r2, r7, #3
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	701a      	strb	r2, [r3, #0]
            break;
 8000796:	e02f      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>

          case LSM6DSR_ODR_FSM_104Hz:
            if (val == LSM6DSR_GY_ODR_OFF)
 8000798:	1cfb      	adds	r3, r7, #3
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d104      	bne.n	80007aa <lsm6dsr_gy_data_rate_set+0x1f0>
            {
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80007a0:	2317      	movs	r3, #23
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2204      	movs	r2, #4
 80007a6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 80007a8:	e026      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_12Hz5)
 80007aa:	1cfb      	adds	r3, r7, #3
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d104      	bne.n	80007bc <lsm6dsr_gy_data_rate_set+0x202>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80007b2:	2317      	movs	r3, #23
 80007b4:	18fb      	adds	r3, r7, r3
 80007b6:	2204      	movs	r2, #4
 80007b8:	701a      	strb	r2, [r3, #0]
            break;
 80007ba:	e01d      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_26Hz)
 80007bc:	1cfb      	adds	r3, r7, #3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d104      	bne.n	80007ce <lsm6dsr_gy_data_rate_set+0x214>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80007c4:	2317      	movs	r3, #23
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	2204      	movs	r2, #4
 80007ca:	701a      	strb	r2, [r3, #0]
            break;
 80007cc:	e014      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
            else if (val == LSM6DSR_GY_ODR_52Hz)
 80007ce:	1cfb      	adds	r3, r7, #3
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d104      	bne.n	80007e0 <lsm6dsr_gy_data_rate_set+0x226>
              odr_gy = LSM6DSR_GY_ODR_104Hz;
 80007d6:	2317      	movs	r3, #23
 80007d8:	18fb      	adds	r3, r7, r3
 80007da:	2204      	movs	r2, #4
 80007dc:	701a      	strb	r2, [r3, #0]
            break;
 80007de:	e00b      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>
              odr_gy = val;
 80007e0:	2317      	movs	r3, #23
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	1cfa      	adds	r2, r7, #3
 80007e6:	7812      	ldrb	r2, [r2, #0]
 80007e8:	701a      	strb	r2, [r3, #0]
            break;
 80007ea:	e005      	b.n	80007f8 <lsm6dsr_gy_data_rate_set+0x23e>

          default:
            odr_gy = val;
 80007ec:	2317      	movs	r3, #23
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	1cfa      	adds	r2, r7, #3
 80007f2:	7812      	ldrb	r2, [r2, #0]
 80007f4:	701a      	strb	r2, [r3, #0]
            break;
 80007f6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d108      	bne.n	8000810 <lsm6dsr_gy_data_rate_set+0x256>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL2_G,
 80007fe:	2308      	movs	r3, #8
 8000800:	18fa      	adds	r2, r7, r3
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	2301      	movs	r3, #1
 8000806:	2111      	movs	r1, #17
 8000808:	f7ff fd0a 	bl	8000220 <lsm6dsr_read_reg>
 800080c:	0003      	movs	r3, r0
 800080e:	613b      	str	r3, [r7, #16]
                           (uint8_t *)&ctrl2_g, 1);
  }

  if (ret == 0)
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d117      	bne.n	8000846 <lsm6dsr_gy_data_rate_set+0x28c>
  {
    ctrl2_g.odr_g = (uint8_t)odr_gy;
 8000816:	2317      	movs	r3, #23
 8000818:	18fb      	adds	r3, r7, r3
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	220f      	movs	r2, #15
 800081e:	4013      	ands	r3, r2
 8000820:	b2da      	uxtb	r2, r3
 8000822:	2408      	movs	r4, #8
 8000824:	193b      	adds	r3, r7, r4
 8000826:	0110      	lsls	r0, r2, #4
 8000828:	781a      	ldrb	r2, [r3, #0]
 800082a:	210f      	movs	r1, #15
 800082c:	400a      	ands	r2, r1
 800082e:	1c11      	adds	r1, r2, #0
 8000830:	1c02      	adds	r2, r0, #0
 8000832:	430a      	orrs	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL2_G,
 8000836:	193a      	adds	r2, r7, r4
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	2301      	movs	r3, #1
 800083c:	2111      	movs	r1, #17
 800083e:	f7ff fd18 	bl	8000272 <lsm6dsr_write_reg>
 8000842:	0003      	movs	r3, r0
 8000844:	613b      	str	r3, [r7, #16]
                            (uint8_t *)&ctrl2_g, 1);
  }

  return ret;
 8000846:	693b      	ldr	r3, [r7, #16]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b007      	add	sp, #28
 800084e:	bd90      	pop	{r4, r7, pc}

08000850 <lsm6dsr_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_block_data_update_set(const stmdev_ctx_t *ctx,
                                      uint8_t val)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	000a      	movs	r2, r1
 800085a:	1cfb      	adds	r3, r7, #3
 800085c:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 800085e:	2408      	movs	r4, #8
 8000860:	193a      	adds	r2, r7, r4
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	2301      	movs	r3, #1
 8000866:	2112      	movs	r1, #18
 8000868:	f7ff fcda 	bl	8000220 <lsm6dsr_read_reg>
 800086c:	0003      	movs	r3, r0
 800086e:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d117      	bne.n	80008a6 <lsm6dsr_block_data_update_set+0x56>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8000876:	1cfb      	adds	r3, r7, #3
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	b2da      	uxtb	r2, r3
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2101      	movs	r1, #1
 8000884:	400a      	ands	r2, r1
 8000886:	0190      	lsls	r0, r2, #6
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	2140      	movs	r1, #64	@ 0x40
 800088c:	438a      	bics	r2, r1
 800088e:	1c11      	adds	r1, r2, #0
 8000890:	1c02      	adds	r2, r0, #0
 8000892:	430a      	orrs	r2, r1
 8000894:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C,
 8000896:	193a      	adds	r2, r7, r4
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	2301      	movs	r3, #1
 800089c:	2112      	movs	r1, #18
 800089e:	f7ff fce8 	bl	8000272 <lsm6dsr_write_reg>
 80008a2:	0003      	movs	r3, r0
 80008a4:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	0018      	movs	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b005      	add	sp, #20
 80008ae:	bd90      	pop	{r4, r7, pc}

080008b0 <lsm6dsr_gy_power_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_gy_power_mode_set(const stmdev_ctx_t *ctx,
                                  lsm6dsr_g_hm_mode_t val)
{
 80008b0:	b590      	push	{r4, r7, lr}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	000a      	movs	r2, r1
 80008ba:	1cfb      	adds	r3, r7, #3
 80008bc:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl7_g_t ctrl7_g;
  int32_t ret;
  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL7_G,
 80008be:	2408      	movs	r4, #8
 80008c0:	193a      	adds	r2, r7, r4
 80008c2:	6878      	ldr	r0, [r7, #4]
 80008c4:	2301      	movs	r3, #1
 80008c6:	2116      	movs	r1, #22
 80008c8:	f7ff fcaa 	bl	8000220 <lsm6dsr_read_reg>
 80008cc:	0003      	movs	r3, r0
 80008ce:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl7_g, 1);

  if (ret == 0)
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d115      	bne.n	8000902 <lsm6dsr_gy_power_mode_set+0x52>
  {
    ctrl7_g.g_hm_mode = (uint8_t)val;
 80008d6:	1cfb      	adds	r3, r7, #3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2201      	movs	r2, #1
 80008dc:	4013      	ands	r3, r2
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	01d0      	lsls	r0, r2, #7
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	217f      	movs	r1, #127	@ 0x7f
 80008e8:	400a      	ands	r2, r1
 80008ea:	1c11      	adds	r1, r2, #0
 80008ec:	1c02      	adds	r2, r0, #0
 80008ee:	430a      	orrs	r2, r1
 80008f0:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL7_G,
 80008f2:	193a      	adds	r2, r7, r4
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	2301      	movs	r3, #1
 80008f8:	2116      	movs	r1, #22
 80008fa:	f7ff fcba 	bl	8000272 <lsm6dsr_write_reg>
 80008fe:	0003      	movs	r3, r0
 8000900:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl7_g, 1);
  }

  return ret;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b005      	add	sp, #20
 800090a:	bd90      	pop	{r4, r7, pc}

0800090c <lsm6dsr_steps_reset>:
  * @param  ctx    Read / write interface definitions.(ptr)
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_steps_reset(const stmdev_ctx_t *ctx)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  lsm6dsr_emb_func_src_t emb_func_src;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2102      	movs	r1, #2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 f82f 	bl	800097c <lsm6dsr_mem_bank_set>
 800091e:	0003      	movs	r3, r0
 8000920:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d108      	bne.n	800093a <lsm6dsr_steps_reset+0x2e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_SRC,
 8000928:	2308      	movs	r3, #8
 800092a:	18fa      	adds	r2, r7, r3
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	2301      	movs	r3, #1
 8000930:	2164      	movs	r1, #100	@ 0x64
 8000932:	f7ff fc75 	bl	8000220 <lsm6dsr_read_reg>
 8000936:	0003      	movs	r3, r0
 8000938:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&emb_func_src, 1);
  }

  if (ret == 0)
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10e      	bne.n	800095e <lsm6dsr_steps_reset+0x52>
  {
    emb_func_src.pedo_rst_step = PROPERTY_ENABLE;
 8000940:	2008      	movs	r0, #8
 8000942:	183b      	adds	r3, r7, r0
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	2180      	movs	r1, #128	@ 0x80
 8000948:	4249      	negs	r1, r1
 800094a:	430a      	orrs	r2, r1
 800094c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_SRC,
 800094e:	183a      	adds	r2, r7, r0
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	2301      	movs	r3, #1
 8000954:	2164      	movs	r1, #100	@ 0x64
 8000956:	f7ff fc8c 	bl	8000272 <lsm6dsr_write_reg>
 800095a:	0003      	movs	r3, r0
 800095c:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&emb_func_src, 1);
  }

  if (ret == 0)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d106      	bne.n	8000972 <lsm6dsr_steps_reset+0x66>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2100      	movs	r1, #0
 8000968:	0018      	movs	r0, r3
 800096a:	f000 f807 	bl	800097c <lsm6dsr_mem_bank_set>
 800096e:	0003      	movs	r3, r0
 8000970:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8000972:	68fb      	ldr	r3, [r7, #12]
}
 8000974:	0018      	movs	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	b004      	add	sp, #16
 800097a:	bd80      	pop	{r7, pc}

0800097c <lsm6dsr_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_mem_bank_set(const stmdev_ctx_t *ctx,
                             lsm6dsr_reg_access_t val)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	000a      	movs	r2, r1
 8000986:	1cfb      	adds	r3, r7, #3
 8000988:	701a      	strb	r2, [r3, #0]
  lsm6dsr_func_cfg_access_t func_cfg_access;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 800098a:	2408      	movs	r4, #8
 800098c:	193a      	adds	r2, r7, r4
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	2301      	movs	r3, #1
 8000992:	2101      	movs	r1, #1
 8000994:	f7ff fc44 	bl	8000220 <lsm6dsr_read_reg>
 8000998:	0003      	movs	r3, r0
 800099a:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d115      	bne.n	80009ce <lsm6dsr_mem_bank_set+0x52>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 80009a2:	1cfb      	adds	r3, r7, #3
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2203      	movs	r2, #3
 80009a8:	4013      	ands	r3, r2
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0190      	lsls	r0, r2, #6
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	213f      	movs	r1, #63	@ 0x3f
 80009b4:	400a      	ands	r2, r1
 80009b6:	1c11      	adds	r1, r2, #0
 80009b8:	1c02      	adds	r2, r0, #0
 80009ba:	430a      	orrs	r2, r1
 80009bc:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FUNC_CFG_ACCESS,
 80009be:	193a      	adds	r2, r7, r4
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	2301      	movs	r3, #1
 80009c4:	2101      	movs	r1, #1
 80009c6:	f7ff fc54 	bl	8000272 <lsm6dsr_write_reg>
 80009ca:	0003      	movs	r3, r0
 80009cc:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b005      	add	sp, #20
 80009d6:	bd90      	pop	{r4, r7, pc}

080009d8 <lsm6dsr_ln_pg_write_byte>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_ln_pg_write_byte(const stmdev_ctx_t *ctx, uint16_t add,
                                 uint8_t *val)
{
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b089      	sub	sp, #36	@ 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	607a      	str	r2, [r7, #4]
 80009e2:	230a      	movs	r3, #10
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	1c0a      	adds	r2, r1, #0
 80009e8:	801a      	strh	r2, [r3, #0]
  lsm6dsr_page_rw_t page_rw;
  lsm6dsr_page_sel_t page_sel;
  lsm6dsr_page_address_t page_address;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2102      	movs	r1, #2
 80009ee:	0018      	movs	r0, r3
 80009f0:	f7ff ffc4 	bl	800097c <lsm6dsr_mem_bank_set>
 80009f4:	0003      	movs	r3, r0
 80009f6:	61fb      	str	r3, [r7, #28]

  if (ret == 0)
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d108      	bne.n	8000a10 <lsm6dsr_ln_pg_write_byte+0x38>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 80009fe:	2318      	movs	r3, #24
 8000a00:	18fa      	adds	r2, r7, r3
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	2301      	movs	r3, #1
 8000a06:	2117      	movs	r1, #23
 8000a08:	f7ff fc0a 	bl	8000220 <lsm6dsr_read_reg>
 8000a0c:	0003      	movs	r3, r0
 8000a0e:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d110      	bne.n	8000a38 <lsm6dsr_ln_pg_write_byte+0x60>
  {
    page_rw.page_rw = 0x02U; /* page_write enable */
 8000a16:	2018      	movs	r0, #24
 8000a18:	183b      	adds	r3, r7, r0
 8000a1a:	781a      	ldrb	r2, [r3, #0]
 8000a1c:	2160      	movs	r1, #96	@ 0x60
 8000a1e:	438a      	bics	r2, r1
 8000a20:	1c11      	adds	r1, r2, #0
 8000a22:	2240      	movs	r2, #64	@ 0x40
 8000a24:	430a      	orrs	r2, r1
 8000a26:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8000a28:	183a      	adds	r2, r7, r0
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	2117      	movs	r1, #23
 8000a30:	f7ff fc1f 	bl	8000272 <lsm6dsr_write_reg>
 8000a34:	0003      	movs	r3, r0
 8000a36:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d108      	bne.n	8000a50 <lsm6dsr_ln_pg_write_byte+0x78>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_SEL,
 8000a3e:	2314      	movs	r3, #20
 8000a40:	18fa      	adds	r2, r7, r3
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	2301      	movs	r3, #1
 8000a46:	2102      	movs	r1, #2
 8000a48:	f7ff fbea 	bl	8000220 <lsm6dsr_read_reg>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_sel, 1);
  }

  if (ret == 0)
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d122      	bne.n	8000a9c <lsm6dsr_ln_pg_write_byte+0xc4>
  {
    page_sel.page_sel = (uint8_t)((add / 256U) & 0x0FU);
 8000a56:	230a      	movs	r3, #10
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	1c1a      	adds	r2, r3, #0
 8000a62:	230f      	movs	r3, #15
 8000a64:	4013      	ands	r3, r2
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	2414      	movs	r4, #20
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0110      	lsls	r0, r2, #4
 8000a6e:	781a      	ldrb	r2, [r3, #0]
 8000a70:	210f      	movs	r1, #15
 8000a72:	400a      	ands	r2, r1
 8000a74:	1c11      	adds	r1, r2, #0
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	701a      	strb	r2, [r3, #0]
    page_sel.not_used_01 = 1;
 8000a7c:	193b      	adds	r3, r7, r4
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	210f      	movs	r1, #15
 8000a82:	438a      	bics	r2, r1
 8000a84:	1c11      	adds	r1, r2, #0
 8000a86:	2201      	movs	r2, #1
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_SEL,
 8000a8c:	193a      	adds	r2, r7, r4
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	2301      	movs	r3, #1
 8000a92:	2102      	movs	r1, #2
 8000a94:	f7ff fbed 	bl	8000272 <lsm6dsr_write_reg>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_sel, 1);
  }

  if (ret == 0)
 8000a9c:	69fb      	ldr	r3, [r7, #28]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10e      	bne.n	8000ac0 <lsm6dsr_ln_pg_write_byte+0xe8>
  {
    page_address.page_addr = (uint8_t)(add - (page_sel.page_sel * 256U));
 8000aa2:	230a      	movs	r3, #10
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	881b      	ldrh	r3, [r3, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	2110      	movs	r1, #16
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_ADDRESS,
 8000ab0:	187a      	adds	r2, r7, r1
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	2108      	movs	r1, #8
 8000ab8:	f7ff fbdb 	bl	8000272 <lsm6dsr_write_reg>
 8000abc:	0003      	movs	r3, r0
 8000abe:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_address, 1);
  }

  if (ret == 0)
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d107      	bne.n	8000ad6 <lsm6dsr_ln_pg_write_byte+0xfe>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_VALUE, val, 1);
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	2301      	movs	r3, #1
 8000acc:	2109      	movs	r1, #9
 8000ace:	f7ff fbd0 	bl	8000272 <lsm6dsr_write_reg>
 8000ad2:	0003      	movs	r3, r0
 8000ad4:	61fb      	str	r3, [r7, #28]
  }

  if (ret == 0)
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d108      	bne.n	8000aee <lsm6dsr_ln_pg_write_byte+0x116>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 8000adc:	2318      	movs	r3, #24
 8000ade:	18fa      	adds	r2, r7, r3
 8000ae0:	68f8      	ldr	r0, [r7, #12]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	2117      	movs	r1, #23
 8000ae6:	f7ff fb9b 	bl	8000220 <lsm6dsr_read_reg>
 8000aea:	0003      	movs	r3, r0
 8000aec:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d10d      	bne.n	8000b10 <lsm6dsr_ln_pg_write_byte+0x138>
  {
    page_rw.page_rw = 0x00; /* page_write disable */
 8000af4:	2018      	movs	r0, #24
 8000af6:	183b      	adds	r3, r7, r0
 8000af8:	781a      	ldrb	r2, [r3, #0]
 8000afa:	2160      	movs	r1, #96	@ 0x60
 8000afc:	438a      	bics	r2, r1
 8000afe:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8000b00:	183a      	adds	r2, r7, r0
 8000b02:	68f8      	ldr	r0, [r7, #12]
 8000b04:	2301      	movs	r3, #1
 8000b06:	2117      	movs	r1, #23
 8000b08:	f7ff fbb3 	bl	8000272 <lsm6dsr_write_reg>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d106      	bne.n	8000b24 <lsm6dsr_ln_pg_write_byte+0x14c>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	2100      	movs	r1, #0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f7ff ff2e 	bl	800097c <lsm6dsr_mem_bank_set>
 8000b20:	0003      	movs	r3, r0
 8000b22:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8000b24:	69fb      	ldr	r3, [r7, #28]
}
 8000b26:	0018      	movs	r0, r3
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	b009      	add	sp, #36	@ 0x24
 8000b2c:	bd90      	pop	{r4, r7, pc}

08000b2e <lsm6dsr_ln_pg_read_byte>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_ln_pg_read_byte(const stmdev_ctx_t *ctx, uint16_t add,
                                uint8_t *val)
{
 8000b2e:	b590      	push	{r4, r7, lr}
 8000b30:	b089      	sub	sp, #36	@ 0x24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	230a      	movs	r3, #10
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	1c0a      	adds	r2, r1, #0
 8000b3e:	801a      	strh	r2, [r3, #0]
  lsm6dsr_page_rw_t page_rw;
  lsm6dsr_page_sel_t page_sel;
  lsm6dsr_page_address_t page_address;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2102      	movs	r1, #2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff ff19 	bl	800097c <lsm6dsr_mem_bank_set>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	61fb      	str	r3, [r7, #28]

  if (ret == 0)
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d108      	bne.n	8000b66 <lsm6dsr_ln_pg_read_byte+0x38>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 8000b54:	2318      	movs	r3, #24
 8000b56:	18fa      	adds	r2, r7, r3
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	2117      	movs	r1, #23
 8000b5e:	f7ff fb5f 	bl	8000220 <lsm6dsr_read_reg>
 8000b62:	0003      	movs	r3, r0
 8000b64:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d110      	bne.n	8000b8e <lsm6dsr_ln_pg_read_byte+0x60>
  {
    page_rw.page_rw = 0x01U; /* page_read enable*/
 8000b6c:	2018      	movs	r0, #24
 8000b6e:	183b      	adds	r3, r7, r0
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	2160      	movs	r1, #96	@ 0x60
 8000b74:	438a      	bics	r2, r1
 8000b76:	1c11      	adds	r1, r2, #0
 8000b78:	2220      	movs	r2, #32
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8000b7e:	183a      	adds	r2, r7, r0
 8000b80:	68f8      	ldr	r0, [r7, #12]
 8000b82:	2301      	movs	r3, #1
 8000b84:	2117      	movs	r1, #23
 8000b86:	f7ff fb74 	bl	8000272 <lsm6dsr_write_reg>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d108      	bne.n	8000ba6 <lsm6dsr_ln_pg_read_byte+0x78>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_SEL,
 8000b94:	2314      	movs	r3, #20
 8000b96:	18fa      	adds	r2, r7, r3
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	f7ff fb3f 	bl	8000220 <lsm6dsr_read_reg>
 8000ba2:	0003      	movs	r3, r0
 8000ba4:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_sel, 1);
  }

  if (ret == 0)
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d122      	bne.n	8000bf2 <lsm6dsr_ln_pg_read_byte+0xc4>
  {
    page_sel.page_sel = (uint8_t)((add / 256U) & 0x0FU);
 8000bac:	230a      	movs	r3, #10
 8000bae:	18fb      	adds	r3, r7, r3
 8000bb0:	881b      	ldrh	r3, [r3, #0]
 8000bb2:	0a1b      	lsrs	r3, r3, #8
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	1c1a      	adds	r2, r3, #0
 8000bb8:	230f      	movs	r3, #15
 8000bba:	4013      	ands	r3, r2
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	2414      	movs	r4, #20
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	0110      	lsls	r0, r2, #4
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	400a      	ands	r2, r1
 8000bca:	1c11      	adds	r1, r2, #0
 8000bcc:	1c02      	adds	r2, r0, #0
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
    page_sel.not_used_01 = 1;
 8000bd2:	193b      	adds	r3, r7, r4
 8000bd4:	781a      	ldrb	r2, [r3, #0]
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	438a      	bics	r2, r1
 8000bda:	1c11      	adds	r1, r2, #0
 8000bdc:	2201      	movs	r2, #1
 8000bde:	430a      	orrs	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_SEL,
 8000be2:	193a      	adds	r2, r7, r4
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	2301      	movs	r3, #1
 8000be8:	2102      	movs	r1, #2
 8000bea:	f7ff fb42 	bl	8000272 <lsm6dsr_write_reg>
 8000bee:	0003      	movs	r3, r0
 8000bf0:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_sel, 1);
  }

  if (ret == 0)
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d10e      	bne.n	8000c16 <lsm6dsr_ln_pg_read_byte+0xe8>
  {
    page_address.page_addr = (uint8_t)(add - (page_sel.page_sel * 256U));
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	2110      	movs	r1, #16
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_ADDRESS,
 8000c06:	187a      	adds	r2, r7, r1
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	2108      	movs	r1, #8
 8000c0e:	f7ff fb30 	bl	8000272 <lsm6dsr_write_reg>
 8000c12:	0003      	movs	r3, r0
 8000c14:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_address, 1);
  }

  if (ret == 0)
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d107      	bne.n	8000c2c <lsm6dsr_ln_pg_read_byte+0xfe>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_VALUE, val, 2);
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	68f8      	ldr	r0, [r7, #12]
 8000c20:	2302      	movs	r3, #2
 8000c22:	2109      	movs	r1, #9
 8000c24:	f7ff fafc 	bl	8000220 <lsm6dsr_read_reg>
 8000c28:	0003      	movs	r3, r0
 8000c2a:	61fb      	str	r3, [r7, #28]
  }

  if (ret == 0)
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d108      	bne.n	8000c44 <lsm6dsr_ln_pg_read_byte+0x116>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 8000c32:	2318      	movs	r3, #24
 8000c34:	18fa      	adds	r2, r7, r3
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	2117      	movs	r1, #23
 8000c3c:	f7ff faf0 	bl	8000220 <lsm6dsr_read_reg>
 8000c40:	0003      	movs	r3, r0
 8000c42:	61fb      	str	r3, [r7, #28]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10d      	bne.n	8000c66 <lsm6dsr_ln_pg_read_byte+0x138>
  {
    page_rw.page_rw = 0x00U; /* page_read disable */
 8000c4a:	2018      	movs	r0, #24
 8000c4c:	183b      	adds	r3, r7, r0
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	2160      	movs	r1, #96	@ 0x60
 8000c52:	438a      	bics	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8000c56:	183a      	adds	r2, r7, r0
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	2117      	movs	r1, #23
 8000c5e:	f7ff fb08 	bl	8000272 <lsm6dsr_write_reg>
 8000c62:	0003      	movs	r3, r0
 8000c64:	61fb      	str	r3, [r7, #28]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d106      	bne.n	8000c7a <lsm6dsr_ln_pg_read_byte+0x14c>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2100      	movs	r1, #0
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fe83 	bl	800097c <lsm6dsr_mem_bank_set>
 8000c76:	0003      	movs	r3, r0
 8000c78:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8000c7a:	69fb      	ldr	r3, [r7, #28]
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b009      	add	sp, #36	@ 0x24
 8000c82:	bd90      	pop	{r4, r7, pc}

08000c84 <lsm6dsr_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_WHO_AM_I, buff, 1);
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	6878      	ldr	r0, [r7, #4]
 8000c92:	2301      	movs	r3, #1
 8000c94:	210f      	movs	r1, #15
 8000c96:	f7ff fac3 	bl	8000220 <lsm6dsr_read_reg>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	60fb      	str	r3, [r7, #12]

  return ret;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b004      	add	sp, #16
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <lsm6dsr_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	000a      	movs	r2, r1
 8000cb2:	1cfb      	adds	r3, r7, #3
 8000cb4:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 8000cb6:	2408      	movs	r4, #8
 8000cb8:	193a      	adds	r2, r7, r4
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	2112      	movs	r1, #18
 8000cc0:	f7ff faae 	bl	8000220 <lsm6dsr_read_reg>
 8000cc4:	0003      	movs	r3, r0
 8000cc6:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d117      	bne.n	8000cfe <lsm6dsr_reset_set+0x56>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8000cce:	1cfb      	adds	r3, r7, #3
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	2101      	movs	r1, #1
 8000cdc:	400a      	ands	r2, r1
 8000cde:	0010      	movs	r0, r2
 8000ce0:	781a      	ldrb	r2, [r3, #0]
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	438a      	bics	r2, r1
 8000ce6:	1c11      	adds	r1, r2, #0
 8000ce8:	1c02      	adds	r2, r0, #0
 8000cea:	430a      	orrs	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C,
 8000cee:	193a      	adds	r2, r7, r4
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	2112      	movs	r1, #18
 8000cf6:	f7ff fabc 	bl	8000272 <lsm6dsr_write_reg>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b005      	add	sp, #20
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <lsm6dsr_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8000d08:	b590      	push	{r4, r7, lr}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 8000d12:	2408      	movs	r4, #8
 8000d14:	193a      	adds	r2, r7, r4
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	2301      	movs	r3, #1
 8000d1a:	2112      	movs	r1, #18
 8000d1c:	f7ff fa80 	bl	8000220 <lsm6dsr_read_reg>
 8000d20:	0003      	movs	r3, r0
 8000d22:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8000d24:	193b      	adds	r3, r7, r4
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	07db      	lsls	r3, r3, #31
 8000d2a:	0fdb      	lsrs	r3, r3, #31
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	001a      	movs	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	701a      	strb	r2, [r3, #0]

  return ret;
 8000d34:	68fb      	ldr	r3, [r7, #12]
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b005      	add	sp, #20
 8000d3c:	bd90      	pop	{r4, r7, pc}

08000d3e <lsm6dsr_i3c_disable_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_i3c_disable_set(const stmdev_ctx_t *ctx,
                                lsm6dsr_i3c_disable_t val)
{
 8000d3e:	b590      	push	{r4, r7, lr}
 8000d40:	b087      	sub	sp, #28
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
 8000d46:	000a      	movs	r2, r1
 8000d48:	1cfb      	adds	r3, r7, #3
 8000d4a:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl9_xl_t ctrl9_xl;
  lsm6dsr_i3c_bus_avb_t i3c_bus_avb;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8000d4c:	2410      	movs	r4, #16
 8000d4e:	193a      	adds	r2, r7, r4
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	2301      	movs	r3, #1
 8000d54:	2118      	movs	r1, #24
 8000d56:	f7ff fa63 	bl	8000220 <lsm6dsr_read_reg>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d11a      	bne.n	8000d9a <lsm6dsr_i3c_disable_set+0x5c>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8000d64:	1cfb      	adds	r3, r7, #3
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	09db      	lsrs	r3, r3, #7
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	1c1a      	adds	r2, r3, #0
 8000d6e:	2301      	movs	r3, #1
 8000d70:	4013      	ands	r3, r2
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	2101      	movs	r1, #1
 8000d78:	400a      	ands	r2, r1
 8000d7a:	1890      	adds	r0, r2, r2
 8000d7c:	781a      	ldrb	r2, [r3, #0]
 8000d7e:	2102      	movs	r1, #2
 8000d80:	438a      	bics	r2, r1
 8000d82:	1c11      	adds	r1, r2, #0
 8000d84:	1c02      	adds	r2, r0, #0
 8000d86:	430a      	orrs	r2, r1
 8000d88:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL9_XL,
 8000d8a:	193a      	adds	r2, r7, r4
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	2118      	movs	r1, #24
 8000d92:	f7ff fa6e 	bl	8000272 <lsm6dsr_write_reg>
 8000d96:	0003      	movs	r3, r0
 8000d98:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&ctrl9_xl, 1);
  }

  if (ret == 0)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d108      	bne.n	8000db2 <lsm6dsr_i3c_disable_set+0x74>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8000da0:	230c      	movs	r3, #12
 8000da2:	18fa      	adds	r2, r7, r3
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	2301      	movs	r3, #1
 8000da8:	2162      	movs	r1, #98	@ 0x62
 8000daa:	f7ff fa39 	bl	8000220 <lsm6dsr_read_reg>
 8000dae:	0003      	movs	r3, r0
 8000db0:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d118      	bne.n	8000dea <lsm6dsr_i3c_disable_set+0xac>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8000db8:	1cfb      	adds	r3, r7, #3
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	240c      	movs	r4, #12
 8000dc4:	193b      	adds	r3, r7, r4
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	400a      	ands	r2, r1
 8000dca:	00d0      	lsls	r0, r2, #3
 8000dcc:	781a      	ldrb	r2, [r3, #0]
 8000dce:	2118      	movs	r1, #24
 8000dd0:	438a      	bics	r2, r1
 8000dd2:	1c11      	adds	r1, r2, #0
 8000dd4:	1c02      	adds	r2, r0, #0
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_I3C_BUS_AVB,
 8000dda:	193a      	adds	r2, r7, r4
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	2301      	movs	r3, #1
 8000de0:	2162      	movs	r1, #98	@ 0x62
 8000de2:	f7ff fa46 	bl	8000272 <lsm6dsr_write_reg>
 8000de6:	0003      	movs	r3, r0
 8000de8:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8000dea:	697b      	ldr	r3, [r7, #20]
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b007      	add	sp, #28
 8000df2:	bd90      	pop	{r4, r7, pc}

08000df4 <lsm6dsr_pin_int2_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int2_route_set(const stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int2_route_t *val)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  lsm6dsr_tap_cfg2_t tap_cfg2;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2102      	movs	r1, #2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fdba 	bl	800097c <lsm6dsr_mem_bank_set>
 8000e08:	0003      	movs	r3, r0
 8000e0a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d108      	bne.n	8000e24 <lsm6dsr_pin_int2_route_set+0x30>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT2,
                            (uint8_t *)&val->emb_func_int2, 1);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_INT2,
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	2301      	movs	r3, #1
 8000e1a:	210e      	movs	r1, #14
 8000e1c:	f7ff fa29 	bl	8000272 <lsm6dsr_write_reg>
 8000e20:	0003      	movs	r3, r0
 8000e22:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d108      	bne.n	8000e3c <lsm6dsr_pin_int2_route_set+0x48>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT2_A,
                            (uint8_t *)&val->fsm_int2_a, 1);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT2_A,
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	2301      	movs	r3, #1
 8000e32:	210f      	movs	r1, #15
 8000e34:	f7ff fa1d 	bl	8000272 <lsm6dsr_write_reg>
 8000e38:	0003      	movs	r3, r0
 8000e3a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d108      	bne.n	8000e54 <lsm6dsr_pin_int2_route_set+0x60>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT2_B,
                            (uint8_t *)&val->fsm_int2_b, 1);
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_FSM_INT2_B,
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	2110      	movs	r1, #16
 8000e4c:	f7ff fa11 	bl	8000272 <lsm6dsr_write_reg>
 8000e50:	0003      	movs	r3, r0
 8000e52:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <lsm6dsr_pin_int2_route_set+0x74>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fd8c 	bl	800097c <lsm6dsr_mem_bank_set>
 8000e64:	0003      	movs	r3, r0
 8000e66:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d000      	beq.n	8000e70 <lsm6dsr_pin_int2_route_set+0x7c>
 8000e6e:	e09e      	b.n	8000fae <lsm6dsr_pin_int2_route_set+0x1ba>
  {
    if ((val->emb_func_int2.int2_step_detector |
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	789b      	ldrb	r3, [r3, #2]
 8000e74:	071b      	lsls	r3, r3, #28
 8000e76:	0fdb      	lsrs	r3, r3, #31
 8000e78:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_tilt |
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	789b      	ldrb	r3, [r3, #2]
 8000e7e:	06db      	lsls	r3, r3, #27
 8000e80:	0fdb      	lsrs	r3, r3, #31
 8000e82:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int2.int2_step_detector |
 8000e84:	4313      	orrs	r3, r2
 8000e86:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_sig_mot |
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	069b      	lsls	r3, r3, #26
 8000e8e:	0fdb      	lsrs	r3, r3, #31
 8000e90:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_tilt |
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b2da      	uxtb	r2, r3
         val->emb_func_int2.int2_fsm_lc |
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	789b      	ldrb	r3, [r3, #2]
 8000e9a:	061b      	lsls	r3, r3, #24
 8000e9c:	0fdb      	lsrs	r3, r3, #31
 8000e9e:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_sig_mot |
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm1 |
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	78db      	ldrb	r3, [r3, #3]
 8000ea8:	07db      	lsls	r3, r3, #31
 8000eaa:	0fdb      	lsrs	r3, r3, #31
 8000eac:	b2db      	uxtb	r3, r3
         val->emb_func_int2.int2_fsm_lc |
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm2 |
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	78db      	ldrb	r3, [r3, #3]
 8000eb6:	079b      	lsls	r3, r3, #30
 8000eb8:	0fdb      	lsrs	r3, r3, #31
 8000eba:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm1 |
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm3 |
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	78db      	ldrb	r3, [r3, #3]
 8000ec4:	075b      	lsls	r3, r3, #29
 8000ec6:	0fdb      	lsrs	r3, r3, #31
 8000ec8:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm2 |
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm4 |
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	071b      	lsls	r3, r3, #28
 8000ed4:	0fdb      	lsrs	r3, r3, #31
 8000ed6:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm3 |
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm5 |
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	78db      	ldrb	r3, [r3, #3]
 8000ee0:	06db      	lsls	r3, r3, #27
 8000ee2:	0fdb      	lsrs	r3, r3, #31
 8000ee4:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm4 |
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm6 |
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	78db      	ldrb	r3, [r3, #3]
 8000eee:	069b      	lsls	r3, r3, #26
 8000ef0:	0fdb      	lsrs	r3, r3, #31
 8000ef2:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm5 |
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm7 |
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	78db      	ldrb	r3, [r3, #3]
 8000efc:	065b      	lsls	r3, r3, #25
 8000efe:	0fdb      	lsrs	r3, r3, #31
 8000f00:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm6 |
 8000f02:	4313      	orrs	r3, r2
 8000f04:	b2da      	uxtb	r2, r3
         val->fsm_int2_a.int2_fsm8 |
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	78db      	ldrb	r3, [r3, #3]
 8000f0a:	061b      	lsls	r3, r3, #24
 8000f0c:	0fdb      	lsrs	r3, r3, #31
 8000f0e:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm7 |
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm9 |
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	791b      	ldrb	r3, [r3, #4]
 8000f18:	07db      	lsls	r3, r3, #31
 8000f1a:	0fdb      	lsrs	r3, r3, #31
 8000f1c:	b2db      	uxtb	r3, r3
         val->fsm_int2_a.int2_fsm8 |
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm10 |
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	791b      	ldrb	r3, [r3, #4]
 8000f26:	079b      	lsls	r3, r3, #30
 8000f28:	0fdb      	lsrs	r3, r3, #31
 8000f2a:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm9 |
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm11 |
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	791b      	ldrb	r3, [r3, #4]
 8000f34:	075b      	lsls	r3, r3, #29
 8000f36:	0fdb      	lsrs	r3, r3, #31
 8000f38:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm10 |
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm12 |
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	791b      	ldrb	r3, [r3, #4]
 8000f42:	071b      	lsls	r3, r3, #28
 8000f44:	0fdb      	lsrs	r3, r3, #31
 8000f46:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm11 |
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm13 |
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	791b      	ldrb	r3, [r3, #4]
 8000f50:	06db      	lsls	r3, r3, #27
 8000f52:	0fdb      	lsrs	r3, r3, #31
 8000f54:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm12 |
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm14 |
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	791b      	ldrb	r3, [r3, #4]
 8000f5e:	069b      	lsls	r3, r3, #26
 8000f60:	0fdb      	lsrs	r3, r3, #31
 8000f62:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm13 |
 8000f64:	4313      	orrs	r3, r2
 8000f66:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm15 |
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	791b      	ldrb	r3, [r3, #4]
 8000f6c:	065b      	lsls	r3, r3, #25
 8000f6e:	0fdb      	lsrs	r3, r3, #31
 8000f70:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm14 |
 8000f72:	4313      	orrs	r3, r2
 8000f74:	b2da      	uxtb	r2, r3
         val->fsm_int2_b.int2_fsm16) != PROPERTY_DISABLE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	791b      	ldrb	r3, [r3, #4]
 8000f7a:	061b      	lsls	r3, r3, #24
 8000f7c:	0fdb      	lsrs	r3, r3, #31
 8000f7e:	b2db      	uxtb	r3, r3
         val->fsm_int2_b.int2_fsm15 |
 8000f80:	4313      	orrs	r3, r2
 8000f82:	b2db      	uxtb	r3, r3
    if ((val->emb_func_int2.int2_step_detector |
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <lsm6dsr_pin_int2_route_set+0x1a0>
    {
      val->md2_cfg.int2_emb_func = PROPERTY_ENABLE;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	785a      	ldrb	r2, [r3, #1]
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	705a      	strb	r2, [r3, #1]
 8000f92:	e004      	b.n	8000f9e <lsm6dsr_pin_int2_route_set+0x1aa>
    }
    else
    {
      val->md2_cfg.int2_emb_func = PROPERTY_DISABLE;
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	785a      	ldrb	r2, [r3, #1]
 8000f98:	2102      	movs	r1, #2
 8000f9a:	438a      	bics	r2, r1
 8000f9c:	705a      	strb	r2, [r3, #1]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT2_CTRL,
                            (uint8_t *)&val->int2_ctrl, 1);
 8000f9e:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_INT2_CTRL,
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	210e      	movs	r1, #14
 8000fa6:	f7ff f964 	bl	8000272 <lsm6dsr_write_reg>
 8000faa:	0003      	movs	r3, r0
 8000fac:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d108      	bne.n	8000fc6 <lsm6dsr_pin_int2_route_set+0x1d2>
  {
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD2_CFG,
                            (uint8_t *)&val->md2_cfg, 1);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_MD2_CFG,
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	215f      	movs	r1, #95	@ 0x5f
 8000fbe:	f7ff f958 	bl	8000272 <lsm6dsr_write_reg>
 8000fc2:	0003      	movs	r3, r0
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d108      	bne.n	8000fde <lsm6dsr_pin_int2_route_set+0x1ea>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG2,
 8000fcc:	2308      	movs	r3, #8
 8000fce:	18fa      	adds	r2, r7, r3
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	2158      	movs	r1, #88	@ 0x58
 8000fd6:	f7ff f923 	bl	8000220 <lsm6dsr_read_reg>
 8000fda:	0003      	movs	r3, r0
 8000fdc:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&tap_cfg2, 1);
  }

  if (ret == 0)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d171      	bne.n	80010c8 <lsm6dsr_pin_int2_route_set+0x2d4>
  {
    if ((val->int2_ctrl.int2_drdy_xl |
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	07db      	lsls	r3, r3, #31
 8000fea:	0fdb      	lsrs	r3, r3, #31
 8000fec:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_drdy_g |
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	079b      	lsls	r3, r3, #30
 8000ff4:	0fdb      	lsrs	r3, r3, #31
 8000ff6:	b2db      	uxtb	r3, r3
    if ((val->int2_ctrl.int2_drdy_xl |
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_drdy_temp |
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	075b      	lsls	r3, r3, #29
 8001002:	0fdb      	lsrs	r3, r3, #31
 8001004:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_drdy_g |
 8001006:	4313      	orrs	r3, r2
 8001008:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_th |
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	071b      	lsls	r3, r3, #28
 8001010:	0fdb      	lsrs	r3, r3, #31
 8001012:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_drdy_temp |
 8001014:	4313      	orrs	r3, r2
 8001016:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_ovr |
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	06db      	lsls	r3, r3, #27
 800101e:	0fdb      	lsrs	r3, r3, #31
 8001020:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_th |
 8001022:	4313      	orrs	r3, r2
 8001024:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_fifo_full |
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	069b      	lsls	r3, r3, #26
 800102c:	0fdb      	lsrs	r3, r3, #31
 800102e:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_ovr |
 8001030:	4313      	orrs	r3, r2
 8001032:	b2da      	uxtb	r2, r3
         val->int2_ctrl.int2_cnt_bdr |
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	065b      	lsls	r3, r3, #25
 800103a:	0fdb      	lsrs	r3, r3, #31
 800103c:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_fifo_full |
 800103e:	4313      	orrs	r3, r2
 8001040:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_6d |
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	075b      	lsls	r3, r3, #29
 8001048:	0fdb      	lsrs	r3, r3, #31
 800104a:	b2db      	uxtb	r3, r3
         val->int2_ctrl.int2_cnt_bdr |
 800104c:	4313      	orrs	r3, r2
 800104e:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_double_tap |
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	071b      	lsls	r3, r3, #28
 8001056:	0fdb      	lsrs	r3, r3, #31
 8001058:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_6d |
 800105a:	4313      	orrs	r3, r2
 800105c:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_ff |
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	785b      	ldrb	r3, [r3, #1]
 8001062:	06db      	lsls	r3, r3, #27
 8001064:	0fdb      	lsrs	r3, r3, #31
 8001066:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_double_tap |
 8001068:	4313      	orrs	r3, r2
 800106a:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_wu |
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	785b      	ldrb	r3, [r3, #1]
 8001070:	069b      	lsls	r3, r3, #26
 8001072:	0fdb      	lsrs	r3, r3, #31
 8001074:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_ff |
 8001076:	4313      	orrs	r3, r2
 8001078:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_single_tap |
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	785b      	ldrb	r3, [r3, #1]
 800107e:	065b      	lsls	r3, r3, #25
 8001080:	0fdb      	lsrs	r3, r3, #31
 8001082:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_wu |
 8001084:	4313      	orrs	r3, r2
 8001086:	b2da      	uxtb	r2, r3
         val->md2_cfg.int2_sleep_change) != PROPERTY_DISABLE)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	785b      	ldrb	r3, [r3, #1]
 800108c:	061b      	lsls	r3, r3, #24
 800108e:	0fdb      	lsrs	r3, r3, #31
 8001090:	b2db      	uxtb	r3, r3
         val->md2_cfg.int2_single_tap |
 8001092:	4313      	orrs	r3, r2
 8001094:	b2db      	uxtb	r3, r3
    if ((val->int2_ctrl.int2_drdy_xl |
 8001096:	2b00      	cmp	r3, #0
 8001098:	d007      	beq.n	80010aa <lsm6dsr_pin_int2_route_set+0x2b6>
    {
      tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800109a:	2308      	movs	r3, #8
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	2180      	movs	r1, #128	@ 0x80
 80010a2:	4249      	negs	r1, r1
 80010a4:	430a      	orrs	r2, r1
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e005      	b.n	80010b6 <lsm6dsr_pin_int2_route_set+0x2c2>
    }

    else
    {
      tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 80010aa:	2308      	movs	r3, #8
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	217f      	movs	r1, #127	@ 0x7f
 80010b2:	400a      	ands	r2, r1
 80010b4:	701a      	strb	r2, [r3, #0]
    }

    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG2,
 80010b6:	2308      	movs	r3, #8
 80010b8:	18fa      	adds	r2, r7, r3
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	2301      	movs	r3, #1
 80010be:	2158      	movs	r1, #88	@ 0x58
 80010c0:	f7ff f8d7 	bl	8000272 <lsm6dsr_write_reg>
 80010c4:	0003      	movs	r3, r0
 80010c6:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&tap_cfg2, 1);
  }

  return ret;
 80010c8:	68fb      	ldr	r3, [r7, #12]
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b004      	add	sp, #16
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <lsm6dsr_pin_int2_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_int2_route_get(const stmdev_ctx_t *ctx,
                                   lsm6dsr_pin_int2_route_t *val)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2102      	movs	r1, #2
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff fc4b 	bl	800097c <lsm6dsr_mem_bank_set>
 80010e6:	0003      	movs	r3, r0
 80010e8:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d108      	bne.n	8001102 <lsm6dsr_pin_int2_route_get+0x30>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT2,
                           (uint8_t *)&val->emb_func_int2, 1);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	1c9a      	adds	r2, r3, #2
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_INT2,
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	2301      	movs	r3, #1
 80010f8:	210e      	movs	r1, #14
 80010fa:	f7ff f891 	bl	8000220 <lsm6dsr_read_reg>
 80010fe:	0003      	movs	r3, r0
 8001100:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d108      	bne.n	800111a <lsm6dsr_pin_int2_route_get+0x48>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT2_A,
                           (uint8_t *)&val->fsm_int2_a, 1);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	1cda      	adds	r2, r3, #3
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT2_A,
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	2301      	movs	r3, #1
 8001110:	210f      	movs	r1, #15
 8001112:	f7ff f885 	bl	8000220 <lsm6dsr_read_reg>
 8001116:	0003      	movs	r3, r0
 8001118:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <lsm6dsr_pin_int2_route_get+0x60>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT2_B,
                           (uint8_t *)&val->fsm_int2_b, 1);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	1d1a      	adds	r2, r3, #4
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_INT2_B,
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	2301      	movs	r3, #1
 8001128:	2110      	movs	r1, #16
 800112a:	f7ff f879 	bl	8000220 <lsm6dsr_read_reg>
 800112e:	0003      	movs	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <lsm6dsr_pin_int2_route_get+0x74>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2100      	movs	r1, #0
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff fc1d 	bl	800097c <lsm6dsr_mem_bank_set>
 8001142:	0003      	movs	r3, r0
 8001144:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d107      	bne.n	800115c <lsm6dsr_pin_int2_route_get+0x8a>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT2_CTRL,
                           (uint8_t *)&val->int2_ctrl, 1);
 800114c:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_INT2_CTRL,
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	2301      	movs	r3, #1
 8001152:	210e      	movs	r1, #14
 8001154:	f7ff f864 	bl	8000220 <lsm6dsr_read_reg>
 8001158:	0003      	movs	r3, r0
 800115a:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d108      	bne.n	8001174 <lsm6dsr_pin_int2_route_get+0xa2>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD2_CFG,
                           (uint8_t *)&val->md2_cfg, 1);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_MD2_CFG,
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	2301      	movs	r3, #1
 800116a:	215f      	movs	r1, #95	@ 0x5f
 800116c:	f7ff f858 	bl	8000220 <lsm6dsr_read_reg>
 8001170:	0003      	movs	r3, r0
 8001172:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001174:	68fb      	ldr	r3, [r7, #12]
}
 8001176:	0018      	movs	r0, r3
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}

0800117e <lsm6dsr_pin_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_mode_set(const stmdev_ctx_t *ctx,
                             lsm6dsr_pp_od_t val)
{
 800117e:	b590      	push	{r4, r7, lr}
 8001180:	b085      	sub	sp, #20
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
 8001186:	000a      	movs	r2, r1
 8001188:	1cfb      	adds	r3, r7, #3
 800118a:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 800118c:	2408      	movs	r4, #8
 800118e:	193a      	adds	r2, r7, r4
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	2301      	movs	r3, #1
 8001194:	2112      	movs	r1, #18
 8001196:	f7ff f843 	bl	8000220 <lsm6dsr_read_reg>
 800119a:	0003      	movs	r3, r0
 800119c:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d117      	bne.n	80011d4 <lsm6dsr_pin_mode_set+0x56>
  {
    ctrl3_c.pp_od = (uint8_t)val;
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2201      	movs	r2, #1
 80011aa:	4013      	ands	r3, r2
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	2101      	movs	r1, #1
 80011b2:	400a      	ands	r2, r1
 80011b4:	0110      	lsls	r0, r2, #4
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	2110      	movs	r1, #16
 80011ba:	438a      	bics	r2, r1
 80011bc:	1c11      	adds	r1, r2, #0
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	430a      	orrs	r2, r1
 80011c2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C,
 80011c4:	193a      	adds	r2, r7, r4
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	2301      	movs	r3, #1
 80011ca:	2112      	movs	r1, #18
 80011cc:	f7ff f851 	bl	8000272 <lsm6dsr_write_reg>
 80011d0:	0003      	movs	r3, r0
 80011d2:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 80011d4:	68fb      	ldr	r3, [r7, #12]
}
 80011d6:	0018      	movs	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	b005      	add	sp, #20
 80011dc:	bd90      	pop	{r4, r7, pc}

080011de <lsm6dsr_pin_polarity_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pin_polarity_set(const stmdev_ctx_t *ctx,
                                 lsm6dsr_h_lactive_t val)
{
 80011de:	b590      	push	{r4, r7, lr}
 80011e0:	b085      	sub	sp, #20
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	000a      	movs	r2, r1
 80011e8:	1cfb      	adds	r3, r7, #3
 80011ea:	701a      	strb	r2, [r3, #0]
  lsm6dsr_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_CTRL3_C,
 80011ec:	2408      	movs	r4, #8
 80011ee:	193a      	adds	r2, r7, r4
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	2301      	movs	r3, #1
 80011f4:	2112      	movs	r1, #18
 80011f6:	f7ff f813 	bl	8000220 <lsm6dsr_read_reg>
 80011fa:	0003      	movs	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d117      	bne.n	8001234 <lsm6dsr_pin_polarity_set+0x56>
  {
    ctrl3_c.h_lactive = (uint8_t)val;
 8001204:	1cfb      	adds	r3, r7, #3
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2201      	movs	r2, #1
 800120a:	4013      	ands	r3, r2
 800120c:	b2da      	uxtb	r2, r3
 800120e:	193b      	adds	r3, r7, r4
 8001210:	2101      	movs	r1, #1
 8001212:	400a      	ands	r2, r1
 8001214:	0150      	lsls	r0, r2, #5
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	2120      	movs	r1, #32
 800121a:	438a      	bics	r2, r1
 800121c:	1c11      	adds	r1, r2, #0
 800121e:	1c02      	adds	r2, r0, #0
 8001220:	430a      	orrs	r2, r1
 8001222:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_CTRL3_C,
 8001224:	193a      	adds	r2, r7, r4
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	2301      	movs	r3, #1
 800122a:	2112      	movs	r1, #18
 800122c:	f7ff f821 	bl	8000272 <lsm6dsr_write_reg>
 8001230:	0003      	movs	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8001234:	68fb      	ldr	r3, [r7, #12]
}
 8001236:	0018      	movs	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	b005      	add	sp, #20
 800123c:	bd90      	pop	{r4, r7, pc}

0800123e <lsm6dsr_int_notification_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_int_notification_set(const stmdev_ctx_t *ctx,
                                     lsm6dsr_lir_t val)
{
 800123e:	b590      	push	{r4, r7, lr}
 8001240:	b087      	sub	sp, #28
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	000a      	movs	r2, r1
 8001248:	1cfb      	adds	r3, r7, #3
 800124a:	701a      	strb	r2, [r3, #0]
  lsm6dsr_tap_cfg0_t tap_cfg0;
  lsm6dsr_page_rw_t page_rw;
  int32_t ret;

  ret = lsm6dsr_read_reg(ctx, LSM6DSR_TAP_CFG0,
 800124c:	2410      	movs	r4, #16
 800124e:	193a      	adds	r2, r7, r4
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	2301      	movs	r3, #1
 8001254:	2156      	movs	r1, #86	@ 0x56
 8001256:	f7fe ffe3 	bl	8000220 <lsm6dsr_read_reg>
 800125a:	0003      	movs	r3, r0
 800125c:	617b      	str	r3, [r7, #20]
                         (uint8_t *)&tap_cfg0, 1);

  if (ret == 0)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d127      	bne.n	80012b4 <lsm6dsr_int_notification_set+0x76>
  {
    tap_cfg0.lir = (uint8_t)val & 0x01U;
 8001264:	1cfb      	adds	r3, r7, #3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2201      	movs	r2, #1
 800126a:	4013      	ands	r3, r2
 800126c:	b2da      	uxtb	r2, r3
 800126e:	193b      	adds	r3, r7, r4
 8001270:	2101      	movs	r1, #1
 8001272:	400a      	ands	r2, r1
 8001274:	0010      	movs	r0, r2
 8001276:	781a      	ldrb	r2, [r3, #0]
 8001278:	2101      	movs	r1, #1
 800127a:	438a      	bics	r2, r1
 800127c:	1c11      	adds	r1, r2, #0
 800127e:	1c02      	adds	r2, r0, #0
 8001280:	430a      	orrs	r2, r1
 8001282:	701a      	strb	r2, [r3, #0]
    tap_cfg0.int_clr_on_read = (uint8_t)val & 0x01U;
 8001284:	1cfb      	adds	r3, r7, #3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2201      	movs	r2, #1
 800128a:	4013      	ands	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	193b      	adds	r3, r7, r4
 8001290:	2101      	movs	r1, #1
 8001292:	400a      	ands	r2, r1
 8001294:	0190      	lsls	r0, r2, #6
 8001296:	781a      	ldrb	r2, [r3, #0]
 8001298:	2140      	movs	r1, #64	@ 0x40
 800129a:	438a      	bics	r2, r1
 800129c:	1c11      	adds	r1, r2, #0
 800129e:	1c02      	adds	r2, r0, #0
 80012a0:	430a      	orrs	r2, r1
 80012a2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_TAP_CFG0,
 80012a4:	193a      	adds	r2, r7, r4
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	2301      	movs	r3, #1
 80012aa:	2156      	movs	r1, #86	@ 0x56
 80012ac:	f7fe ffe1 	bl	8000272 <lsm6dsr_write_reg>
 80012b0:	0003      	movs	r3, r0
 80012b2:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&tap_cfg0, 1);
  }

  if (ret == 0)
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <lsm6dsr_int_notification_set+0x8a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2102      	movs	r1, #2
 80012be:	0018      	movs	r0, r3
 80012c0:	f7ff fb5c 	bl	800097c <lsm6dsr_mem_bank_set>
 80012c4:	0003      	movs	r3, r0
 80012c6:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d108      	bne.n	80012e0 <lsm6dsr_int_notification_set+0xa2>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_PAGE_RW,
 80012ce:	230c      	movs	r3, #12
 80012d0:	18fa      	adds	r2, r7, r3
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	2301      	movs	r3, #1
 80012d6:	2117      	movs	r1, #23
 80012d8:	f7fe ffa2 	bl	8000220 <lsm6dsr_read_reg>
 80012dc:	0003      	movs	r3, r0
 80012de:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d118      	bne.n	8001318 <lsm6dsr_int_notification_set+0xda>
  {
    page_rw.emb_func_lir = ((uint8_t)val & 0x02U) >> 1;
 80012e6:	1cfb      	adds	r3, r7, #3
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	1c1a      	adds	r2, r3, #0
 80012ee:	2301      	movs	r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	240c      	movs	r4, #12
 80012f6:	193b      	adds	r3, r7, r4
 80012f8:	01d0      	lsls	r0, r2, #7
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	217f      	movs	r1, #127	@ 0x7f
 80012fe:	400a      	ands	r2, r1
 8001300:	1c11      	adds	r1, r2, #0
 8001302:	1c02      	adds	r2, r0, #0
 8001304:	430a      	orrs	r2, r1
 8001306:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_PAGE_RW,
 8001308:	193a      	adds	r2, r7, r4
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	2301      	movs	r3, #1
 800130e:	2117      	movs	r1, #23
 8001310:	f7fe ffaf 	bl	8000272 <lsm6dsr_write_reg>
 8001314:	0003      	movs	r3, r0
 8001316:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&page_rw, 1);
  }

  if (ret == 0)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <lsm6dsr_int_notification_set+0xee>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2100      	movs	r1, #0
 8001322:	0018      	movs	r0, r3
 8001324:	f7ff fb2a 	bl	800097c <lsm6dsr_mem_bank_set>
 8001328:	0003      	movs	r3, r0
 800132a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800132c:	697b      	ldr	r3, [r7, #20]
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	b007      	add	sp, #28
 8001334:	bd90      	pop	{r4, r7, pc}

08001336 <lsm6dsr_pedo_sens_set>:
  * @param  val    Change the values of pedo_en in reg EMB_FUNC_EN_A
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pedo_sens_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8001336:	b590      	push	{r4, r7, lr}
 8001338:	b085      	sub	sp, #20
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	000a      	movs	r2, r1
 8001340:	1cfb      	adds	r3, r7, #3
 8001342:	701a      	strb	r2, [r3, #0]
  lsm6dsr_emb_func_en_a_t emb_func_en_a;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2102      	movs	r1, #2
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fb17 	bl	800097c <lsm6dsr_mem_bank_set>
 800134e:	0003      	movs	r3, r0
 8001350:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d108      	bne.n	800136a <lsm6dsr_pedo_sens_set+0x34>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_EN_A,
 8001358:	2308      	movs	r3, #8
 800135a:	18fa      	adds	r2, r7, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	2301      	movs	r3, #1
 8001360:	2104      	movs	r1, #4
 8001362:	f7fe ff5d 	bl	8000220 <lsm6dsr_read_reg>
 8001366:	0003      	movs	r3, r0
 8001368:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d118      	bne.n	80013a2 <lsm6dsr_pedo_sens_set+0x6c>
  {
    emb_func_en_a.pedo_en = (uint8_t)val;
 8001370:	1cfb      	adds	r3, r7, #3
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	b2da      	uxtb	r2, r3
 800137a:	2408      	movs	r4, #8
 800137c:	193b      	adds	r3, r7, r4
 800137e:	2101      	movs	r1, #1
 8001380:	400a      	ands	r2, r1
 8001382:	00d0      	lsls	r0, r2, #3
 8001384:	781a      	ldrb	r2, [r3, #0]
 8001386:	2108      	movs	r1, #8
 8001388:	438a      	bics	r2, r1
 800138a:	1c11      	adds	r1, r2, #0
 800138c:	1c02      	adds	r2, r0, #0
 800138e:	430a      	orrs	r2, r1
 8001390:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_EN_A,
 8001392:	193a      	adds	r2, r7, r4
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	2301      	movs	r3, #1
 8001398:	2104      	movs	r1, #4
 800139a:	f7fe ff6a 	bl	8000272 <lsm6dsr_write_reg>
 800139e:	0003      	movs	r3, r0
 80013a0:	60fb      	str	r3, [r7, #12]
                            (uint8_t *)&emb_func_en_a, 1);
  }

  if (ret == 0)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d106      	bne.n	80013b6 <lsm6dsr_pedo_sens_set+0x80>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2100      	movs	r1, #0
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff fae5 	bl	800097c <lsm6dsr_mem_bank_set>
 80013b2:	0003      	movs	r3, r0
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	0018      	movs	r0, r3
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b005      	add	sp, #20
 80013be:	bd90      	pop	{r4, r7, pc}

080013c0 <lsm6dsr_pedo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pedo_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dsr_pedo_mode_t val)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	000a      	movs	r2, r1
 80013ca:	1cfb      	adds	r3, r7, #3
 80013cc:	701a      	strb	r2, [r3, #0]
  lsm6dsr_adv_pedo_t adv_pedo;
  lsm6dsr_emb_func_en_b_t emb_func_en_b;
  lsm6dsr_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2102      	movs	r1, #2
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff fad2 	bl	800097c <lsm6dsr_mem_bank_set>
 80013d8:	0003      	movs	r3, r0
 80013da:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d108      	bne.n	80013f4 <lsm6dsr_pedo_mode_set+0x34>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_ADV_PEDO, (uint8_t *)&adv_pedo, 1);
 80013e2:	2310      	movs	r3, #16
 80013e4:	18fa      	adds	r2, r7, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	2301      	movs	r3, #1
 80013ea:	2103      	movs	r1, #3
 80013ec:	f7fe ff18 	bl	8000220 <lsm6dsr_read_reg>
 80013f0:	0003      	movs	r3, r0
 80013f2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d11a      	bne.n	8001430 <lsm6dsr_pedo_mode_set+0x70>
  {
    adv_pedo.pedo_fpr_adf_dis = (~((uint8_t)val) & 0x01U);
 80013fa:	1cfb      	adds	r3, r7, #3
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2201      	movs	r2, #1
 8001400:	4013      	ands	r3, r2
 8001402:	425a      	negs	r2, r3
 8001404:	4153      	adcs	r3, r2
 8001406:	b2da      	uxtb	r2, r3
 8001408:	2410      	movs	r4, #16
 800140a:	193b      	adds	r3, r7, r4
 800140c:	2101      	movs	r1, #1
 800140e:	400a      	ands	r2, r1
 8001410:	1890      	adds	r0, r2, r2
 8001412:	781a      	ldrb	r2, [r3, #0]
 8001414:	2102      	movs	r1, #2
 8001416:	438a      	bics	r2, r1
 8001418:	1c11      	adds	r1, r2, #0
 800141a:	1c02      	adds	r2, r0, #0
 800141c:	430a      	orrs	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_ADV_PEDO, (uint8_t *)&adv_pedo, 1);
 8001420:	193a      	adds	r2, r7, r4
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	2301      	movs	r3, #1
 8001426:	2103      	movs	r1, #3
 8001428:	f7fe ff23 	bl	8000272 <lsm6dsr_write_reg>
 800142c:	0003      	movs	r3, r0
 800142e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d108      	bne.n	8001448 <lsm6dsr_pedo_mode_set+0x88>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_EN_B,
 8001436:	230c      	movs	r3, #12
 8001438:	18fa      	adds	r2, r7, r3
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	2301      	movs	r3, #1
 800143e:	2105      	movs	r1, #5
 8001440:	f7fe feee 	bl	8000220 <lsm6dsr_read_reg>
 8001444:	0003      	movs	r3, r0
 8001446:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d118      	bne.n	8001480 <lsm6dsr_pedo_mode_set+0xc0>
  {
    emb_func_en_b.pedo_adv_en = (uint8_t)val & 0x01U;
 800144e:	1cfb      	adds	r3, r7, #3
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	b2da      	uxtb	r2, r3
 8001458:	240c      	movs	r4, #12
 800145a:	193b      	adds	r3, r7, r4
 800145c:	2101      	movs	r1, #1
 800145e:	400a      	ands	r2, r1
 8001460:	0110      	lsls	r0, r2, #4
 8001462:	781a      	ldrb	r2, [r3, #0]
 8001464:	2110      	movs	r1, #16
 8001466:	438a      	bics	r2, r1
 8001468:	1c11      	adds	r1, r2, #0
 800146a:	1c02      	adds	r2, r0, #0
 800146c:	430a      	orrs	r2, r1
 800146e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_write_reg(ctx, LSM6DSR_EMB_FUNC_EN_B,
 8001470:	193a      	adds	r2, r7, r4
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	2301      	movs	r3, #1
 8001476:	2105      	movs	r1, #5
 8001478:	f7fe fefb 	bl	8000272 <lsm6dsr_write_reg>
 800147c:	0003      	movs	r3, r0
 800147e:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&emb_func_en_b, 1);
  }

  if (ret == 0)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d106      	bne.n	8001494 <lsm6dsr_pedo_mode_set+0xd4>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2100      	movs	r1, #0
 800148a:	0018      	movs	r0, r3
 800148c:	f7ff fa76 	bl	800097c <lsm6dsr_mem_bank_set>
 8001490:	0003      	movs	r3, r0
 8001492:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d12c      	bne.n	80014f4 <lsm6dsr_pedo_mode_set+0x134>
  {
    ret = lsm6dsr_ln_pg_read_byte(ctx, LSM6DSR_PEDO_CMD_REG,
 800149a:	2408      	movs	r4, #8
 800149c:	193a      	adds	r2, r7, r4
 800149e:	2384      	movs	r3, #132	@ 0x84
 80014a0:	33ff      	adds	r3, #255	@ 0xff
 80014a2:	0019      	movs	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	0018      	movs	r0, r3
 80014a8:	f7ff fb41 	bl	8000b2e <lsm6dsr_ln_pg_read_byte>
 80014ac:	0003      	movs	r3, r0
 80014ae:	617b      	str	r3, [r7, #20]
                                  (uint8_t *)&pedo_cmd_reg);
    pedo_cmd_reg.fp_rejection_en = ((uint8_t)val & 0x01U);
 80014b0:	1cfb      	adds	r3, r7, #3
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	2101      	movs	r1, #1
 80014be:	400a      	ands	r2, r1
 80014c0:	0090      	lsls	r0, r2, #2
 80014c2:	781a      	ldrb	r2, [r3, #0]
 80014c4:	2104      	movs	r1, #4
 80014c6:	438a      	bics	r2, r1
 80014c8:	1c11      	adds	r1, r2, #0
 80014ca:	1c02      	adds	r2, r0, #0
 80014cc:	430a      	orrs	r2, r1
 80014ce:	701a      	strb	r2, [r3, #0]
    pedo_cmd_reg.ad_det_en = ((uint8_t)val & 0x02U) >> 1;
 80014d0:	1cfb      	adds	r3, r7, #3
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	085b      	lsrs	r3, r3, #1
 80014d6:	1c1a      	adds	r2, r3, #0
 80014d8:	2301      	movs	r3, #1
 80014da:	4013      	ands	r3, r2
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	193b      	adds	r3, r7, r4
 80014e0:	2101      	movs	r1, #1
 80014e2:	400a      	ands	r2, r1
 80014e4:	0010      	movs	r0, r2
 80014e6:	781a      	ldrb	r2, [r3, #0]
 80014e8:	2101      	movs	r1, #1
 80014ea:	438a      	bics	r2, r1
 80014ec:	1c11      	adds	r1, r2, #0
 80014ee:	1c02      	adds	r2, r0, #0
 80014f0:	430a      	orrs	r2, r1
 80014f2:	701a      	strb	r2, [r3, #0]
  }

  if (ret == 0)
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <lsm6dsr_pedo_mode_set+0x150>
  {
    ret = lsm6dsr_ln_pg_write_byte(ctx, LSM6DSR_PEDO_CMD_REG,
 80014fa:	2308      	movs	r3, #8
 80014fc:	18fa      	adds	r2, r7, r3
 80014fe:	2384      	movs	r3, #132	@ 0x84
 8001500:	33ff      	adds	r3, #255	@ 0xff
 8001502:	0019      	movs	r1, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	0018      	movs	r0, r3
 8001508:	f7ff fa66 	bl	80009d8 <lsm6dsr_ln_pg_write_byte>
 800150c:	0003      	movs	r3, r0
 800150e:	617b      	str	r3, [r7, #20]
                                   (uint8_t *)&pedo_cmd_reg);
  }

  return ret;
 8001510:	697b      	ldr	r3, [r7, #20]
}
 8001512:	0018      	movs	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	b007      	add	sp, #28
 8001518:	bd90      	pop	{r4, r7, pc}

0800151a <lsm6dsr_pedo_debounce_steps_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pedo_debounce_steps_set(const stmdev_ctx_t *ctx,
                                        uint8_t *buff)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_ln_pg_write_byte(ctx, LSM6DSR_PEDO_DEB_STEPS_CONF,
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	23c2      	movs	r3, #194	@ 0xc2
 8001528:	0059      	lsls	r1, r3, #1
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	0018      	movs	r0, r3
 800152e:	f7ff fa53 	bl	80009d8 <lsm6dsr_ln_pg_write_byte>
 8001532:	0003      	movs	r3, r0
 8001534:	60fb      	str	r3, [r7, #12]
                                 buff);

  return ret;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b004      	add	sp, #16
 800153e:	bd80      	pop	{r7, pc}

08001540 <lsm6dsr_pedo_int_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_pedo_int_mode_set(const stmdev_ctx_t *ctx,
                                  lsm6dsr_carry_count_en_t val)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	000a      	movs	r2, r1
 800154a:	1cfb      	adds	r3, r7, #3
 800154c:	701a      	strb	r2, [r3, #0]
  lsm6dsr_pedo_cmd_reg_t pedo_cmd_reg;
  int32_t ret;

  ret = lsm6dsr_ln_pg_read_byte(ctx, LSM6DSR_PEDO_CMD_REG,
 800154e:	2408      	movs	r4, #8
 8001550:	193a      	adds	r2, r7, r4
 8001552:	2384      	movs	r3, #132	@ 0x84
 8001554:	33ff      	adds	r3, #255	@ 0xff
 8001556:	0019      	movs	r1, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	0018      	movs	r0, r3
 800155c:	f7ff fae7 	bl	8000b2e <lsm6dsr_ln_pg_read_byte>
 8001560:	0003      	movs	r3, r0
 8001562:	60fb      	str	r3, [r7, #12]
                                (uint8_t *)&pedo_cmd_reg);

  if (ret == 0)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d119      	bne.n	800159e <lsm6dsr_pedo_int_mode_set+0x5e>
  {
    pedo_cmd_reg.carry_count_en = (uint8_t)val;
 800156a:	1cfb      	adds	r3, r7, #3
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2201      	movs	r2, #1
 8001570:	4013      	ands	r3, r2
 8001572:	b2da      	uxtb	r2, r3
 8001574:	193b      	adds	r3, r7, r4
 8001576:	2101      	movs	r1, #1
 8001578:	400a      	ands	r2, r1
 800157a:	00d0      	lsls	r0, r2, #3
 800157c:	781a      	ldrb	r2, [r3, #0]
 800157e:	2108      	movs	r1, #8
 8001580:	438a      	bics	r2, r1
 8001582:	1c11      	adds	r1, r2, #0
 8001584:	1c02      	adds	r2, r0, #0
 8001586:	430a      	orrs	r2, r1
 8001588:	701a      	strb	r2, [r3, #0]
    ret = lsm6dsr_ln_pg_write_byte(ctx, LSM6DSR_PEDO_CMD_REG,
 800158a:	193a      	adds	r2, r7, r4
 800158c:	2384      	movs	r3, #132	@ 0x84
 800158e:	33ff      	adds	r3, #255	@ 0xff
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fa1f 	bl	80009d8 <lsm6dsr_ln_pg_write_byte>
 800159a:	0003      	movs	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]
                                   (uint8_t *)&pedo_cmd_reg);
  }

  return ret;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	0018      	movs	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	b005      	add	sp, #20
 80015a6:	bd90      	pop	{r4, r7, pc}

080015a8 <lsm6dsr_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_enable_get(const stmdev_ctx_t *ctx,
                               lsm6dsr_emb_fsm_enable_t *val)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2102      	movs	r1, #2
 80015b6:	0018      	movs	r0, r3
 80015b8:	f7ff f9e0 	bl	800097c <lsm6dsr_mem_bank_set>
 80015bc:	0003      	movs	r3, r0
 80015be:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <lsm6dsr_fsm_enable_get+0x2e>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
                           (uint8_t *)&val->fsm_enable_a, 1);
 80015c6:	683a      	ldr	r2, [r7, #0]
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_A,
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	2301      	movs	r3, #1
 80015cc:	2146      	movs	r1, #70	@ 0x46
 80015ce:	f7fe fe27 	bl	8000220 <lsm6dsr_read_reg>
 80015d2:	0003      	movs	r3, r0
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <lsm6dsr_fsm_enable_get+0x46>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
                           (uint8_t *)&val->fsm_enable_b, 1);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	1c5a      	adds	r2, r3, #1
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_FSM_ENABLE_B,
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	2301      	movs	r3, #1
 80015e4:	2147      	movs	r1, #71	@ 0x47
 80015e6:	f7fe fe1b 	bl	8000220 <lsm6dsr_read_reg>
 80015ea:	0003      	movs	r3, r0
 80015ec:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <lsm6dsr_fsm_enable_get+0x5a>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2100      	movs	r1, #0
 80015f8:	0018      	movs	r0, r3
 80015fa:	f7ff f9bf 	bl	800097c <lsm6dsr_mem_bank_set>
 80015fe:	0003      	movs	r3, r0
 8001600:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b004      	add	sp, #16
 800160a:	bd80      	pop	{r7, pc}

0800160c <lsm6dsr_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsr_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                  lsm6dsr_fsm_odr_t *val)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  lsm6dsr_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;

  ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_EMBEDDED_FUNC_BANK);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2102      	movs	r1, #2
 800161a:	0018      	movs	r0, r3
 800161c:	f7ff f9ae 	bl	800097c <lsm6dsr_mem_bank_set>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d108      	bne.n	800163c <lsm6dsr_fsm_data_rate_get+0x30>
  {
    ret = lsm6dsr_read_reg(ctx, LSM6DSR_EMB_FUNC_ODR_CFG_B,
 800162a:	2308      	movs	r3, #8
 800162c:	18fa      	adds	r2, r7, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	2301      	movs	r3, #1
 8001632:	215f      	movs	r1, #95	@ 0x5f
 8001634:	f7fe fdf4 	bl	8000220 <lsm6dsr_read_reg>
 8001638:	0003      	movs	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <lsm6dsr_fsm_data_rate_get+0x44>
  {
    ret = lsm6dsr_mem_bank_set(ctx, LSM6DSR_USER_BANK);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2100      	movs	r1, #0
 8001646:	0018      	movs	r0, r3
 8001648:	f7ff f998 	bl	800097c <lsm6dsr_mem_bank_set>
 800164c:	0003      	movs	r3, r0
 800164e:	60fb      	str	r3, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8001650:	2308      	movs	r3, #8
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	06db      	lsls	r3, r3, #27
 8001658:	0f9b      	lsrs	r3, r3, #30
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b03      	cmp	r3, #3
 800165e:	d014      	beq.n	800168a <lsm6dsr_fsm_data_rate_get+0x7e>
 8001660:	dc17      	bgt.n	8001692 <lsm6dsr_fsm_data_rate_get+0x86>
 8001662:	2b02      	cmp	r3, #2
 8001664:	d00d      	beq.n	8001682 <lsm6dsr_fsm_data_rate_get+0x76>
 8001666:	dc14      	bgt.n	8001692 <lsm6dsr_fsm_data_rate_get+0x86>
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <lsm6dsr_fsm_data_rate_get+0x66>
 800166c:	2b01      	cmp	r3, #1
 800166e:	d004      	beq.n	800167a <lsm6dsr_fsm_data_rate_get+0x6e>
 8001670:	e00f      	b.n	8001692 <lsm6dsr_fsm_data_rate_get+0x86>
  {
    case LSM6DSR_ODR_FSM_12Hz5:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
      break;
 8001678:	e00f      	b.n	800169a <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_26Hz:
      *val = LSM6DSR_ODR_FSM_26Hz;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
      break;
 8001680:	e00b      	b.n	800169a <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_52Hz:
      *val = LSM6DSR_ODR_FSM_52Hz;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	2202      	movs	r2, #2
 8001686:	701a      	strb	r2, [r3, #0]
      break;
 8001688:	e007      	b.n	800169a <lsm6dsr_fsm_data_rate_get+0x8e>

    case LSM6DSR_ODR_FSM_104Hz:
      *val = LSM6DSR_ODR_FSM_104Hz;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2203      	movs	r2, #3
 800168e:	701a      	strb	r2, [r3, #0]
      break;
 8001690:	e003      	b.n	800169a <lsm6dsr_fsm_data_rate_get+0x8e>

    default:
      *val = LSM6DSR_ODR_FSM_12Hz5;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	701a      	strb	r2, [r3, #0]
      break;
 8001698:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800169a:	68fb      	ldr	r3, [r7, #12]
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a8:	f001 fe2b 	bl	8003302 <HAL_Init>

  /* USER CODE BEGIN Init */
//   reconfigure_interupts(0); // Configure IMU interrupt pins as GPIO outputs set to 0
//   __HAL_RCC_GPIOA_CLK_ENABLE();
  clear_I2C_bus();
 80016ac:	f000 fce0 	bl	8002070 <clear_I2C_bus>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f868 	bl	8001784 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f000 f986 	bl	80019c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016b8:	f000 f966 	bl	8001988 <MX_DMA_Init>
  MX_I2C3_Init();
 80016bc:	f000 f8b8 	bl	8001830 <MX_I2C3_Init>
  MX_RTC_Init();
 80016c0:	f000 f8f6 	bl	80018b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  DMArunning 	= 0;
 80016c4:	4b21      	ldr	r3, [pc, #132]	@ (800174c <main+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	701a      	strb	r2, [r3, #0]
  tapsInQueue = 0;
 80016ca:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <main+0xac>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
  stepsInQueue = 0;
 80016d0:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <main+0xb0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
  timeInQueue = 0;
 80016d6:	4b20      	ldr	r3, [pc, #128]	@ (8001758 <main+0xb4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
  
  TickDMAflag 	= 0;
 80016dc:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <main+0xb8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
  TickRXcomp 	= 0;
 80016e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <main+0xbc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]

  TapDMAflag 	= 0;
 80016e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <main+0xc0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
  TapRXcomp 	= 0;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <main+0xc4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
  
  StepDMAflag 	= 0;
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <main+0xc8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
  StepRXcomp 	= 0;
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <main+0xcc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]

  inStopMode  = 0;
 8001700:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <main+0xd0>)
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
  inSleepMode = 0;
 8001706:	4b1c      	ldr	r3, [pc, #112]	@ (8001778 <main+0xd4>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]

  LSM6DSR_Init();
 800170c:	f000 fd06 	bl	800211c <LSM6DSR_Init>
//   reconfigure_interupts(1); // Configure IMU interrupt pins as EXTI
  
  MAX31331_Init();
 8001710:	f000 fdd0 	bl	80022b4 <MAX31331_Init>

  initJobQueue(&jobQueue);
 8001714:	4b19      	ldr	r3, [pc, #100]	@ (800177c <main+0xd8>)
 8001716:	0018      	movs	r0, r3
 8001718:	f000 fa2e 	bl	8001b78 <initJobQueue>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    HAL_Delay(1);
 800171c:	2001      	movs	r0, #1
 800171e:	f001 fe6b 	bl	80033f8 <HAL_Delay>

    // Parse data from complete jobs
    processJob();
 8001722:	f000 fb75 	bl	8001e10 <processJob>
    
    // If DMA is free and job queue !empty, start job
    if(!DMArunning) {
 8001726:	4b09      	ldr	r3, [pc, #36]	@ (800174c <main+0xa8>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f5      	bne.n	800171c <main+0x78>
      if (dequeueJob(&jobQueue, &job)) {
 8001730:	4a13      	ldr	r2, [pc, #76]	@ (8001780 <main+0xdc>)
 8001732:	4b12      	ldr	r3, [pc, #72]	@ (800177c <main+0xd8>)
 8001734:	0011      	movs	r1, r2
 8001736:	0018      	movs	r0, r3
 8001738:	f000 fa7a 	bl	8001c30 <dequeueJob>
 800173c:	1e03      	subs	r3, r0, #0
 800173e:	d0ed      	beq.n	800171c <main+0x78>
        startJob(job);
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <main+0xdc>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	0018      	movs	r0, r3
 8001746:	f000 faa1 	bl	8001c8c <startJob>
    HAL_Delay(1);
 800174a:	e7e7      	b.n	800171c <main+0x78>
 800174c:	20000193 	.word	0x20000193
 8001750:	20000190 	.word	0x20000190
 8001754:	20000191 	.word	0x20000191
 8001758:	20000192 	.word	0x20000192
 800175c:	20000194 	.word	0x20000194
 8001760:	20000195 	.word	0x20000195
 8001764:	20000196 	.word	0x20000196
 8001768:	20000197 	.word	0x20000197
 800176c:	20000198 	.word	0x20000198
 8001770:	20000199 	.word	0x20000199
 8001774:	200001b8 	.word	0x200001b8
 8001778:	200001b9 	.word	0x200001b9
 800177c:	20000144 	.word	0x20000144
 8001780:	20000010 	.word	0x20000010

08001784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001784:	b590      	push	{r4, r7, lr}
 8001786:	b097      	sub	sp, #92	@ 0x5c
 8001788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178a:	2410      	movs	r4, #16
 800178c:	193b      	adds	r3, r7, r4
 800178e:	0018      	movs	r0, r3
 8001790:	2348      	movs	r3, #72	@ 0x48
 8001792:	001a      	movs	r2, r3
 8001794:	2100      	movs	r1, #0
 8001796:	f006 fa9f 	bl	8007cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179a:	003b      	movs	r3, r7
 800179c:	0018      	movs	r0, r3
 800179e:	2310      	movs	r3, #16
 80017a0:	001a      	movs	r2, r3
 80017a2:	2100      	movs	r1, #0
 80017a4:	f006 fa98 	bl	8007cd8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017a8:	2380      	movs	r3, #128	@ 0x80
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	0018      	movs	r0, r3
 80017ae:	f004 ff81 	bl	80066b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80017b2:	193b      	adds	r3, r7, r4
 80017b4:	220b      	movs	r2, #11
 80017b6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b8:	193b      	adds	r3, r7, r4
 80017ba:	2280      	movs	r2, #128	@ 0x80
 80017bc:	0252      	lsls	r2, r2, #9
 80017be:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c0:	193b      	adds	r3, r7, r4
 80017c2:	2280      	movs	r2, #128	@ 0x80
 80017c4:	0052      	lsls	r2, r2, #1
 80017c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c8:	193b      	adds	r3, r7, r4
 80017ca:	2240      	movs	r2, #64	@ 0x40
 80017cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80017ce:	193b      	adds	r3, r7, r4
 80017d0:	2201      	movs	r2, #1
 80017d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017d4:	193b      	adds	r3, r7, r4
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017da:	193b      	adds	r3, r7, r4
 80017dc:	0018      	movs	r0, r3
 80017de:	f004 ffd5 	bl	800678c <HAL_RCC_OscConfig>
 80017e2:	1e03      	subs	r3, r0, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017e6:	f000 ff5f 	bl	80026a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ea:	003b      	movs	r3, r7
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80017f0:	003b      	movs	r3, r7
 80017f2:	2201      	movs	r2, #1
 80017f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017f6:	003b      	movs	r3, r7
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017fc:	003b      	movs	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001802:	003b      	movs	r3, r7
 8001804:	2101      	movs	r1, #1
 8001806:	0018      	movs	r0, r3
 8001808:	f005 fba6 	bl	8006f58 <HAL_RCC_ClockConfig>
 800180c:	1e03      	subs	r3, r0, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001810:	f000 ff4a 	bl	80026a8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_HSE, RCC_MCO2DIV_32);
 8001814:	23a0      	movs	r3, #160	@ 0xa0
 8001816:	03da      	lsls	r2, r3, #15
 8001818:	2380      	movs	r3, #128	@ 0x80
 800181a:	02db      	lsls	r3, r3, #11
 800181c:	4803      	ldr	r0, [pc, #12]	@ (800182c <SystemClock_Config+0xa8>)
 800181e:	0019      	movs	r1, r3
 8001820:	f005 fc86 	bl	8007130 <HAL_RCC_MCOConfig>
}
 8001824:	46c0      	nop			@ (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	b017      	add	sp, #92	@ 0x5c
 800182a:	bd90      	pop	{r4, r7, pc}
 800182c:	10020004 	.word	0x10020004

08001830 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001834:	4b1b      	ldr	r3, [pc, #108]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001836:	4a1c      	ldr	r2, [pc, #112]	@ (80018a8 <MX_I2C3_Init+0x78>)
 8001838:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00303D5B;
 800183a:	4b1a      	ldr	r3, [pc, #104]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800183c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ac <MX_I2C3_Init+0x7c>)
 800183e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001840:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001846:	4b17      	ldr	r3, [pc, #92]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001848:	2201      	movs	r2, #1
 800184a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800184c:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800184e:	2200      	movs	r2, #0
 8001850:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001852:	4b14      	ldr	r3, [pc, #80]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001854:	2200      	movs	r2, #0
 8001856:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001858:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800185a:	2200      	movs	r2, #0
 800185c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185e:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001864:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <MX_I2C3_Init+0x74>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800186a:	4b0e      	ldr	r3, [pc, #56]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800186c:	0018      	movs	r0, r3
 800186e:	f002 fc17 	bl	80040a0 <HAL_I2C_Init>
 8001872:	1e03      	subs	r3, r0, #0
 8001874:	d001      	beq.n	800187a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001876:	f000 ff17 	bl	80026a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800187c:	2100      	movs	r1, #0
 800187e:	0018      	movs	r0, r3
 8001880:	f004 fe80 	bl	8006584 <HAL_I2CEx_ConfigAnalogFilter>
 8001884:	1e03      	subs	r3, r0, #0
 8001886:	d001      	beq.n	800188c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001888:	f000 ff0e 	bl	80026a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800188c:	4b05      	ldr	r3, [pc, #20]	@ (80018a4 <MX_I2C3_Init+0x74>)
 800188e:	2100      	movs	r1, #0
 8001890:	0018      	movs	r0, r3
 8001892:	f004 fec3 	bl	800661c <HAL_I2CEx_ConfigDigitalFilter>
 8001896:	1e03      	subs	r3, r0, #0
 8001898:	d001      	beq.n	800189e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800189a:	f000 ff05 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */
  /* USER CODE END I2C3_Init 2 */

}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000003c 	.word	0x2000003c
 80018a8:	40008800 	.word	0x40008800
 80018ac:	00303d5b 	.word	0x00303d5b

080018b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	0018      	movs	r0, r3
 80018ba:	2314      	movs	r3, #20
 80018bc:	001a      	movs	r2, r3
 80018be:	2100      	movs	r1, #0
 80018c0:	f006 fa0a 	bl	8007cd8 <memset>
  RTC_DateTypeDef sDate = {0};
 80018c4:	003b      	movs	r3, r7
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018ca:	4b2d      	ldr	r3, [pc, #180]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018cc:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <MX_RTC_Init+0xd4>)
 80018ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018d8:	227f      	movs	r2, #127	@ 0x7f
 80018da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018dc:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018de:	22ff      	movs	r2, #255	@ 0xff
 80018e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018e8:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018f6:	2280      	movs	r2, #128	@ 0x80
 80018f8:	05d2      	lsls	r2, r2, #23
 80018fa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80018fc:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <MX_RTC_Init+0xd0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8001902:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <MX_RTC_Init+0xd0>)
 8001904:	2200      	movs	r2, #0
 8001906:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001908:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <MX_RTC_Init+0xd0>)
 800190a:	0018      	movs	r0, r3
 800190c:	f005 ff5e 	bl	80077cc <HAL_RTC_Init>
 8001910:	1e03      	subs	r3, r0, #0
 8001912:	d001      	beq.n	8001918 <MX_RTC_Init+0x68>
  {
    Error_Handler();
 8001914:	f000 fec8 	bl	80026a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001936:	1d39      	adds	r1, r7, #4
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <MX_RTC_Init+0xd0>)
 800193a:	2201      	movs	r2, #1
 800193c:	0018      	movs	r0, r3
 800193e:	f005 ffeb 	bl	8007918 <HAL_RTC_SetTime>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d001      	beq.n	800194a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8001946:	f000 feaf 	bl	80026a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800194a:	003b      	movs	r3, r7
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001950:	003b      	movs	r3, r7
 8001952:	2201      	movs	r2, #1
 8001954:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001956:	003b      	movs	r3, r7
 8001958:	2201      	movs	r2, #1
 800195a:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800195c:	003b      	movs	r3, r7
 800195e:	2200      	movs	r2, #0
 8001960:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001962:	0039      	movs	r1, r7
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <MX_RTC_Init+0xd0>)
 8001966:	2201      	movs	r2, #1
 8001968:	0018      	movs	r0, r3
 800196a:	f006 f895 	bl	8007a98 <HAL_RTC_SetDate>
 800196e:	1e03      	subs	r3, r0, #0
 8001970:	d001      	beq.n	8001976 <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 8001972:	f000 fe99 	bl	80026a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	46bd      	mov	sp, r7
 800197a:	b006      	add	sp, #24
 800197c:	bd80      	pop	{r7, pc}
 800197e:	46c0      	nop			@ (mov r8, r8)
 8001980:	200000ec 	.word	0x200000ec
 8001984:	40002800 	.word	0x40002800

08001988 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800198e:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_DMA_Init+0x38>)
 8001990:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <MX_DMA_Init+0x38>)
 8001994:	2101      	movs	r1, #1
 8001996:	430a      	orrs	r2, r1
 8001998:	649a      	str	r2, [r3, #72]	@ 0x48
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_DMA_Init+0x38>)
 800199c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2009      	movs	r0, #9
 80019ac:	f001 fdf2 	bl	8003594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80019b0:	2009      	movs	r0, #9
 80019b2:	f001 fe04 	bl	80035be <HAL_NVIC_EnableIRQ>

}
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			@ (mov r8, r8)
 80019c0:	40021000 	.word	0x40021000

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	240c      	movs	r4, #12
 80019cc:	193b      	adds	r3, r7, r4
 80019ce:	0018      	movs	r0, r3
 80019d0:	2314      	movs	r3, #20
 80019d2:	001a      	movs	r2, r3
 80019d4:	2100      	movs	r1, #0
 80019d6:	f006 f97f 	bl	8007cd8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */

  /*Configure GPIO pin : IMU_INT1_Float_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Float_Pin;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	2202      	movs	r2, #2
 80019de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	2202      	movs	r2, #2
 80019ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_INT1_Float_GPIO_Port, &GPIO_InitStruct);
 80019ec:	193a      	adds	r2, r7, r4
 80019ee:	23a0      	movs	r3, #160	@ 0xa0
 80019f0:	05db      	lsls	r3, r3, #23
 80019f2:	0011      	movs	r1, r2
 80019f4:	0018      	movs	r0, r3
 80019f6:	f002 f8c7 	bl	8003b88 <HAL_GPIO_Init>
  
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 80019fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a00:	2120      	movs	r1, #32
 8001a02:	430a      	orrs	r2, r1
 8001a04:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a06:	4b58      	ldr	r3, [pc, #352]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b55      	ldr	r3, [pc, #340]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a14:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a16:	4b54      	ldr	r3, [pc, #336]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a1e:	4b52      	ldr	r3, [pc, #328]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a22:	2201      	movs	r2, #1
 8001a24:	4013      	ands	r3, r2
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a2e:	4b4e      	ldr	r3, [pc, #312]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a30:	2102      	movs	r1, #2
 8001a32:	430a      	orrs	r2, r1
 8001a34:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001a36:	4b4c      	ldr	r3, [pc, #304]	@ (8001b68 <MX_GPIO_Init+0x1a4>)
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	603b      	str	r3, [r7, #0]
 8001a40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Vcom_Sel_Pin|XRST_Pin|ENBS_Pin|SI7_Pin
 8001a42:	494a      	ldr	r1, [pc, #296]	@ (8001b6c <MX_GPIO_Init+0x1a8>)
 8001a44:	4b4a      	ldr	r3, [pc, #296]	@ (8001b70 <MX_GPIO_Init+0x1ac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f002 fae1 	bl	8004010 <HAL_GPIO_WritePin>
                          |SI6_Pin|SI5_Pin|SI4_Pin|DBG_SWO_Pin
                          |ENBG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SI3_Pin|SI2_Pin|SI1_Pin|SI0_Pin
 8001a4e:	239e      	movs	r3, #158	@ 0x9e
 8001a50:	0219      	lsls	r1, r3, #8
 8001a52:	23a0      	movs	r3, #160	@ 0xa0
 8001a54:	05db      	lsls	r3, r3, #23
 8001a56:	2200      	movs	r2, #0
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f002 fad9 	bl	8004010 <HAL_GPIO_WritePin>
                          |DEN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : NRST_Pin BOOT0_Pin */
  GPIO_InitStruct.Pin = NRST_Pin|BOOT0_Pin;
 8001a5e:	193b      	adds	r3, r7, r4
 8001a60:	220c      	movs	r2, #12
 8001a62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a64:	193b      	adds	r3, r7, r4
 8001a66:	2200      	movs	r2, #0
 8001a68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	4a40      	ldr	r2, [pc, #256]	@ (8001b74 <MX_GPIO_Init+0x1b0>)
 8001a74:	0019      	movs	r1, r3
 8001a76:	0010      	movs	r0, r2
 8001a78:	f002 f886 	bl	8003b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT2_Pin;
 8001a7c:	193b      	adds	r3, r7, r4
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a82:	193b      	adds	r3, r7, r4
 8001a84:	2288      	movs	r2, #136	@ 0x88
 8001a86:	0352      	lsls	r2, r2, #13
 8001a88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	193b      	adds	r3, r7, r4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IMU_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a90:	193a      	adds	r2, r7, r4
 8001a92:	23a0      	movs	r3, #160	@ 0xa0
 8001a94:	05db      	lsls	r3, r3, #23
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f002 f875 	bl	8003b88 <HAL_GPIO_Init>


  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 8001a9e:	193b      	adds	r3, r7, r4
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001aa4:	193b      	adds	r3, r7, r4
 8001aa6:	2284      	movs	r2, #132	@ 0x84
 8001aa8:	0392      	lsls	r2, r2, #14
 8001aaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	193a      	adds	r2, r7, r4
 8001ab4:	23a0      	movs	r3, #160	@ 0xa0
 8001ab6:	05db      	lsls	r3, r3, #23
 8001ab8:	0011      	movs	r1, r2
 8001aba:	0018      	movs	r0, r3
 8001abc:	f002 f864 	bl	8003b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : Vcom_Sel_Pin XRST_Pin ENBS_Pin SI7_Pin
                           SI6_Pin SI5_Pin SI4_Pin DBG_SWO_Pin
                           ENBG_Pin */
  GPIO_InitStruct.Pin = Vcom_Sel_Pin|XRST_Pin|ENBS_Pin|SI7_Pin
 8001ac0:	193b      	adds	r3, r7, r4
 8001ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8001b6c <MX_GPIO_Init+0x1a8>)
 8001ac4:	601a      	str	r2, [r3, #0]
                          |SI6_Pin|SI5_Pin|SI4_Pin|DBG_SWO_Pin
                          |ENBG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	193b      	adds	r3, r7, r4
 8001ac8:	2201      	movs	r2, #1
 8001aca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	193b      	adds	r3, r7, r4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	193b      	adds	r3, r7, r4
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad8:	193b      	adds	r3, r7, r4
 8001ada:	4a25      	ldr	r2, [pc, #148]	@ (8001b70 <MX_GPIO_Init+0x1ac>)
 8001adc:	0019      	movs	r1, r3
 8001ade:	0010      	movs	r0, r2
 8001ae0:	f002 f852 	bl	8003b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_SCLK_Pin */
  GPIO_InitStruct.Pin = DISP_SCLK_Pin;
 8001ae4:	0021      	movs	r1, r4
 8001ae6:	187b      	adds	r3, r7, r1
 8001ae8:	2280      	movs	r2, #128	@ 0x80
 8001aea:	0052      	lsls	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	000c      	movs	r4, r1
 8001af0:	193b      	adds	r3, r7, r4
 8001af2:	2202      	movs	r2, #2
 8001af4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	193b      	adds	r3, r7, r4
 8001af8:	2200      	movs	r2, #0
 8001afa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	193b      	adds	r3, r7, r4
 8001afe:	2200      	movs	r2, #0
 8001b00:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_SWD;
 8001b02:	193b      	adds	r3, r7, r4
 8001b04:	2200      	movs	r2, #0
 8001b06:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(DISP_SCLK_GPIO_Port, &GPIO_InitStruct);
 8001b08:	193a      	adds	r2, r7, r4
 8001b0a:	23a0      	movs	r3, #160	@ 0xa0
 8001b0c:	05db      	lsls	r3, r3, #23
 8001b0e:	0011      	movs	r1, r2
 8001b10:	0018      	movs	r0, r3
 8001b12:	f002 f839 	bl	8003b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : SI3_Pin SI2_Pin SI1_Pin SI0_Pin
                           DEN_Pin */
  GPIO_InitStruct.Pin = SI3_Pin|SI2_Pin|SI1_Pin|SI0_Pin
 8001b16:	0021      	movs	r1, r4
 8001b18:	187b      	adds	r3, r7, r1
 8001b1a:	229e      	movs	r2, #158	@ 0x9e
 8001b1c:	0212      	lsls	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
                          |DEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	187b      	adds	r3, r7, r1
 8001b22:	2201      	movs	r2, #1
 8001b24:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	187b      	adds	r3, r7, r1
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	187b      	adds	r3, r7, r1
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	187a      	adds	r2, r7, r1
 8001b34:	23a0      	movs	r3, #160	@ 0xa0
 8001b36:	05db      	lsls	r3, r3, #23
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f002 f824 	bl	8003b88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2100      	movs	r1, #0
 8001b44:	2005      	movs	r0, #5
 8001b46:	f001 fd25 	bl	8003594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001b4a:	2005      	movs	r0, #5
 8001b4c:	f001 fd37 	bl	80035be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	2006      	movs	r0, #6
 8001b56:	f001 fd1d 	bl	8003594 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001b5a:	2006      	movs	r0, #6
 8001b5c:	f001 fd2f 	bl	80035be <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b60:	46c0      	nop			@ (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b009      	add	sp, #36	@ 0x24
 8001b66:	bd90      	pop	{r4, r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	0000fc1a 	.word	0x0000fc1a
 8001b70:	50000400 	.word	0x50000400
 8001b74:	50001400 	.word	0x50001400

08001b78 <initJobQueue>:

/* USER CODE BEGIN 4 */
/* ============== JOB QUEUE ============== */
void initJobQueue(volatile JobQueue *q) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
    q->front = 0;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	641a      	str	r2, [r3, #64]	@ 0x40
    q->rear = -1;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4252      	negs	r2, r2
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    q->count = 0;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <isJobsEmpty>:

int isJobsEmpty(volatile JobQueue *q) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
    return q->count == 0;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba8:	425a      	negs	r2, r3
 8001baa:	4153      	adcs	r3, r2
 8001bac:	b2db      	uxtb	r3, r3
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b002      	add	sp, #8
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <isJobsFull>:

int isJobsFull(volatile JobQueue *q) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
    return q->count == QUEUE_SIZE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bc2:	3b10      	subs	r3, #16
 8001bc4:	425a      	negs	r2, r3
 8001bc6:	4153      	adcs	r3, r2
 8001bc8:	b2db      	uxtb	r3, r3
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b002      	add	sp, #8
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <enqueueJob>:

int enqueueJob(volatile JobQueue *q, int value){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
	if (isJobsFull(q)) {
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7ff ffe8 	bl	8001bb6 <isJobsFull>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d001      	beq.n	8001bee <enqueueJob+0x1a>
        // printf("Queue is full! Cannot enqueue %d\n", value);
        return 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e019      	b.n	8001c22 <enqueueJob+0x4e>
    }
    
    q->rear = (q->rear + 1) % QUEUE_SIZE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <enqueueJob+0x58>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d504      	bpl.n	8001c04 <enqueueJob+0x30>
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	4252      	negs	r2, r2
 8001c00:	4313      	orrs	r3, r2
 8001c02:	3301      	adds	r3, #1
 8001c04:	001a      	movs	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	645a      	str	r2, [r3, #68]	@ 0x44
    q->data[q->rear] = value;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	0092      	lsls	r2, r2, #2
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	50d1      	str	r1, [r2, r3]
    q->count++;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	649a      	str	r2, [r3, #72]	@ 0x48
    
    return 1;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b002      	add	sp, #8
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	8000000f 	.word	0x8000000f

08001c30 <dequeueJob>:

int dequeueJob(volatile JobQueue *q, int *value){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
	if (isJobsEmpty(q)) {
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff ffad 	bl	8001b9c <isJobsEmpty>
 8001c42:	1e03      	subs	r3, r0, #0
 8001c44:	d001      	beq.n	8001c4a <dequeueJob+0x1a>
        // printf("Queue is empty! Cannot dequeue\n");
        return 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	e01a      	b.n	8001c80 <dequeueJob+0x50>
    }
    
    *value = q->data[q->front];
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	58d2      	ldr	r2, [r2, r3]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	601a      	str	r2, [r3, #0]
    q->front = (q->front + 1) % QUEUE_SIZE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <dequeueJob+0x58>)
 8001c60:	4013      	ands	r3, r2
 8001c62:	d504      	bpl.n	8001c6e <dequeueJob+0x3e>
 8001c64:	3b01      	subs	r3, #1
 8001c66:	2210      	movs	r2, #16
 8001c68:	4252      	negs	r2, r2
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	001a      	movs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	641a      	str	r2, [r3, #64]	@ 0x40
    q->count--;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c78:	1e5a      	subs	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	649a      	str	r2, [r3, #72]	@ 0x48
    
    return 1;
 8001c7e:	2301      	movs	r3, #1
}
 8001c80:	0018      	movs	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b002      	add	sp, #8
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	8000000f 	.word	0x8000000f

08001c8c <startJob>:

// Start DMA read
static void startJob(int job)
{
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b089      	sub	sp, #36	@ 0x24
 8001c90:	af04      	add	r7, sp, #16
 8001c92:	6078      	str	r0, [r7, #4]
	lsm6dsr_func_cfg_access_t func_cfg_access = {0};
 8001c94:	230c      	movs	r3, #12
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
	switch (job) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d100      	bne.n	8001ca4 <startJob+0x18>
 8001ca2:	e070      	b.n	8001d86 <startJob+0xfa>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	dd00      	ble.n	8001cac <startJob+0x20>
 8001caa:	e090      	b.n	8001dce <startJob+0x142>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <startJob+0x2e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d035      	beq.n	8001d24 <startJob+0x98>
			DMArunning = 1;
			TickDMAflag = 1;
			HAL_I2C_Mem_Read_DMA(&hi2c3, MAX31331_I2C_ADD, MAX31331_SECONDS_1_128, I2C_MEMADD_SIZE_8BIT, s_rtc_rx_buf, 8); // Read sec_128 to year in one go
			break;
		default:
			break;		
 8001cb8:	e089      	b.n	8001dce <startJob+0x142>
			if (stepsInQueue) stepsInQueue--;
 8001cba:	4b49      	ldr	r3, [pc, #292]	@ (8001de0 <startJob+0x154>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <startJob+0x46>
 8001cc4:	4b46      	ldr	r3, [pc, #280]	@ (8001de0 <startJob+0x154>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	4b44      	ldr	r3, [pc, #272]	@ (8001de0 <startJob+0x154>)
 8001cd0:	701a      	strb	r2, [r3, #0]
			func_cfg_access.reg_access = LSM6DSR_EMBEDDED_FUNC_BANK; // Enable standard register bank
 8001cd2:	240c      	movs	r4, #12
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	781a      	ldrb	r2, [r3, #0]
 8001cd8:	213f      	movs	r1, #63	@ 0x3f
 8001cda:	400a      	ands	r2, r1
 8001cdc:	1c11      	adds	r1, r2, #0
 8001cde:	2280      	movs	r2, #128	@ 0x80
 8001ce0:	4252      	negs	r2, r2
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	701a      	strb	r2, [r3, #0]
			if (!HAL_I2C_Mem_Write(&hi2c3, LSM6DSR_I2C_ADD_L, LSM6DSR_FUNC_CFG_ACCESS, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&func_cfg_access, 1, 5)) {
 8001ce6:	483f      	ldr	r0, [pc, #252]	@ (8001de4 <startJob+0x158>)
 8001ce8:	2305      	movs	r3, #5
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	2301      	movs	r3, #1
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	193b      	adds	r3, r7, r4
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	21d4      	movs	r1, #212	@ 0xd4
 8001cfa:	f002 fa77 	bl	80041ec <HAL_I2C_Mem_Write>
 8001cfe:	1e03      	subs	r3, r0, #0
 8001d00:	d167      	bne.n	8001dd2 <startJob+0x146>
				DMArunning = 1;
 8001d02:	4b39      	ldr	r3, [pc, #228]	@ (8001de8 <startJob+0x15c>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
				StepDMAflag = 1;
 8001d08:	4b38      	ldr	r3, [pc, #224]	@ (8001dec <startJob+0x160>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Read_DMA(&hi2c3, LSM6DSR_I2C_ADD_L, LSM6DSR_STEP_COUNTER_L, I2C_MEMADD_SIZE_8BIT, s_step_rx_buf, 2);
 8001d0e:	4835      	ldr	r0, [pc, #212]	@ (8001de4 <startJob+0x158>)
 8001d10:	2302      	movs	r3, #2
 8001d12:	9301      	str	r3, [sp, #4]
 8001d14:	4b36      	ldr	r3, [pc, #216]	@ (8001df0 <startJob+0x164>)
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	2301      	movs	r3, #1
 8001d1a:	2262      	movs	r2, #98	@ 0x62
 8001d1c:	21d4      	movs	r1, #212	@ 0xd4
 8001d1e:	f002 fcc7 	bl	80046b0 <HAL_I2C_Mem_Read_DMA>
			break;
 8001d22:	e056      	b.n	8001dd2 <startJob+0x146>
			if (tapsInQueue) tapsInQueue--;
 8001d24:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <startJob+0x168>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d006      	beq.n	8001d3c <startJob+0xb0>
 8001d2e:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <startJob+0x168>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b2da      	uxtb	r2, r3
 8001d38:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <startJob+0x168>)
 8001d3a:	701a      	strb	r2, [r3, #0]
			func_cfg_access.reg_access = LSM6DSR_USER_BANK; // Enable standard register bank
 8001d3c:	240c      	movs	r4, #12
 8001d3e:	193b      	adds	r3, r7, r4
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	213f      	movs	r1, #63	@ 0x3f
 8001d44:	400a      	ands	r2, r1
 8001d46:	701a      	strb	r2, [r3, #0]
			if(!HAL_I2C_Mem_Write(&hi2c3, LSM6DSR_I2C_ADD_L, LSM6DSR_FUNC_CFG_ACCESS, I2C_MEMADD_SIZE_8BIT, (uint8_t *)&func_cfg_access, 1, 5)) {
 8001d48:	4826      	ldr	r0, [pc, #152]	@ (8001de4 <startJob+0x158>)
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	9302      	str	r3, [sp, #8]
 8001d4e:	2301      	movs	r3, #1
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	193b      	adds	r3, r7, r4
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2301      	movs	r3, #1
 8001d58:	2201      	movs	r2, #1
 8001d5a:	21d4      	movs	r1, #212	@ 0xd4
 8001d5c:	f002 fa46 	bl	80041ec <HAL_I2C_Mem_Write>
 8001d60:	1e03      	subs	r3, r0, #0
 8001d62:	d138      	bne.n	8001dd6 <startJob+0x14a>
				DMArunning = 1;
 8001d64:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <startJob+0x15c>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
				TapDMAflag = 1;
 8001d6a:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <startJob+0x16c>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Mem_Read_DMA(&hi2c3, LSM6DSR_I2C_ADD_L, LSM6DSR_TAP_SRC, I2C_MEMADD_SIZE_8BIT, s_tap_rx_buf, 1);
 8001d70:	481c      	ldr	r0, [pc, #112]	@ (8001de4 <startJob+0x158>)
 8001d72:	2301      	movs	r3, #1
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <startJob+0x170>)
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	221c      	movs	r2, #28
 8001d7e:	21d4      	movs	r1, #212	@ 0xd4
 8001d80:	f002 fc96 	bl	80046b0 <HAL_I2C_Mem_Read_DMA>
			break;
 8001d84:	e027      	b.n	8001dd6 <startJob+0x14a>
			if (timeInQueue) timeInQueue--;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <startJob+0x174>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <startJob+0x112>
 8001d90:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <startJob+0x174>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	3b01      	subs	r3, #1
 8001d98:	b2da      	uxtb	r2, r3
 8001d9a:	4b19      	ldr	r3, [pc, #100]	@ (8001e00 <startJob+0x174>)
 8001d9c:	701a      	strb	r2, [r3, #0]
			max31331_get_status(&s_max_ctx, &status); // Clears interrupt
 8001d9e:	230b      	movs	r3, #11
 8001da0:	18fa      	adds	r2, r7, r3
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <startJob+0x178>)
 8001da4:	0011      	movs	r1, r2
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 fd1a 	bl	80027e0 <max31331_get_status>
			DMArunning = 1;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <startJob+0x15c>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	701a      	strb	r2, [r3, #0]
			TickDMAflag = 1;
 8001db2:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <startJob+0x17c>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Read_DMA(&hi2c3, MAX31331_I2C_ADD, MAX31331_SECONDS_1_128, I2C_MEMADD_SIZE_8BIT, s_rtc_rx_buf, 8); // Read sec_128 to year in one go
 8001db8:	480a      	ldr	r0, [pc, #40]	@ (8001de4 <startJob+0x158>)
 8001dba:	2308      	movs	r3, #8
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <startJob+0x180>)
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	21d0      	movs	r1, #208	@ 0xd0
 8001dc8:	f002 fc72 	bl	80046b0 <HAL_I2C_Mem_Read_DMA>
			break;
 8001dcc:	e004      	b.n	8001dd8 <startJob+0x14c>
			break;		
 8001dce:	46c0      	nop			@ (mov r8, r8)
 8001dd0:	e002      	b.n	8001dd8 <startJob+0x14c>
			break;
 8001dd2:	46c0      	nop			@ (mov r8, r8)
 8001dd4:	e000      	b.n	8001dd8 <startJob+0x14c>
			break;
 8001dd6:	46c0      	nop			@ (mov r8, r8)
		// DMA started, we can go to sleep while we wait for I2C callback
	}
}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b005      	add	sp, #20
 8001dde:	bd90      	pop	{r4, r7, pc}
 8001de0:	20000191 	.word	0x20000191
 8001de4:	2000003c 	.word	0x2000003c
 8001de8:	20000193 	.word	0x20000193
 8001dec:	20000198 	.word	0x20000198
 8001df0:	2000019c 	.word	0x2000019c
 8001df4:	20000190 	.word	0x20000190
 8001df8:	20000196 	.word	0x20000196
 8001dfc:	200001a0 	.word	0x200001a0
 8001e00:	20000192 	.word	0x20000192
 8001e04:	20000130 	.word	0x20000130
 8001e08:	20000194 	.word	0x20000194
 8001e0c:	200001a8 	.word	0x200001a8

08001e10 <processJob>:

// Process DMA data
static void processJob(void) {
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
	if (TickRXcomp) { // Update Time
 8001e16:	4b8c      	ldr	r3, [pc, #560]	@ (8002048 <processJob+0x238>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d100      	bne.n	8001e22 <processJob+0x12>
 8001e20:	e0d5      	b.n	8001fce <processJob+0x1be>
		uint8_t s128 = s_rtc_rx_buf[0]; // Unused for now
 8001e22:	230f      	movs	r3, #15
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	4a89      	ldr	r2, [pc, #548]	@ (800204c <processJob+0x23c>)
 8001e28:	7812      	ldrb	r2, [r2, #0]
 8001e2a:	701a      	strb	r2, [r3, #0]
		uint8_t s  	 = bin2dec_bcd(s_rtc_rx_buf[1] & MAX31331_SECONDS_MSK);
 8001e2c:	4b87      	ldr	r3, [pc, #540]	@ (800204c <processJob+0x23c>)
 8001e2e:	785b      	ldrb	r3, [r3, #1]
 8001e30:	227f      	movs	r2, #127	@ 0x7f
 8001e32:	4013      	ands	r3, r2
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	220e      	movs	r2, #14
 8001e38:	18bc      	adds	r4, r7, r2
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 fc96 	bl	800276c <bin2dec_bcd>
 8001e40:	0003      	movs	r3, r0
 8001e42:	7023      	strb	r3, [r4, #0]
		uint8_t m  	 = bin2dec_bcd(s_rtc_rx_buf[2] & MAX31331_MINUTES_MSK);
 8001e44:	4b81      	ldr	r3, [pc, #516]	@ (800204c <processJob+0x23c>)
 8001e46:	789b      	ldrb	r3, [r3, #2]
 8001e48:	227f      	movs	r2, #127	@ 0x7f
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	220d      	movs	r2, #13
 8001e50:	18bc      	adds	r4, r7, r2
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 fc8a 	bl	800276c <bin2dec_bcd>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	7023      	strb	r3, [r4, #0]
		uint8_t h  	 = s_rtc_rx_buf[3];
 8001e5c:	200c      	movs	r0, #12
 8001e5e:	183b      	adds	r3, r7, r0
 8001e60:	4a7a      	ldr	r2, [pc, #488]	@ (800204c <processJob+0x23c>)
 8001e62:	78d2      	ldrb	r2, [r2, #3]
 8001e64:	701a      	strb	r2, [r3, #0]

		uint8_t format  = (h & MAX31331_TS_F24_12_MSK) >> MAX31331_TS_F24_12_POS;
 8001e66:	183b      	adds	r3, r7, r0
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	240b      	movs	r4, #11
 8001e70:	193b      	adds	r3, r7, r4
 8001e72:	2101      	movs	r1, #1
 8001e74:	400a      	ands	r2, r1
 8001e76:	701a      	strb	r2, [r3, #0]
		
		int hour;

		if (format == HOUR24) {
 8001e78:	193b      	adds	r3, r7, r4
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d11c      	bne.n	8001eba <processJob+0xaa>
			hour = ((h & MAX31331_HOURS_HOUR_MSK) 		>> MAX31331_HOURS_HOUR_POS) + 
 8001e80:	183b      	adds	r3, r7, r0
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	220f      	movs	r2, #15
 8001e86:	4013      	ands	r3, r2
 8001e88:	0019      	movs	r1, r3
				   (((h & MAX31331_HOURS_HR10_MSK) 		>> MAX31331_HOURS_HR10_POS) * 10) +
				   (((h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS) * 20);
 8001e8a:	0004      	movs	r4, r0
 8001e8c:	183b      	adds	r3, r7, r0
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	2201      	movs	r2, #1
 8001e94:	401a      	ands	r2, r3
 8001e96:	0013      	movs	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	189b      	adds	r3, r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	0018      	movs	r0, r3
				   (((h & MAX31331_HOURS_HR10_MSK) 		>> MAX31331_HOURS_HR10_POS) * 10) +
 8001ea0:	193b      	adds	r3, r7, r4
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	091b      	lsrs	r3, r3, #4
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	0013      	movs	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	189b      	adds	r3, r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	18c3      	adds	r3, r0, r3
 8001eb4:	18cb      	adds	r3, r1, r3
			hour = ((h & MAX31331_HOURS_HOUR_MSK) 		>> MAX31331_HOURS_HOUR_POS) + 
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e037      	b.n	8001f2a <processJob+0x11a>
		} else {
			uint8_t h12 = ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8001eba:	200c      	movs	r0, #12
 8001ebc:	183b      	adds	r3, r7, r0
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	091b      	lsrs	r3, r3, #4
						+ ((h & MAX31331_HOURS_HOUR_MSK) >> MAX31331_HOURS_HOUR_POS);
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	1c1a      	adds	r2, r3, #0
 8001ecc:	0092      	lsls	r2, r2, #2
 8001ece:	18d3      	adds	r3, r2, r3
 8001ed0:	18db      	adds	r3, r3, r3
 8001ed2:	b2d9      	uxtb	r1, r3
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	220f      	movs	r2, #15
 8001eda:	4013      	ands	r3, r2
 8001edc:	b2da      	uxtb	r2, r3
			uint8_t h12 = ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8001ede:	240a      	movs	r4, #10
 8001ee0:	193b      	adds	r3, r7, r4
 8001ee2:	188a      	adds	r2, r1, r2
 8001ee4:	701a      	strb	r2, [r3, #0]
			uint8_t am_pm = (h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS;
 8001ee6:	183b      	adds	r3, r7, r0
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	095b      	lsrs	r3, r3, #5
 8001eec:	b2da      	uxtb	r2, r3
 8001eee:	2009      	movs	r0, #9
 8001ef0:	183b      	adds	r3, r7, r0
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	701a      	strb	r2, [r3, #0]
			if (am_pm == AM) {          // AM
 8001ef8:	183b      	adds	r3, r7, r0
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <processJob+0x104>
				hour = (h12 == 12) ? 0 : h12;
 8001f00:	193b      	adds	r3, r7, r4
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b0c      	cmp	r3, #12
 8001f06:	d002      	beq.n	8001f0e <processJob+0xfe>
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	e000      	b.n	8001f10 <processJob+0x100>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	e00a      	b.n	8001f2a <processJob+0x11a>
			} else {                    // PM
				hour = (h12 == 12) ? 12 : h12 + 12;
 8001f14:	220a      	movs	r2, #10
 8001f16:	18bb      	adds	r3, r7, r2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b0c      	cmp	r3, #12
 8001f1c:	d003      	beq.n	8001f26 <processJob+0x116>
 8001f1e:	18bb      	adds	r3, r7, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	330c      	adds	r3, #12
 8001f24:	e000      	b.n	8001f28 <processJob+0x118>
 8001f26:	230c      	movs	r3, #12
 8001f28:	617b      	str	r3, [r7, #20]
			}
		}

		uint8_t dy 	 = s_rtc_rx_buf[4] & MAX31331_DAY_MSK;
 8001f2a:	4b48      	ldr	r3, [pc, #288]	@ (800204c <processJob+0x23c>)
 8001f2c:	791a      	ldrb	r2, [r3, #4]
 8001f2e:	2508      	movs	r5, #8
 8001f30:	197b      	adds	r3, r7, r5
 8001f32:	2107      	movs	r1, #7
 8001f34:	400a      	ands	r2, r1
 8001f36:	701a      	strb	r2, [r3, #0]
		uint8_t dt 	 = bin2dec_bcd(s_rtc_rx_buf[5] & MAX31331_DATE_MSK);
 8001f38:	4b44      	ldr	r3, [pc, #272]	@ (800204c <processJob+0x23c>)
 8001f3a:	795b      	ldrb	r3, [r3, #5]
 8001f3c:	223f      	movs	r2, #63	@ 0x3f
 8001f3e:	4013      	ands	r3, r2
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	1dfc      	adds	r4, r7, #7
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 fc11 	bl	800276c <bin2dec_bcd>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	7023      	strb	r3, [r4, #0]
		uint8_t mn 	 = bin2dec_bcd(s_rtc_rx_buf[6] & MAX31331_MONTH_MSK);
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800204c <processJob+0x23c>)
 8001f50:	799b      	ldrb	r3, [r3, #6]
 8001f52:	220f      	movs	r2, #15
 8001f54:	4013      	ands	r3, r2
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	1dbc      	adds	r4, r7, #6
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f000 fc06 	bl	800276c <bin2dec_bcd>
 8001f60:	0003      	movs	r3, r0
 8001f62:	7023      	strb	r3, [r4, #0]
		uint8_t yr 	 = bin2dec_bcd(s_rtc_rx_buf[7] & MAX31331_YEAR_MSK);
 8001f64:	4b39      	ldr	r3, [pc, #228]	@ (800204c <processJob+0x23c>)
 8001f66:	79db      	ldrb	r3, [r3, #7]
 8001f68:	1d7c      	adds	r4, r7, #5
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f000 fbfe 	bl	800276c <bin2dec_bcd>
 8001f70:	0003      	movs	r3, r0
 8001f72:	7023      	strb	r3, [r4, #0]

		g_RTC_time[0] = s128;
 8001f74:	4b36      	ldr	r3, [pc, #216]	@ (8002050 <processJob+0x240>)
 8001f76:	220f      	movs	r2, #15
 8001f78:	18ba      	adds	r2, r7, r2
 8001f7a:	7812      	ldrb	r2, [r2, #0]
 8001f7c:	701a      	strb	r2, [r3, #0]
		g_RTC_time[1] = s;
 8001f7e:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <processJob+0x240>)
 8001f80:	220e      	movs	r2, #14
 8001f82:	18ba      	adds	r2, r7, r2
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	705a      	strb	r2, [r3, #1]
		g_RTC_time[2] = m;
 8001f88:	4b31      	ldr	r3, [pc, #196]	@ (8002050 <processJob+0x240>)
 8001f8a:	220d      	movs	r2, #13
 8001f8c:	18ba      	adds	r2, r7, r2
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	709a      	strb	r2, [r3, #2]
		g_RTC_time[3] = hour;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b2e      	ldr	r3, [pc, #184]	@ (8002050 <processJob+0x240>)
 8001f98:	70da      	strb	r2, [r3, #3]
		g_RTC_time[4] = dy;
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <processJob+0x240>)
 8001f9c:	197a      	adds	r2, r7, r5
 8001f9e:	7812      	ldrb	r2, [r2, #0]
 8001fa0:	711a      	strb	r2, [r3, #4]
		g_RTC_time[5] = dt;
 8001fa2:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <processJob+0x240>)
 8001fa4:	1dfa      	adds	r2, r7, #7
 8001fa6:	7812      	ldrb	r2, [r2, #0]
 8001fa8:	715a      	strb	r2, [r3, #5]
		g_RTC_time[6] = mn;
 8001faa:	4b29      	ldr	r3, [pc, #164]	@ (8002050 <processJob+0x240>)
 8001fac:	1dba      	adds	r2, r7, #6
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	719a      	strb	r2, [r3, #6]
		g_RTC_time[7] = yr;
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <processJob+0x240>)
 8001fb4:	1d7a      	adds	r2, r7, #5
 8001fb6:	7812      	ldrb	r2, [r2, #0]
 8001fb8:	71da      	strb	r2, [r3, #7]
		uint8_t status;
		max31331_get_status(&s_max_ctx, &status); // Clears interrupt
 8001fba:	1d3a      	adds	r2, r7, #4
 8001fbc:	4b25      	ldr	r3, [pc, #148]	@ (8002054 <processJob+0x244>)
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f000 fc0d 	bl	80027e0 <max31331_get_status>

		TickRXcomp = 0;
 8001fc6:	4b20      	ldr	r3, [pc, #128]	@ (8002048 <processJob+0x238>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
		TapRXcomp = 0;
	} else if (StepRXcomp) { // Update Step Count
		g_step_count = (uint16_t)s_step_rx_buf[1] << 8 | (uint16_t)s_step_rx_buf[0];
		StepRXcomp = 0;
	}
}
 8001fcc:	e037      	b.n	800203e <processJob+0x22e>
	} else if (TapRXcomp) { // Handle Tap/DoubleTap
 8001fce:	4b22      	ldr	r3, [pc, #136]	@ (8002058 <processJob+0x248>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01e      	beq.n	8002016 <processJob+0x206>
		lsm6dsr_tap_src_t *tap_data = (lsm6dsr_tap_src_t *)s_tap_rx_buf;
 8001fd8:	4b20      	ldr	r3, [pc, #128]	@ (800205c <processJob+0x24c>)
 8001fda:	613b      	str	r3, [r7, #16]
		if (tap_data->double_tap) {
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2210      	movs	r2, #16
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <processJob+0x1e2>
			g_num_taps = 2;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <processJob+0x250>)
 8001fec:	2202      	movs	r2, #2
 8001fee:	801a      	strh	r2, [r3, #0]
 8001ff0:	e00d      	b.n	800200e <processJob+0x1fe>
		} else if (tap_data->single_tap) {
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <processJob+0x1f8>
			g_num_taps = 1;
 8002000:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <processJob+0x250>)
 8002002:	2201      	movs	r2, #1
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	e002      	b.n	800200e <processJob+0x1fe>
			g_num_taps = 0;
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <processJob+0x250>)
 800200a:	2200      	movs	r2, #0
 800200c:	801a      	strh	r2, [r3, #0]
		TapRXcomp = 0;
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <processJob+0x248>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
}
 8002014:	e013      	b.n	800203e <processJob+0x22e>
	} else if (StepRXcomp) { // Update Step Count
 8002016:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <processJob+0x254>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <processJob+0x22e>
		g_step_count = (uint16_t)s_step_rx_buf[1] << 8 | (uint16_t)s_step_rx_buf[0];
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <processJob+0x258>)
 8002022:	785b      	ldrb	r3, [r3, #1]
 8002024:	021b      	lsls	r3, r3, #8
 8002026:	b21a      	sxth	r2, r3
 8002028:	4b0f      	ldr	r3, [pc, #60]	@ (8002068 <processJob+0x258>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	b21b      	sxth	r3, r3
 800202e:	4313      	orrs	r3, r2
 8002030:	b21b      	sxth	r3, r3
 8002032:	b29a      	uxth	r2, r3
 8002034:	4b0d      	ldr	r3, [pc, #52]	@ (800206c <processJob+0x25c>)
 8002036:	801a      	strh	r2, [r3, #0]
		StepRXcomp = 0;
 8002038:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <processJob+0x254>)
 800203a:	2200      	movs	r2, #0
 800203c:	701a      	strb	r2, [r3, #0]
}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b006      	add	sp, #24
 8002044:	bdb0      	pop	{r4, r5, r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	20000195 	.word	0x20000195
 800204c:	200001a8 	.word	0x200001a8
 8002050:	200001b0 	.word	0x200001b0
 8002054:	20000130 	.word	0x20000130
 8002058:	20000197 	.word	0x20000197
 800205c:	200001a0 	.word	0x200001a0
 8002060:	200001a4 	.word	0x200001a4
 8002064:	20000199 	.word	0x20000199
 8002068:	2000019c 	.word	0x2000019c
 800206c:	200001a2 	.word	0x200001a2

08002070 <clear_I2C_bus>:

/* ============== I2C Device Initialization ============== */
static void clear_I2C_bus(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002076:	003b      	movs	r3, r7
 8002078:	0018      	movs	r0, r3
 800207a:	2314      	movs	r3, #20
 800207c:	001a      	movs	r2, r3
 800207e:	2100      	movs	r1, #0
 8002080:	f005 fe2a 	bl	8007cd8 <memset>
	/* Configure SCL and SDA as Open-Drain GPIO outputs (we assume external pull-ups present) */
    GPIO_InitStruct.Pin = I2C3_SCL_PIN | I2C3_SDA_PIN;
 8002084:	003b      	movs	r3, r7
 8002086:	22c0      	movs	r2, #192	@ 0xc0
 8002088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800208a:	003b      	movs	r3, r7
 800208c:	2211      	movs	r2, #17
 800208e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	003b      	movs	r3, r7
 8002092:	2200      	movs	r2, #0
 8002094:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002096:	003b      	movs	r3, r7
 8002098:	2202      	movs	r2, #2
 800209a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(I2C3_PORT, &GPIO_InitStruct);
 800209c:	003a      	movs	r2, r7
 800209e:	23a0      	movs	r3, #160	@ 0xa0
 80020a0:	05db      	lsls	r3, r3, #23
 80020a2:	0011      	movs	r1, r2
 80020a4:	0018      	movs	r0, r3
 80020a6:	f001 fd6f 	bl	8003b88 <HAL_GPIO_Init>

	/* Make sure SDA & SCL released high (external pull-ups will pull them high) */
    HAL_GPIO_WritePin(I2C3_PORT, I2C3_SDA_PIN, GPIO_PIN_SET);
 80020aa:	23a0      	movs	r3, #160	@ 0xa0
 80020ac:	05db      	lsls	r3, r3, #23
 80020ae:	2201      	movs	r2, #1
 80020b0:	2140      	movs	r1, #64	@ 0x40
 80020b2:	0018      	movs	r0, r3
 80020b4:	f001 ffac 	bl	8004010 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(I2C3_PORT, I2C3_SCL_PIN, GPIO_PIN_SET);
 80020b8:	23a0      	movs	r3, #160	@ 0xa0
 80020ba:	05db      	lsls	r3, r3, #23
 80020bc:	2201      	movs	r2, #1
 80020be:	2180      	movs	r1, #128	@ 0x80
 80020c0:	0018      	movs	r0, r3
 80020c2:	f001 ffa5 	bl	8004010 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80020c6:	2001      	movs	r0, #1
 80020c8:	f001 f996 	bl	80033f8 <HAL_Delay>

	for (int i = 0; i < 9; i++)
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	e016      	b.n	8002100 <clear_I2C_bus+0x90>
	{
		HAL_GPIO_WritePin(I2C3_PORT, I2C3_SCL_PIN, GPIO_PIN_RESET);
 80020d2:	23a0      	movs	r3, #160	@ 0xa0
 80020d4:	05db      	lsls	r3, r3, #23
 80020d6:	2200      	movs	r2, #0
 80020d8:	2180      	movs	r1, #128	@ 0x80
 80020da:	0018      	movs	r0, r3
 80020dc:	f001 ff98 	bl	8004010 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80020e0:	200a      	movs	r0, #10
 80020e2:	f001 f989 	bl	80033f8 <HAL_Delay>
		HAL_GPIO_WritePin(I2C3_PORT, I2C3_SCL_PIN, GPIO_PIN_SET);
 80020e6:	23a0      	movs	r3, #160	@ 0xa0
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	2201      	movs	r2, #1
 80020ec:	2180      	movs	r1, #128	@ 0x80
 80020ee:	0018      	movs	r0, r3
 80020f0:	f001 ff8e 	bl	8004010 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 80020f4:	200a      	movs	r0, #10
 80020f6:	f001 f97f 	bl	80033f8 <HAL_Delay>
	for (int i = 0; i < 9; i++)
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	2b08      	cmp	r3, #8
 8002104:	dde5      	ble.n	80020d2 <clear_I2C_bus+0x62>
	}

	HAL_GPIO_DeInit(I2C3_PORT, I2C3_SCL_PIN | I2C3_SDA_PIN); // Return pins to default state
 8002106:	23a0      	movs	r3, #160	@ 0xa0
 8002108:	05db      	lsls	r3, r3, #23
 800210a:	21c0      	movs	r1, #192	@ 0xc0
 800210c:	0018      	movs	r0, r3
 800210e:	f001 fea7 	bl	8003e60 <HAL_GPIO_DeInit>
}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	46bd      	mov	sp, r7
 8002116:	b006      	add	sp, #24
 8002118:	bd80      	pop	{r7, pc}
	...

0800211c <LSM6DSR_Init>:
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
	}
}

static void LSM6DSR_Init(void) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	uint8_t rst = 1;
 8002122:	1cfb      	adds	r3, r7, #3
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
	uint8_t who = 0;
 8002128:	1cbb      	adds	r3, r7, #2
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]

	// Platform initialization
	s_lsm_ctx.write_reg = platform_write;
 800212e:	4b3c      	ldr	r3, [pc, #240]	@ (8002220 <LSM6DSR_Init+0x104>)
 8002130:	4a3c      	ldr	r2, [pc, #240]	@ (8002224 <LSM6DSR_Init+0x108>)
 8002132:	601a      	str	r2, [r3, #0]
	s_lsm_ctx.read_reg  = platform_read;
 8002134:	4b3a      	ldr	r3, [pc, #232]	@ (8002220 <LSM6DSR_Init+0x104>)
 8002136:	4a3c      	ldr	r2, [pc, #240]	@ (8002228 <LSM6DSR_Init+0x10c>)
 8002138:	605a      	str	r2, [r3, #4]
	s_lsm_ctx.mdelay    = HAL_Delay;
 800213a:	4b39      	ldr	r3, [pc, #228]	@ (8002220 <LSM6DSR_Init+0x104>)
 800213c:	4a3b      	ldr	r2, [pc, #236]	@ (800222c <LSM6DSR_Init+0x110>)
 800213e:	609a      	str	r2, [r3, #8]
	s_lsm_ctx.handle    = &g_imu_bus;
 8002140:	4b37      	ldr	r3, [pc, #220]	@ (8002220 <LSM6DSR_Init+0x104>)
 8002142:	4a3b      	ldr	r2, [pc, #236]	@ (8002230 <LSM6DSR_Init+0x114>)
 8002144:	60da      	str	r2, [r3, #12]

	HAL_Delay(100); // Initial power-on delay
 8002146:	2064      	movs	r0, #100	@ 0x64
 8002148:	f001 f956 	bl	80033f8 <HAL_Delay>

	// Perform software reset with proper timing
	do {
		if (lsm6dsr_reset_set(&s_lsm_ctx, 1) != 0) {
 800214c:	4b34      	ldr	r3, [pc, #208]	@ (8002220 <LSM6DSR_Init+0x104>)
 800214e:	2101      	movs	r1, #1
 8002150:	0018      	movs	r0, r3
 8002152:	f7fe fda9 	bl	8000ca8 <lsm6dsr_reset_set>
 8002156:	1e03      	subs	r3, r0, #0
 8002158:	d001      	beq.n	800215e <LSM6DSR_Init+0x42>
			Error_Handler();
 800215a:	f000 faa5 	bl	80026a8 <Error_Handler>
		}
		HAL_Delay(50); // Extended delay for reset completion
 800215e:	2032      	movs	r0, #50	@ 0x32
 8002160:	f001 f94a 	bl	80033f8 <HAL_Delay>
	} while (lsm6dsr_reset_get(&s_lsm_ctx, &rst) != 0 || rst != 0);
 8002164:	1cfa      	adds	r2, r7, #3
 8002166:	4b2e      	ldr	r3, [pc, #184]	@ (8002220 <LSM6DSR_Init+0x104>)
 8002168:	0011      	movs	r1, r2
 800216a:	0018      	movs	r0, r3
 800216c:	f7fe fdcc 	bl	8000d08 <lsm6dsr_reset_get>
 8002170:	1e03      	subs	r3, r0, #0
 8002172:	d1eb      	bne.n	800214c <LSM6DSR_Init+0x30>
 8002174:	1cfb      	adds	r3, r7, #3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1e7      	bne.n	800214c <LSM6DSR_Init+0x30>

	// Verify device ID with retries
	for (int attempt = 0; attempt < 10; attempt++) {
 800217c:	2300      	movs	r3, #0
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	e011      	b.n	80021a6 <LSM6DSR_Init+0x8a>
		if (lsm6dsr_device_id_get(&s_lsm_ctx, &who) == 0 && who == LSM6DSR_ID) {
 8002182:	1cba      	adds	r2, r7, #2
 8002184:	4b26      	ldr	r3, [pc, #152]	@ (8002220 <LSM6DSR_Init+0x104>)
 8002186:	0011      	movs	r1, r2
 8002188:	0018      	movs	r0, r3
 800218a:	f7fe fd7b 	bl	8000c84 <lsm6dsr_device_id_get>
 800218e:	1e03      	subs	r3, r0, #0
 8002190:	d103      	bne.n	800219a <LSM6DSR_Init+0x7e>
 8002192:	1cbb      	adds	r3, r7, #2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b6b      	cmp	r3, #107	@ 0x6b
 8002198:	d009      	beq.n	80021ae <LSM6DSR_Init+0x92>
			break;
		}
		HAL_Delay(20);
 800219a:	2014      	movs	r0, #20
 800219c:	f001 f92c 	bl	80033f8 <HAL_Delay>
	for (int attempt = 0; attempt < 10; attempt++) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3301      	adds	r3, #1
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	ddea      	ble.n	8002182 <LSM6DSR_Init+0x66>
 80021ac:	e000      	b.n	80021b0 <LSM6DSR_Init+0x94>
			break;
 80021ae:	46c0      	nop			@ (mov r8, r8)
	}

	if (who != LSM6DSR_ID) {
 80021b0:	1cbb      	adds	r3, r7, #2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b6b      	cmp	r3, #107	@ 0x6b
 80021b6:	d001      	beq.n	80021bc <LSM6DSR_Init+0xa0>
		Error_Handler();
 80021b8:	f000 fa76 	bl	80026a8 <Error_Handler>
	}

	// Disable I3C interface
	if (lsm6dsr_i3c_disable_set(&s_lsm_ctx, LSM6DSR_I3C_DISABLE) != 0) {
 80021bc:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <LSM6DSR_Init+0x104>)
 80021be:	2180      	movs	r1, #128	@ 0x80
 80021c0:	0018      	movs	r0, r3
 80021c2:	f7fe fdbc 	bl	8000d3e <lsm6dsr_i3c_disable_set>
 80021c6:	1e03      	subs	r3, r0, #0
 80021c8:	d001      	beq.n	80021ce <LSM6DSR_Init+0xb2>
		Error_Handler();
 80021ca:	f000 fa6d 	bl	80026a8 <Error_Handler>
	}

	/* Disable I3C (Mode 1: IMU is I2C slave) */
	lsm6dsr_i3c_disable_set(&s_lsm_ctx, LSM6DSR_I3C_DISABLE);
 80021ce:	4b14      	ldr	r3, [pc, #80]	@ (8002220 <LSM6DSR_Init+0x104>)
 80021d0:	2180      	movs	r1, #128	@ 0x80
 80021d2:	0018      	movs	r0, r3
 80021d4:	f7fe fdb3 	bl	8000d3e <lsm6dsr_i3c_disable_set>

	/* Put gyroscope into power-down */
	lsm6dsr_gy_data_rate_set(&s_lsm_ctx, LSM6DSR_GY_ODR_OFF);
 80021d8:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <LSM6DSR_Init+0x104>)
 80021da:	2100      	movs	r1, #0
 80021dc:	0018      	movs	r0, r3
 80021de:	f7fe f9ec 	bl	80005ba <lsm6dsr_gy_data_rate_set>
	/* Gryo power mode should be irrelevant (set to normal for safe default) */
	lsm6dsr_gy_power_mode_set(&s_lsm_ctx, LSM6DSR_GY_NORMAL);
 80021e2:	4b0f      	ldr	r3, [pc, #60]	@ (8002220 <LSM6DSR_Init+0x104>)
 80021e4:	2101      	movs	r1, #1
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fe fb62 	bl	80008b0 <lsm6dsr_gy_power_mode_set>
	/* BDU: Blocks of registers can't be updated mid-read */
	lsm6dsr_block_data_update_set(&s_lsm_ctx, 1);
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <LSM6DSR_Init+0x104>)
 80021ee:	2101      	movs	r1, #1
 80021f0:	0018      	movs	r0, r3
 80021f2:	f7fe fb2d 	bl	8000850 <lsm6dsr_block_data_update_set>

	LSM6DSR_Init_Pedo_INT2();
 80021f6:	f000 f81d 	bl	8002234 <LSM6DSR_Init_Pedo_INT2>
	/* TAP detection overrides ODR to 416Hz, setting accel to high power mode */
	// LSM6DSR_Init_Tap_INT2();

	/* Configure pin mode/polarity */
	lsm6dsr_pin_mode_set(&s_lsm_ctx, LSM6DSR_PUSH_PULL);
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <LSM6DSR_Init+0x104>)
 80021fc:	2100      	movs	r1, #0
 80021fe:	0018      	movs	r0, r3
 8002200:	f7fe ffbd 	bl	800117e <lsm6dsr_pin_mode_set>
	lsm6dsr_pin_polarity_set(&s_lsm_ctx, LSM6DSR_ACTIVE_HIGH);
 8002204:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <LSM6DSR_Init+0x104>)
 8002206:	2100      	movs	r1, #0
 8002208:	0018      	movs	r0, r3
 800220a:	f7fe ffe8 	bl	80011de <lsm6dsr_pin_polarity_set>
	lsm6dsr_int_notification_set(&s_lsm_ctx, LSM6DSR_ALL_INT_PULSED);
 800220e:	4b04      	ldr	r3, [pc, #16]	@ (8002220 <LSM6DSR_Init+0x104>)
 8002210:	2100      	movs	r1, #0
 8002212:	0018      	movs	r0, r3
 8002214:	f7ff f813 	bl	800123e <lsm6dsr_int_notification_set>

}
 8002218:	46c0      	nop			@ (mov r8, r8)
 800221a:	46bd      	mov	sp, r7
 800221c:	b002      	add	sp, #8
 800221e:	bd80      	pop	{r7, pc}
 8002220:	2000011c 	.word	0x2000011c
 8002224:	080025f9 	.word	0x080025f9
 8002228:	08002651 	.word	0x08002651
 800222c:	080033f9 	.word	0x080033f9
 8002230:	20000000 	.word	0x20000000

08002234 <LSM6DSR_Init_Pedo_INT2>:

// Pedometer Config based on Application Note 5358
static void LSM6DSR_Init_Pedo_INT2(void) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
	/* Pedometer works at accelerometer 2g Full Scale (STMicroelectronics/lsm6dsr-pid) */
	lsm6dsr_xl_full_scale_set(&s_lsm_ctx, LSM6DSR_4g);
 800223a:	4b1d      	ldr	r3, [pc, #116]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 800223c:	2102      	movs	r1, #2
 800223e:	0018      	movs	r0, r3
 8002240:	f7fe f840 	bl	80002c4 <lsm6dsr_xl_full_scale_set>
	/* 6.1 Pedometer functions: ODR >= 26Hz for step counter*/
	lsm6dsr_xl_data_rate_set(&s_lsm_ctx, LSM6DSR_XL_ODR_26Hz);
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 8002246:	2102      	movs	r1, #2
 8002248:	0018      	movs	r0, r3
 800224a:	f7fe f86b 	bl	8000324 <lsm6dsr_xl_data_rate_set>

	/* Enable pedometer with false-step rejection */
	lsm6dsr_pedo_sens_set(&s_lsm_ctx, PROPERTY_ENABLE);
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 8002250:	2101      	movs	r1, #1
 8002252:	0018      	movs	r0, r3
 8002254:	f7ff f86f 	bl	8001336 <lsm6dsr_pedo_sens_set>
	lsm6dsr_pedo_mode_set(&s_lsm_ctx, LSM6DSR_PEDO_ADV_FALSE_STEP_REJ);
 8002258:	4b15      	ldr	r3, [pc, #84]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 800225a:	2103      	movs	r1, #3
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff f8af 	bl	80013c0 <lsm6dsr_pedo_mode_set>
	lsm6dsr_pedo_int_mode_set(&s_lsm_ctx, LSM6DSR_EVERY_STEP);
 8002262:	4b13      	ldr	r3, [pc, #76]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 8002264:	2100      	movs	r1, #0
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff f96a 	bl	8001540 <lsm6dsr_pedo_int_mode_set>
	lsm6dsr_steps_reset(&s_lsm_ctx);
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 800226e:	0018      	movs	r0, r3
 8002270:	f7fe fb4c 	bl	800090c <lsm6dsr_steps_reset>
	uint8_t debounce = STEP_DEBOUNCE_THRESHOLD;
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	2208      	movs	r2, #8
 8002278:	701a      	strb	r2, [r3, #0]
	lsm6dsr_pedo_debounce_steps_set(&s_lsm_ctx, &debounce);
 800227a:	1dfa      	adds	r2, r7, #7
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 800227e:	0011      	movs	r1, r2
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff f94a 	bl	800151a <lsm6dsr_pedo_debounce_steps_set>

	/* Route Step Detector interrupt to INT1 */
	lsm6dsr_pin_int2_route_t int2_route;
	lsm6dsr_pin_int2_route_get(&s_lsm_ctx, &int2_route);
 8002286:	003a      	movs	r2, r7
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 800228a:	0011      	movs	r1, r2
 800228c:	0018      	movs	r0, r3
 800228e:	f7fe ff20 	bl	80010d2 <lsm6dsr_pin_int2_route_get>
	int2_route.emb_func_int2.int2_step_detector = 1;
 8002292:	003b      	movs	r3, r7
 8002294:	789a      	ldrb	r2, [r3, #2]
 8002296:	2108      	movs	r1, #8
 8002298:	430a      	orrs	r2, r1
 800229a:	709a      	strb	r2, [r3, #2]
	lsm6dsr_pin_int2_route_set(&s_lsm_ctx, &int2_route);
 800229c:	003a      	movs	r2, r7
 800229e:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <LSM6DSR_Init_Pedo_INT2+0x7c>)
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f7fe fda6 	bl	8000df4 <lsm6dsr_pin_int2_route_set>
}
 80022a8:	46c0      	nop			@ (mov r8, r8)
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	2000011c 	.word	0x2000011c

080022b4 <MAX31331_Init>:
	int2_route.md2_cfg.int2_single_tap = 1;
	int2_route.md2_cfg.int2_double_tap = 1;
	lsm6dsr_pin_int2_route_set(&s_lsm_ctx, &int2_route);
}

static void MAX31331_Init(void) {
 80022b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022b6:	b089      	sub	sp, #36	@ 0x24
 80022b8:	af04      	add	r7, sp, #16
	uint8_t seconds = 0;
 80022ba:	240f      	movs	r4, #15
 80022bc:	193b      	adds	r3, r7, r4
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
	uint8_t minutes = 0;
 80022c2:	250e      	movs	r5, #14
 80022c4:	197b      	adds	r3, r7, r5
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
	uint8_t hours   = 14;  // Example: 2PM
 80022ca:	230d      	movs	r3, #13
 80022cc:	18fb      	adds	r3, r7, r3
 80022ce:	220e      	movs	r2, #14
 80022d0:	701a      	strb	r2, [r3, #0]
	uint8_t day     = 3;   // WEDNESDAY
 80022d2:	260c      	movs	r6, #12
 80022d4:	19bb      	adds	r3, r7, r6
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
	uint8_t date    = 27;  // 27th
 80022da:	220b      	movs	r2, #11
 80022dc:	18bb      	adds	r3, r7, r2
 80022de:	221b      	movs	r2, #27
 80022e0:	701a      	strb	r2, [r3, #0]
	uint8_t month   = 8;   // January
 80022e2:	210a      	movs	r1, #10
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	2208      	movs	r2, #8
 80022e8:	701a      	strb	r2, [r3, #0]
	uint8_t year    = 25;  // Year = 2025 (last two digits)
 80022ea:	2009      	movs	r0, #9
 80022ec:	183b      	adds	r3, r7, r0
 80022ee:	2219      	movs	r2, #25
 80022f0:	701a      	strb	r2, [r3, #0]
	uint8_t century = 0;   // 0 = 21st century, 1 = 22nd century
 80022f2:	2108      	movs	r1, #8
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]

	s_max_ctx.write_reg = platform_write;
 80022fa:	4b67      	ldr	r3, [pc, #412]	@ (8002498 <MAX31331_Init+0x1e4>)
 80022fc:	4a67      	ldr	r2, [pc, #412]	@ (800249c <MAX31331_Init+0x1e8>)
 80022fe:	601a      	str	r2, [r3, #0]
	s_max_ctx.read_reg  = platform_read;
 8002300:	4b65      	ldr	r3, [pc, #404]	@ (8002498 <MAX31331_Init+0x1e4>)
 8002302:	4a67      	ldr	r2, [pc, #412]	@ (80024a0 <MAX31331_Init+0x1ec>)
 8002304:	605a      	str	r2, [r3, #4]
	s_max_ctx.mdelay    = HAL_Delay;
 8002306:	4b64      	ldr	r3, [pc, #400]	@ (8002498 <MAX31331_Init+0x1e4>)
 8002308:	4a66      	ldr	r2, [pc, #408]	@ (80024a4 <MAX31331_Init+0x1f0>)
 800230a:	609a      	str	r2, [r3, #8]
	s_max_ctx.handle    = &g_rtc_bus;
 800230c:	4b62      	ldr	r3, [pc, #392]	@ (8002498 <MAX31331_Init+0x1e4>)
 800230e:	4a66      	ldr	r2, [pc, #408]	@ (80024a8 <MAX31331_Init+0x1f4>)
 8002310:	60da      	str	r2, [r3, #12]

	HAL_Delay(20);
 8002312:	2014      	movs	r0, #20
 8002314:	f001 f870 	bl	80033f8 <HAL_Delay>

	max31331_reset_rtc(&s_max_ctx);
 8002318:	4b5f      	ldr	r3, [pc, #380]	@ (8002498 <MAX31331_Init+0x1e4>)
 800231a:	0018      	movs	r0, r3
 800231c:	f000 fa79 	bl	8002812 <max31331_reset_rtc>
	HAL_Delay(5);
 8002320:	2005      	movs	r0, #5
 8002322:	f001 f869 	bl	80033f8 <HAL_Delay>

	max31331_set_time(&s_max_ctx, seconds, minutes, hours);
 8002326:	193b      	adds	r3, r7, r4
 8002328:	7819      	ldrb	r1, [r3, #0]
 800232a:	002e      	movs	r6, r5
 800232c:	19bb      	adds	r3, r7, r6
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	230d      	movs	r3, #13
 8002332:	18fb      	adds	r3, r7, r3
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	4858      	ldr	r0, [pc, #352]	@ (8002498 <MAX31331_Init+0x1e4>)
 8002338:	f000 fa9b 	bl	8002872 <max31331_set_time>
	seconds 	= 0xFF;
 800233c:	0025      	movs	r5, r4
 800233e:	193b      	adds	r3, r7, r4
 8002340:	22ff      	movs	r2, #255	@ 0xff
 8002342:	701a      	strb	r2, [r3, #0]
	minutes 	= 0xFF;
 8002344:	19bb      	adds	r3, r7, r6
 8002346:	22ff      	movs	r2, #255	@ 0xff
 8002348:	701a      	strb	r2, [r3, #0]
	hours   	= 0xFF;
 800234a:	240d      	movs	r4, #13
 800234c:	193b      	adds	r3, r7, r4
 800234e:	22ff      	movs	r2, #255	@ 0xff
 8002350:	701a      	strb	r2, [r3, #0]
	uint8_t format 	= 0xFF;
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	22ff      	movs	r2, #255	@ 0xff
 8002356:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002358:	2005      	movs	r0, #5
 800235a:	f001 f84d 	bl	80033f8 <HAL_Delay>
	
	max31331_get_time(&s_max_ctx, &seconds, &minutes, &hours, &format);
 800235e:	193c      	adds	r4, r7, r4
 8002360:	19ba      	adds	r2, r7, r6
 8002362:	1979      	adds	r1, r7, r5
 8002364:	484c      	ldr	r0, [pc, #304]	@ (8002498 <MAX31331_Init+0x1e4>)
 8002366:	1dfb      	adds	r3, r7, #7
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	0023      	movs	r3, r4
 800236c:	f000 fb18 	bl	80029a0 <max31331_get_time>
	HAL_Delay(5);
 8002370:	2005      	movs	r0, #5
 8002372:	f001 f841 	bl	80033f8 <HAL_Delay>

	max31331_set_date(&s_max_ctx, day, date, month, century, year);
 8002376:	260c      	movs	r6, #12
 8002378:	19bb      	adds	r3, r7, r6
 800237a:	7819      	ldrb	r1, [r3, #0]
 800237c:	220b      	movs	r2, #11
 800237e:	18bb      	adds	r3, r7, r2
 8002380:	781c      	ldrb	r4, [r3, #0]
 8002382:	230a      	movs	r3, #10
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	781d      	ldrb	r5, [r3, #0]
 8002388:	2308      	movs	r3, #8
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2009      	movs	r0, #9
 8002390:	183a      	adds	r2, r7, r0
 8002392:	7812      	ldrb	r2, [r2, #0]
 8002394:	4840      	ldr	r0, [pc, #256]	@ (8002498 <MAX31331_Init+0x1e4>)
 8002396:	9201      	str	r2, [sp, #4]
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	002b      	movs	r3, r5
 800239c:	0022      	movs	r2, r4
 800239e:	f000 fbc7 	bl	8002b30 <max31331_set_date>
	day     = 0xFF;
 80023a2:	0035      	movs	r5, r6
 80023a4:	197b      	adds	r3, r7, r5
 80023a6:	22ff      	movs	r2, #255	@ 0xff
 80023a8:	701a      	strb	r2, [r3, #0]
	date    = 0xFF;
 80023aa:	260b      	movs	r6, #11
 80023ac:	19bb      	adds	r3, r7, r6
 80023ae:	22ff      	movs	r2, #255	@ 0xff
 80023b0:	701a      	strb	r2, [r3, #0]
	month   = 0xFF;
 80023b2:	240a      	movs	r4, #10
 80023b4:	193b      	adds	r3, r7, r4
 80023b6:	22ff      	movs	r2, #255	@ 0xff
 80023b8:	701a      	strb	r2, [r3, #0]
	year    = 0xFF;
 80023ba:	2009      	movs	r0, #9
 80023bc:	183b      	adds	r3, r7, r0
 80023be:	22ff      	movs	r2, #255	@ 0xff
 80023c0:	701a      	strb	r2, [r3, #0]
	century = 0xFF;
 80023c2:	2108      	movs	r1, #8
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	22ff      	movs	r2, #255	@ 0xff
 80023c8:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 80023ca:	2005      	movs	r0, #5
 80023cc:	f001 f814 	bl	80033f8 <HAL_Delay>
	
	max31331_get_date(&s_max_ctx, &day, &date, &month, &century, &year);
 80023d0:	193c      	adds	r4, r7, r4
 80023d2:	19ba      	adds	r2, r7, r6
 80023d4:	1979      	adds	r1, r7, r5
 80023d6:	4830      	ldr	r0, [pc, #192]	@ (8002498 <MAX31331_Init+0x1e4>)
 80023d8:	2309      	movs	r3, #9
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	2308      	movs	r3, #8
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	0023      	movs	r3, r4
 80023e6:	f000 fc29 	bl	8002c3c <max31331_get_date>
	HAL_Delay(5);
 80023ea:	2005      	movs	r0, #5
 80023ec:	f001 f804 	bl	80033f8 <HAL_Delay>

	max31331_set_clko(&s_max_ctx, 1, CLKO_1Hz);
 80023f0:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <MAX31331_Init+0x1e4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	2101      	movs	r1, #1
 80023f6:	0018      	movs	r0, r3
 80023f8:	f000 fc97 	bl	8002d2a <max31331_set_clko>
	HAL_Delay(5);
 80023fc:	2005      	movs	r0, #5
 80023fe:	f000 fffb 	bl	80033f8 <HAL_Delay>

	max31331_set_timer_config(&s_max_ctx, 0, 0, 1, TIMER_64Hz); // Disable timer and "resume" to change init
 8002402:	4825      	ldr	r0, [pc, #148]	@ (8002498 <MAX31331_Init+0x1e4>)
 8002404:	2302      	movs	r3, #2
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2301      	movs	r3, #1
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	f000 fcc6 	bl	8002d9e <max31331_set_timer_config>
	HAL_Delay(5);
 8002412:	2005      	movs	r0, #5
 8002414:	f000 fff0 	bl	80033f8 <HAL_Delay>
	max31331_set_timer_init(&s_max_ctx, 2);                    	// Update init to get interrupts every 2 ticks
 8002418:	4b1f      	ldr	r3, [pc, #124]	@ (8002498 <MAX31331_Init+0x1e4>)
 800241a:	2102      	movs	r1, #2
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fd19 	bl	8002e54 <max31331_set_timer_init>
	HAL_Delay(5);
 8002422:	2005      	movs	r0, #5
 8002424:	f000 ffe8 	bl	80033f8 <HAL_Delay>
	max31331_set_timer_config(&s_max_ctx, 1, 0, 1, TIMER_64Hz); // 64hz timer every 2 ticks => 32hz interrupts
 8002428:	481b      	ldr	r0, [pc, #108]	@ (8002498 <MAX31331_Init+0x1e4>)
 800242a:	2302      	movs	r3, #2
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2301      	movs	r3, #1
 8002430:	2200      	movs	r2, #0
 8002432:	2101      	movs	r1, #1
 8002434:	f000 fcb3 	bl	8002d9e <max31331_set_timer_config>
	HAL_Delay(5);
 8002438:	2005      	movs	r0, #5
 800243a:	f000 ffdd 	bl	80033f8 <HAL_Delay>
	
	max31331_set_int_en(&s_max_ctx, 0, 0, 0, 0, 1, 0, 0);      // Enable timer interrupt only
 800243e:	4816      	ldr	r0, [pc, #88]	@ (8002498 <MAX31331_Init+0x1e4>)
 8002440:	2300      	movs	r3, #0
 8002442:	9303      	str	r3, [sp, #12]
 8002444:	2300      	movs	r3, #0
 8002446:	9302      	str	r3, [sp, #8]
 8002448:	2301      	movs	r3, #1
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2300      	movs	r3, #0
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	f000 fd15 	bl	8002e84 <max31331_set_int_en>
	uint8_t int_en = 0xFF;
 800245a:	1dbb      	adds	r3, r7, #6
 800245c:	22ff      	movs	r2, #255	@ 0xff
 800245e:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5);
 8002460:	2005      	movs	r0, #5
 8002462:	f000 ffc9 	bl	80033f8 <HAL_Delay>
	max31331_get_int_en(&s_max_ctx, &int_en);
 8002466:	1dba      	adds	r2, r7, #6
 8002468:	4b0b      	ldr	r3, [pc, #44]	@ (8002498 <MAX31331_Init+0x1e4>)
 800246a:	0011      	movs	r1, r2
 800246c:	0018      	movs	r0, r3
 800246e:	f000 fd94 	bl	8002f9a <max31331_get_int_en>
	HAL_Delay(5);
 8002472:	2005      	movs	r0, #5
 8002474:	f000 ffc0 	bl	80033f8 <HAL_Delay>
	uint8_t rtc_status = 0xFF;
 8002478:	1d7b      	adds	r3, r7, #5
 800247a:	22ff      	movs	r2, #255	@ 0xff
 800247c:	701a      	strb	r2, [r3, #0]
	max31331_get_status(&s_max_ctx, &rtc_status);
 800247e:	1d7a      	adds	r2, r7, #5
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <MAX31331_Init+0x1e4>)
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f000 f9ab 	bl	80027e0 <max31331_get_status>
	HAL_Delay(5);
 800248a:	2005      	movs	r0, #5
 800248c:	f000 ffb4 	bl	80033f8 <HAL_Delay>
}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b005      	add	sp, #20
 8002496:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002498:	20000130 	.word	0x20000130
 800249c:	080025f9 	.word	0x080025f9
 80024a0:	08002651 	.word	0x08002651
 80024a4:	080033f9 	.word	0x080033f9
 80024a8:	20000008 	.word	0x20000008

080024ac <HAL_GPIO_EXTI_Falling_Callback>:

/* ============== EXTI IRQ Handler ============== */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	0002      	movs	r2, r0
 80024b4:	1dbb      	adds	r3, r7, #6
 80024b6:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == RTC_INT_Pin) {
 80024b8:	1dbb      	adds	r3, r7, #6
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d112      	bne.n	80024e6 <HAL_GPIO_EXTI_Falling_Callback+0x3a>
		if (timeInQueue < 2) {
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d80d      	bhi.n	80024e6 <HAL_GPIO_EXTI_Falling_Callback+0x3a>
			if (enqueueJob(&jobQueue, timeJob)) {
 80024ca:	4b0a      	ldr	r3, [pc, #40]	@ (80024f4 <HAL_GPIO_EXTI_Falling_Callback+0x48>)
 80024cc:	2102      	movs	r1, #2
 80024ce:	0018      	movs	r0, r3
 80024d0:	f7ff fb80 	bl	8001bd4 <enqueueJob>
 80024d4:	1e03      	subs	r3, r0, #0
 80024d6:	d006      	beq.n	80024e6 <HAL_GPIO_EXTI_Falling_Callback+0x3a>
				timeInQueue++;
 80024d8:	4b05      	ldr	r3, [pc, #20]	@ (80024f0 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_GPIO_EXTI_Falling_Callback+0x44>)
 80024e4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b002      	add	sp, #8
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	20000192 	.word	0x20000192
 80024f4:	20000144 	.word	0x20000144

080024f8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	0002      	movs	r2, r0
 8002500:	1dbb      	adds	r3, r7, #6
 8002502:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == IMU_INT2_Pin) {
 8002504:	1dbb      	adds	r3, r7, #6
 8002506:	881b      	ldrh	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d112      	bne.n	8002532 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
		if (stepsInQueue < 2) {
 800250c:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d80d      	bhi.n	8002532 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
			if (enqueueJob(&jobQueue, stepJob)) {
 8002516:	4b15      	ldr	r3, [pc, #84]	@ (800256c <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 8002518:	2100      	movs	r1, #0
 800251a:	0018      	movs	r0, r3
 800251c:	f7ff fb5a 	bl	8001bd4 <enqueueJob>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d006      	beq.n	8002532 <HAL_GPIO_EXTI_Rising_Callback+0x3a>
				stepsInQueue++;
 8002524:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8002530:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (GPIO_Pin == IMU_INT1_Pin) { // INT 1 is disabled for now
 8002532:	1dbb      	adds	r3, r7, #6
 8002534:	881b      	ldrh	r3, [r3, #0]
 8002536:	2b02      	cmp	r3, #2
 8002538:	d112      	bne.n	8002560 <HAL_GPIO_EXTI_Rising_Callback+0x68>
		if (tapsInQueue < 2) {
 800253a:	4b0d      	ldr	r3, [pc, #52]	@ (8002570 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d80d      	bhi.n	8002560 <HAL_GPIO_EXTI_Rising_Callback+0x68>
			if (enqueueJob(&jobQueue, tapJob)) {
 8002544:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_GPIO_EXTI_Rising_Callback+0x74>)
 8002546:	2101      	movs	r1, #1
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff fb43 	bl	8001bd4 <enqueueJob>
 800254e:	1e03      	subs	r3, r0, #0
 8002550:	d006      	beq.n	8002560 <HAL_GPIO_EXTI_Rising_Callback+0x68>
				tapsInQueue++;
 8002552:	4b07      	ldr	r3, [pc, #28]	@ (8002570 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3301      	adds	r3, #1
 800255a:	b2da      	uxtb	r2, r3
 800255c:	4b04      	ldr	r3, [pc, #16]	@ (8002570 <HAL_GPIO_EXTI_Rising_Callback+0x78>)
 800255e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 8002560:	46c0      	nop			@ (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}
 8002568:	20000191 	.word	0x20000191
 800256c:	20000144 	.word	0x20000144
 8002570:	20000190 	.word	0x20000190

08002574 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c3) {
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_I2C_MemRxCpltCallback+0x64>)
 8002580:	429a      	cmp	r2, r3
 8002582:	d122      	bne.n	80025ca <HAL_I2C_MemRxCpltCallback+0x56>
		// Step counter DMA finished
		if (TickDMAflag) {
 8002584:	4b15      	ldr	r3, [pc, #84]	@ (80025dc <HAL_I2C_MemRxCpltCallback+0x68>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_I2C_MemRxCpltCallback+0x28>
			TickDMAflag = 0;
 800258e:	4b13      	ldr	r3, [pc, #76]	@ (80025dc <HAL_I2C_MemRxCpltCallback+0x68>)
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
			TickRXcomp = 1;
 8002594:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
 800259a:	e016      	b.n	80025ca <HAL_I2C_MemRxCpltCallback+0x56>
		} else if (TapDMAflag) {
 800259c:	4b11      	ldr	r3, [pc, #68]	@ (80025e4 <HAL_I2C_MemRxCpltCallback+0x70>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <HAL_I2C_MemRxCpltCallback+0x40>
			TapDMAflag = 0;
 80025a6:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_I2C_MemRxCpltCallback+0x70>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
			TapRXcomp = 1;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <HAL_I2C_MemRxCpltCallback+0x74>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
 80025b2:	e00a      	b.n	80025ca <HAL_I2C_MemRxCpltCallback+0x56>
		} else if (StepDMAflag) {
 80025b4:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <HAL_I2C_MemRxCpltCallback+0x78>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <HAL_I2C_MemRxCpltCallback+0x56>
			StepDMAflag = 0;
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_I2C_MemRxCpltCallback+0x78>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
			StepRXcomp = 1;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <HAL_I2C_MemRxCpltCallback+0x7c>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
		}
    }
	DMArunning = 0;
 80025ca:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <HAL_I2C_MemRxCpltCallback+0x80>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]
}
 80025d0:	46c0      	nop			@ (mov r8, r8)
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b002      	add	sp, #8
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	2000003c 	.word	0x2000003c
 80025dc:	20000194 	.word	0x20000194
 80025e0:	20000195 	.word	0x20000195
 80025e4:	20000196 	.word	0x20000196
 80025e8:	20000197 	.word	0x20000197
 80025ec:	20000198 	.word	0x20000198
 80025f0:	20000199 	.word	0x20000199
 80025f4:	20000193 	.word	0x20000193

080025f8 <platform_write>:

/* ============== Platform Specific Read/Write ============== */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len)
{
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af04      	add	r7, sp, #16
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	0008      	movs	r0, r1
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	0019      	movs	r1, r3
 8002606:	240b      	movs	r4, #11
 8002608:	193b      	adds	r3, r7, r4
 800260a:	1c02      	adds	r2, r0, #0
 800260c:	701a      	strb	r2, [r3, #0]
 800260e:	2508      	movs	r5, #8
 8002610:	197b      	adds	r3, r7, r5
 8002612:	1c0a      	adds	r2, r1, #0
 8002614:	801a      	strh	r2, [r3, #0]
	i2c_dev_t *dev = (i2c_dev_t *)handle;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Write(dev->i2c, (dev->addr_8bit), reg,
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	6818      	ldr	r0, [r3, #0]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	8899      	ldrh	r1, [r3, #4]
 8002622:	193b      	adds	r3, r7, r4
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b29a      	uxth	r2, r3
 8002628:	2364      	movs	r3, #100	@ 0x64
 800262a:	9302      	str	r3, [sp, #8]
 800262c:	197b      	adds	r3, r7, r5
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2301      	movs	r3, #1
 8002638:	f001 fdd8 	bl	80041ec <HAL_I2C_Mem_Write>
 800263c:	1e03      	subs	r3, r0, #0
 800263e:	d002      	beq.n	8002646 <platform_write+0x4e>
							I2C_MEMADD_SIZE_8BIT, (uint8_t*)bufp, len, 100) != HAL_OK)
		return -1;
 8002640:	2301      	movs	r3, #1
 8002642:	425b      	negs	r3, r3
 8002644:	e000      	b.n	8002648 <platform_write+0x50>
	return 0;
 8002646:	2300      	movs	r3, #0
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b006      	add	sp, #24
 800264e:	bdb0      	pop	{r4, r5, r7, pc}

08002650 <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
 8002650:	b5b0      	push	{r4, r5, r7, lr}
 8002652:	b08a      	sub	sp, #40	@ 0x28
 8002654:	af04      	add	r7, sp, #16
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	0008      	movs	r0, r1
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	0019      	movs	r1, r3
 800265e:	240b      	movs	r4, #11
 8002660:	193b      	adds	r3, r7, r4
 8002662:	1c02      	adds	r2, r0, #0
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	2508      	movs	r5, #8
 8002668:	197b      	adds	r3, r7, r5
 800266a:	1c0a      	adds	r2, r1, #0
 800266c:	801a      	strh	r2, [r3, #0]
	i2c_dev_t *dev = (i2c_dev_t *)handle;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Mem_Read(dev->i2c, (dev->addr_8bit), reg,
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	8899      	ldrh	r1, [r3, #4]
 800267a:	193b      	adds	r3, r7, r4
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
 8002680:	2364      	movs	r3, #100	@ 0x64
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	197b      	adds	r3, r7, r5
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	2301      	movs	r3, #1
 8002690:	f001 feda 	bl	8004448 <HAL_I2C_Mem_Read>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d002      	beq.n	800269e <platform_read+0x4e>
							I2C_MEMADD_SIZE_8BIT, bufp, len, 100) != HAL_OK)
	return -1;
 8002698:	2301      	movs	r3, #1
 800269a:	425b      	negs	r3, r3
 800269c:	e000      	b.n	80026a0 <platform_read+0x50>
	return 0;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	b006      	add	sp, #24
 80026a6:	bdb0      	pop	{r4, r5, r7, pc}

080026a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026ac:	b672      	cpsid	i
}
 80026ae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b0:	46c0      	nop			@ (mov r8, r8)
 80026b2:	e7fd      	b.n	80026b0 <Error_Handler+0x8>

080026b4 <max31331_read_reg>:
  * @param  reg   register to read
  * @param  data  pointer to buffer that store the data read(ptr)
  * @param  len   number of consecutive register to read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  */
int32_t max31331_read_reg(const max31331_ctx_t *ctx, uint8_t reg, uint8_t *data, uint16_t len) {
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	0008      	movs	r0, r1
 80026be:	607a      	str	r2, [r7, #4]
 80026c0:	0019      	movs	r1, r3
 80026c2:	230b      	movs	r3, #11
 80026c4:	18fb      	adds	r3, r7, r3
 80026c6:	1c02      	adds	r2, r0, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	2308      	movs	r3, #8
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	1c0a      	adds	r2, r1, #0
 80026d0:	801a      	strh	r2, [r3, #0]
    if (ctx == NULL || data == NULL || ctx->read_reg == NULL) {
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <max31331_read_reg+0x32>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <max31331_read_reg+0x32>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <max31331_read_reg+0x38>
        return -1;
 80026e6:	2301      	movs	r3, #1
 80026e8:	425b      	negs	r3, r3
 80026ea:	e00d      	b.n	8002708 <max31331_read_reg+0x54>
    }
    return ctx->read_reg(ctx->handle, reg, data, len);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685c      	ldr	r4, [r3, #4]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	68d8      	ldr	r0, [r3, #12]
 80026f4:	2308      	movs	r3, #8
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	881d      	ldrh	r5, [r3, #0]
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	230b      	movs	r3, #11
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	7819      	ldrb	r1, [r3, #0]
 8002702:	002b      	movs	r3, r5
 8002704:	47a0      	blx	r4
 8002706:	0003      	movs	r3, r0
}
 8002708:	0018      	movs	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	b004      	add	sp, #16
 800270e:	bdb0      	pop	{r4, r5, r7, pc}

08002710 <max31331_write_reg>:
  * @param  reg   register to write
  * @param  data  pointer to data to write in register reg(ptr)
  * @param  len   number of consecutive register to write
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  */
int32_t max31331_write_reg(const max31331_ctx_t *ctx, uint8_t reg, uint8_t *data, uint16_t len) {
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	0008      	movs	r0, r1
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	0019      	movs	r1, r3
 800271e:	230b      	movs	r3, #11
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	1c02      	adds	r2, r0, #0
 8002724:	701a      	strb	r2, [r3, #0]
 8002726:	2308      	movs	r3, #8
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	1c0a      	adds	r2, r1, #0
 800272c:	801a      	strh	r2, [r3, #0]
    if (ctx == NULL || data == NULL || ctx->write_reg == NULL) {
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <max31331_write_reg+0x32>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <max31331_write_reg+0x32>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d102      	bne.n	8002748 <max31331_write_reg+0x38>
        return -1;
 8002742:	2301      	movs	r3, #1
 8002744:	425b      	negs	r3, r3
 8002746:	e00d      	b.n	8002764 <max31331_write_reg+0x54>
    }
    return ctx->write_reg(ctx->handle, reg, data, len);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681c      	ldr	r4, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	68d8      	ldr	r0, [r3, #12]
 8002750:	2308      	movs	r3, #8
 8002752:	18fb      	adds	r3, r7, r3
 8002754:	881d      	ldrh	r5, [r3, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	230b      	movs	r3, #11
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	7819      	ldrb	r1, [r3, #0]
 800275e:	002b      	movs	r3, r5
 8002760:	47a0      	blx	r4
 8002762:	0003      	movs	r3, r0
}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b004      	add	sp, #16
 800276a:	bdb0      	pop	{r4, r5, r7, pc}

0800276c <bin2dec_bcd>:

/* ============ Helper Functions ============ */
uint8_t bin2dec_bcd(uint8_t bcd) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	0002      	movs	r2, r0
 8002774:	1dfb      	adds	r3, r7, #7
 8002776:	701a      	strb	r2, [r3, #0]
    return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8002778:	1dfb      	adds	r3, r7, #7
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	b2db      	uxtb	r3, r3
 8002780:	1c1a      	adds	r2, r3, #0
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	18d3      	adds	r3, r2, r3
 8002786:	18db      	adds	r3, r3, r3
 8002788:	b2da      	uxtb	r2, r3
 800278a:	1dfb      	adds	r3, r7, #7
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	210f      	movs	r1, #15
 8002790:	400b      	ands	r3, r1
 8002792:	b2db      	uxtb	r3, r3
 8002794:	18d3      	adds	r3, r2, r3
 8002796:	b2db      	uxtb	r3, r3
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b002      	add	sp, #8
 800279e:	bd80      	pop	{r7, pc}

080027a0 <dec2bin_bcd>:
uint8_t dec2bin_bcd(uint8_t dec) {
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	0002      	movs	r2, r0
 80027a8:	1dfb      	adds	r3, r7, #7
 80027aa:	701a      	strb	r2, [r3, #0]
    return (dec/10) << 4 | (dec%10);
 80027ac:	1dfb      	adds	r3, r7, #7
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	210a      	movs	r1, #10
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7fd fca8 	bl	8000108 <__udivsi3>
 80027b8:	0003      	movs	r3, r0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	b25c      	sxtb	r4, r3
 80027c0:	1dfb      	adds	r3, r7, #7
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	210a      	movs	r1, #10
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7fd fd24 	bl	8000214 <__aeabi_uidivmod>
 80027cc:	000b      	movs	r3, r1
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	4323      	orrs	r3, r4
 80027d4:	b25b      	sxtb	r3, r3
 80027d6:	b2db      	uxtb	r3, r3
}
 80027d8:	0018      	movs	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	b003      	add	sp, #12
 80027de:	bd90      	pop	{r4, r7, pc}

080027e0 <max31331_get_status>:

/* ============ Register Functions ============ */
int max31331_get_status(const max31331_ctx_t *ctx, uint8_t *status) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
    if (ctx == NULL || status == NULL) return -1;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d002      	beq.n	80027f6 <max31331_get_status+0x16>
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d102      	bne.n	80027fc <max31331_get_status+0x1c>
 80027f6:	2301      	movs	r3, #1
 80027f8:	425b      	negs	r3, r3
 80027fa:	e006      	b.n	800280a <max31331_get_status+0x2a>
    return max31331_read_reg(ctx, MAX31331_RTC_STATUS, status, 1);
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	2301      	movs	r3, #1
 8002802:	2100      	movs	r1, #0
 8002804:	f7ff ff56 	bl	80026b4 <max31331_read_reg>
 8002808:	0003      	movs	r3, r0
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b002      	add	sp, #8
 8002810:	bd80      	pop	{r7, pc}

08002812 <max31331_reset_rtc>:

int max31331_reset_rtc(const max31331_ctx_t *ctx) {
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
    if (ctx == NULL) return -1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d102      	bne.n	8002826 <max31331_reset_rtc+0x14>
 8002820:	2301      	movs	r3, #1
 8002822:	425b      	negs	r3, r3
 8002824:	e021      	b.n	800286a <max31331_reset_rtc+0x58>
    uint8_t reset = (1 << MAX31331_RESET_SWRST_POS) & MAX31331_RESET_SWRST_MSK;
 8002826:	210b      	movs	r1, #11
 8002828:	187b      	adds	r3, r7, r1
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
    int ret = max31331_write_reg(ctx, MAX31331_RTC_RESET, &reset, 1);
 800282e:	187a      	adds	r2, r7, r1
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	2301      	movs	r3, #1
 8002834:	2102      	movs	r1, #2
 8002836:	f7ff ff6b 	bl	8002710 <max31331_write_reg>
 800283a:	0003      	movs	r3, r0
 800283c:	60fb      	str	r3, [r7, #12]
    
    if (ret != 0) return ret;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <max31331_reset_rtc+0x36>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	e010      	b.n	800286a <max31331_reset_rtc+0x58>

    ctx->mdelay(5);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2005      	movs	r0, #5
 800284e:	4798      	blx	r3
    reset = (0 << MAX31331_RESET_SWRST_POS) & MAX31331_RESET_SWRST_MSK;
 8002850:	210b      	movs	r1, #11
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
    ret = max31331_write_reg(ctx, MAX31331_RTC_RESET, &reset, 1);
 8002858:	187a      	adds	r2, r7, r1
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	2301      	movs	r3, #1
 800285e:	2102      	movs	r1, #2
 8002860:	f7ff ff56 	bl	8002710 <max31331_write_reg>
 8002864:	0003      	movs	r3, r0
 8002866:	60fb      	str	r3, [r7, #12]
    return ret;
 8002868:	68fb      	ldr	r3, [r7, #12]
}
 800286a:	0018      	movs	r0, r3
 800286c:	46bd      	mov	sp, r7
 800286e:	b004      	add	sp, #16
 8002870:	bd80      	pop	{r7, pc}

08002872 <max31331_set_time>:

int max31331_set_time(const max31331_ctx_t *ctx, uint8_t seconds, uint8_t minutes, uint8_t hours) {
 8002872:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002874:	b085      	sub	sp, #20
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	000c      	movs	r4, r1
 800287c:	0010      	movs	r0, r2
 800287e:	0019      	movs	r1, r3
 8002880:	1cfb      	adds	r3, r7, #3
 8002882:	1c22      	adds	r2, r4, #0
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	1cbb      	adds	r3, r7, #2
 8002888:	1c02      	adds	r2, r0, #0
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	1c7b      	adds	r3, r7, #1
 800288e:	1c0a      	adds	r2, r1, #0
 8002890:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <max31331_set_time+0x2c>
 8002898:	2301      	movs	r3, #1
 800289a:	425b      	negs	r3, r3
 800289c:	e07c      	b.n	8002998 <max31331_set_time+0x126>
    if (seconds > 59 || minutes > 59 || hours > 23) return -2;
 800289e:	1cfb      	adds	r3, r7, #3
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b3b      	cmp	r3, #59	@ 0x3b
 80028a4:	d807      	bhi.n	80028b6 <max31331_set_time+0x44>
 80028a6:	1cbb      	adds	r3, r7, #2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80028ac:	d803      	bhi.n	80028b6 <max31331_set_time+0x44>
 80028ae:	1c7b      	adds	r3, r7, #1
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b17      	cmp	r3, #23
 80028b4:	d902      	bls.n	80028bc <max31331_set_time+0x4a>
 80028b6:	2302      	movs	r3, #2
 80028b8:	425b      	negs	r3, r3
 80028ba:	e06d      	b.n	8002998 <max31331_set_time+0x126>

    uint8_t s = (dec2bin_bcd(seconds) << MAX31331_SECONDS_POS)    & MAX31331_SECONDS_MSK;  /* packed BCD */
 80028bc:	1cfb      	adds	r3, r7, #3
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff ff6d 	bl	80027a0 <dec2bin_bcd>
 80028c6:	0003      	movs	r3, r0
 80028c8:	0019      	movs	r1, r3
 80028ca:	250f      	movs	r5, #15
 80028cc:	197b      	adds	r3, r7, r5
 80028ce:	227f      	movs	r2, #127	@ 0x7f
 80028d0:	400a      	ands	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
    uint8_t m = (dec2bin_bcd(minutes) << MAX31331_MINUTES_POS)    & MAX31331_MINUTES_MSK;
 80028d4:	1cbb      	adds	r3, r7, #2
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	0018      	movs	r0, r3
 80028da:	f7ff ff61 	bl	80027a0 <dec2bin_bcd>
 80028de:	0003      	movs	r3, r0
 80028e0:	0019      	movs	r1, r3
 80028e2:	260e      	movs	r6, #14
 80028e4:	19bb      	adds	r3, r7, r6
 80028e6:	227f      	movs	r2, #127	@ 0x7f
 80028e8:	400a      	ands	r2, r1
 80028ea:	701a      	strb	r2, [r3, #0]
    
    uint8_t h = 0;
 80028ec:	240d      	movs	r4, #13
 80028ee:	193b      	adds	r3, r7, r4
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
    h |= dec2bin_bcd(hours % 10) & MAX31331_HOURS_HOUR_MSK;           // lower 4 bits HOUR
 80028f4:	1c7b      	adds	r3, r7, #1
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	210a      	movs	r1, #10
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7fd fc8a 	bl	8000214 <__aeabi_uidivmod>
 8002900:	000b      	movs	r3, r1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ff4b 	bl	80027a0 <dec2bin_bcd>
 800290a:	0003      	movs	r3, r0
 800290c:	001a      	movs	r2, r3
 800290e:	230f      	movs	r3, #15
 8002910:	4013      	ands	r3, r2
 8002912:	b2d9      	uxtb	r1, r3
 8002914:	193b      	adds	r3, r7, r4
 8002916:	193a      	adds	r2, r7, r4
 8002918:	7812      	ldrb	r2, [r2, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]
    h |= ((hours / 10) << MAX31331_HOURS_HR10_POS) & MAX31331_HOURS_HR10_MSK; // HR10
 800291e:	1c7b      	adds	r3, r7, #1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	210a      	movs	r1, #10
 8002924:	0018      	movs	r0, r3
 8002926:	f7fd fbef 	bl	8000108 <__udivsi3>
 800292a:	0003      	movs	r3, r0
 800292c:	b2db      	uxtb	r3, r3
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2210      	movs	r2, #16
 8002934:	4013      	ands	r3, r2
 8002936:	b2d9      	uxtb	r1, r3
 8002938:	193b      	adds	r3, r7, r4
 800293a:	193a      	adds	r2, r7, r4
 800293c:	7812      	ldrb	r2, [r2, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	701a      	strb	r2, [r3, #0]
    h |= ((hours / 20) << MAX31331_HOURS_HR20_AMPM_POS) & MAX31331_HOURS_HR20_AMPM_MSK; // HR20
 8002942:	1c7b      	adds	r3, r7, #1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2114      	movs	r1, #20
 8002948:	0018      	movs	r0, r3
 800294a:	f7fd fbdd 	bl	8000108 <__udivsi3>
 800294e:	0003      	movs	r3, r0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	015b      	lsls	r3, r3, #5
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2220      	movs	r2, #32
 8002958:	4013      	ands	r3, r2
 800295a:	b2d9      	uxtb	r1, r3
 800295c:	193b      	adds	r3, r7, r4
 800295e:	193a      	adds	r2, r7, r4
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	701a      	strb	r2, [r3, #0]
    h |= (HOUR24 << MAX31331_TS_F24_12_POS) & MAX31331_TS_F24_12_MSK; // 24-hour mode
 8002966:	193b      	adds	r3, r7, r4
 8002968:	0021      	movs	r1, r4
 800296a:	193a      	adds	r2, r7, r4
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	701a      	strb	r2, [r3, #0]

    uint8_t time[] = {s, m, h};
 8002970:	2008      	movs	r0, #8
 8002972:	183b      	adds	r3, r7, r0
 8002974:	197a      	adds	r2, r7, r5
 8002976:	7812      	ldrb	r2, [r2, #0]
 8002978:	701a      	strb	r2, [r3, #0]
 800297a:	183b      	adds	r3, r7, r0
 800297c:	19ba      	adds	r2, r7, r6
 800297e:	7812      	ldrb	r2, [r2, #0]
 8002980:	705a      	strb	r2, [r3, #1]
 8002982:	183b      	adds	r3, r7, r0
 8002984:	187a      	adds	r2, r7, r1
 8002986:	7812      	ldrb	r2, [r2, #0]
 8002988:	709a      	strb	r2, [r3, #2]

    return max31331_write_reg(ctx, MAX31331_SECONDS, time, sizeof(time));
 800298a:	183a      	adds	r2, r7, r0
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	2303      	movs	r3, #3
 8002990:	2108      	movs	r1, #8
 8002992:	f7ff febd 	bl	8002710 <max31331_write_reg>
 8002996:	0003      	movs	r3, r0
}
 8002998:	0018      	movs	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	b005      	add	sp, #20
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029a0 <max31331_get_time>:

int max31331_get_time(const max31331_ctx_t *ctx, uint8_t *seconds, uint8_t *minutes, uint8_t *hours, uint8_t *format) {
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]
	if (!ctx || !seconds || !minutes || !hours || !format) return -1;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <max31331_get_time+0x2c>
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <max31331_get_time+0x2c>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <max31331_get_time+0x2c>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d002      	beq.n	80029cc <max31331_get_time+0x2c>
 80029c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d102      	bne.n	80029d2 <max31331_get_time+0x32>
 80029cc:	2301      	movs	r3, #1
 80029ce:	425b      	negs	r3, r3
 80029d0:	e0a7      	b.n	8002b22 <max31331_get_time+0x182>

    uint8_t time[3] = {0};
 80029d2:	2014      	movs	r0, #20
 80029d4:	183b      	adds	r3, r7, r0
 80029d6:	4a55      	ldr	r2, [pc, #340]	@ (8002b2c <max31331_get_time+0x18c>)
 80029d8:	8812      	ldrh	r2, [r2, #0]
 80029da:	801a      	strh	r2, [r3, #0]
 80029dc:	2202      	movs	r2, #2
 80029de:	2100      	movs	r1, #0
 80029e0:	5499      	strb	r1, [r3, r2]

    int32_t ret = max31331_read_reg(ctx, MAX31331_SECONDS, time, sizeof(time));
 80029e2:	183a      	adds	r2, r7, r0
 80029e4:	68f8      	ldr	r0, [r7, #12]
 80029e6:	2303      	movs	r3, #3
 80029e8:	2108      	movs	r1, #8
 80029ea:	f7ff fe63 	bl	80026b4 <max31331_read_reg>
 80029ee:	0003      	movs	r3, r0
 80029f0:	61fb      	str	r3, [r7, #28]
    if (ret != 0) return ret;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <max31331_get_time+0x5c>
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	e092      	b.n	8002b22 <max31331_get_time+0x182>

    uint8_t s = time[0]; // seconds register
 80029fc:	201b      	movs	r0, #27
 80029fe:	183b      	adds	r3, r7, r0
 8002a00:	2114      	movs	r1, #20
 8002a02:	187a      	adds	r2, r7, r1
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	701a      	strb	r2, [r3, #0]
    uint8_t m = time[1]; // minutes register
 8002a08:	251a      	movs	r5, #26
 8002a0a:	197b      	adds	r3, r7, r5
 8002a0c:	187a      	adds	r2, r7, r1
 8002a0e:	7852      	ldrb	r2, [r2, #1]
 8002a10:	701a      	strb	r2, [r3, #0]
    uint8_t h = time[2]; // hours register
 8002a12:	2419      	movs	r4, #25
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	187a      	adds	r2, r7, r1
 8002a18:	7892      	ldrb	r2, [r2, #2]
 8002a1a:	701a      	strb	r2, [r3, #0]

	*seconds = bin2dec_bcd((s & MAX31331_SECONDS_MSK) >> MAX31331_SECONDS_POS);
 8002a1c:	183b      	adds	r3, r7, r0
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	227f      	movs	r2, #127	@ 0x7f
 8002a22:	4013      	ands	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	0018      	movs	r0, r3
 8002a28:	f7ff fea0 	bl	800276c <bin2dec_bcd>
 8002a2c:	0003      	movs	r3, r0
 8002a2e:	001a      	movs	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	701a      	strb	r2, [r3, #0]
    *minutes = bin2dec_bcd((m & MAX31331_MINUTES_MSK) >> MAX31331_MINUTES_POS);
 8002a34:	197b      	adds	r3, r7, r5
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	227f      	movs	r2, #127	@ 0x7f
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7ff fe94 	bl	800276c <bin2dec_bcd>
 8002a44:	0003      	movs	r3, r0
 8002a46:	001a      	movs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	701a      	strb	r2, [r3, #0]
    
    *format  = (h & MAX31331_TS_F24_12_MSK) >> MAX31331_TS_F24_12_POS;
 8002a4c:	193b      	adds	r3, r7, r4
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2201      	movs	r2, #1
 8002a56:	4013      	ands	r3, r2
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	701a      	strb	r2, [r3, #0]
    
	if (*format == HOUR24) {
 8002a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d121      	bne.n	8002aaa <max31331_get_time+0x10a>
        *hours = ((h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS) * 20
 8002a66:	193b      	adds	r3, r7, r4
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	095b      	lsrs	r3, r3, #5
               + ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2214      	movs	r2, #20
 8002a76:	4353      	muls	r3, r2
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	193b      	adds	r3, r7, r4
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2101      	movs	r1, #1
 8002a84:	400b      	ands	r3, r1
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	1c19      	adds	r1, r3, #0
 8002a8a:	0089      	lsls	r1, r1, #2
 8002a8c:	18cb      	adds	r3, r1, r3
 8002a8e:	18db      	adds	r3, r3, r3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	18d3      	adds	r3, r2, r3
 8002a94:	b2da      	uxtb	r2, r3
               + ((h & MAX31331_HOURS_HOUR_MSK) >> MAX31331_HOURS_HOUR_POS);
 8002a96:	193b      	adds	r3, r7, r4
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	210f      	movs	r1, #15
 8002a9c:	400b      	ands	r3, r1
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	18d3      	adds	r3, r2, r3
 8002aa2:	b2da      	uxtb	r2, r3
        *hours = ((h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS) * 20
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	e03a      	b.n	8002b20 <max31331_get_time+0x180>
    } else {
        uint8_t h12 = ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8002aaa:	2019      	movs	r0, #25
 8002aac:	183b      	adds	r3, r7, r0
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	091b      	lsrs	r3, r3, #4
                    + ((h & MAX31331_HOURS_HOUR_MSK) >> MAX31331_HOURS_HOUR_POS);
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	1c1a      	adds	r2, r3, #0
 8002abc:	0092      	lsls	r2, r2, #2
 8002abe:	18d3      	adds	r3, r2, r3
 8002ac0:	18db      	adds	r3, r3, r3
 8002ac2:	b2d9      	uxtb	r1, r3
 8002ac4:	183b      	adds	r3, r7, r0
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	220f      	movs	r2, #15
 8002aca:	4013      	ands	r3, r2
 8002acc:	b2da      	uxtb	r2, r3
        uint8_t h12 = ((h & MAX31331_HOURS_HR10_MSK) >> MAX31331_HOURS_HR10_POS) * 10
 8002ace:	2418      	movs	r4, #24
 8002ad0:	193b      	adds	r3, r7, r4
 8002ad2:	188a      	adds	r2, r1, r2
 8002ad4:	701a      	strb	r2, [r3, #0]
        uint8_t am_pm = (h & MAX31331_HOURS_HR20_AMPM_MSK) >> MAX31331_HOURS_HR20_AMPM_POS;
 8002ad6:	183b      	adds	r3, r7, r0
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	2017      	movs	r0, #23
 8002ae0:	183b      	adds	r3, r7, r0
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	701a      	strb	r2, [r3, #0]
        if (am_pm == AM) {          // AM
 8002ae8:	183b      	adds	r3, r7, r0
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <max31331_get_time+0x166>
            *hours = (h12 == 12) ? 0 : h12;
 8002af0:	193b      	adds	r3, r7, r4
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b0c      	cmp	r3, #12
 8002af6:	d002      	beq.n	8002afe <max31331_get_time+0x15e>
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	e000      	b.n	8002b00 <max31331_get_time+0x160>
 8002afe:	2200      	movs	r2, #0
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e00c      	b.n	8002b20 <max31331_get_time+0x180>
        } else {                    // PM
            *hours = (h12 == 12) ? 12 : h12 + 12;
 8002b06:	2218      	movs	r2, #24
 8002b08:	18bb      	adds	r3, r7, r2
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d004      	beq.n	8002b1a <max31331_get_time+0x17a>
 8002b10:	18bb      	adds	r3, r7, r2
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	330c      	adds	r3, #12
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	e000      	b.n	8002b1c <max31331_get_time+0x17c>
 8002b1a:	220c      	movs	r2, #12
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	701a      	strb	r2, [r3, #0]
        }
    }

	return ret;
 8002b20:	69fb      	ldr	r3, [r7, #28]
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b008      	add	sp, #32
 8002b28:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	08007d48 	.word	0x08007d48

08002b30 <max31331_set_date>:

int max31331_set_date(const max31331_ctx_t *ctx, uint8_t day, uint8_t date, uint8_t month, uint8_t century, uint8_t year) {
 8002b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	000c      	movs	r4, r1
 8002b3a:	0010      	movs	r0, r2
 8002b3c:	0019      	movs	r1, r3
 8002b3e:	1cfb      	adds	r3, r7, #3
 8002b40:	1c22      	adds	r2, r4, #0
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	1cbb      	adds	r3, r7, #2
 8002b46:	1c02      	adds	r2, r0, #0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	1c7b      	adds	r3, r7, #1
 8002b4c:	1c0a      	adds	r2, r1, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <max31331_set_date+0x2c>
 8002b56:	2301      	movs	r3, #1
 8002b58:	425b      	negs	r3, r3
 8002b5a:	e06b      	b.n	8002c34 <max31331_set_date+0x104>
    if (date < 1 || date > 31 || month < 1 || month > 12 || day < 1 || day > 7) return -2;
 8002b5c:	1cbb      	adds	r3, r7, #2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d013      	beq.n	8002b8c <max31331_set_date+0x5c>
 8002b64:	1cbb      	adds	r3, r7, #2
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b1f      	cmp	r3, #31
 8002b6a:	d80f      	bhi.n	8002b8c <max31331_set_date+0x5c>
 8002b6c:	1c7b      	adds	r3, r7, #1
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <max31331_set_date+0x5c>
 8002b74:	1c7b      	adds	r3, r7, #1
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b0c      	cmp	r3, #12
 8002b7a:	d807      	bhi.n	8002b8c <max31331_set_date+0x5c>
 8002b7c:	1cfb      	adds	r3, r7, #3
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d003      	beq.n	8002b8c <max31331_set_date+0x5c>
 8002b84:	1cfb      	adds	r3, r7, #3
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b07      	cmp	r3, #7
 8002b8a:	d902      	bls.n	8002b92 <max31331_set_date+0x62>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	425b      	negs	r3, r3
 8002b90:	e050      	b.n	8002c34 <max31331_set_date+0x104>

    uint8_t d   = (day                  << MAX31331_DAY_POS) & MAX31331_DAY_MSK;     // day register
 8002b92:	230f      	movs	r3, #15
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	1cfa      	adds	r2, r7, #3
 8002b98:	7812      	ldrb	r2, [r2, #0]
 8002b9a:	2107      	movs	r1, #7
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	701a      	strb	r2, [r3, #0]
    uint8_t dt  = (dec2bin_bcd(date)    << MAX31331_DATE_POS) & MAX31331_DATE_MSK;   // date register (bits 5:0)
 8002ba0:	1cbb      	adds	r3, r7, #2
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7ff fdfb 	bl	80027a0 <dec2bin_bcd>
 8002baa:	0003      	movs	r3, r0
 8002bac:	0019      	movs	r1, r3
 8002bae:	230e      	movs	r3, #14
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	223f      	movs	r2, #63	@ 0x3f
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	701a      	strb	r2, [r3, #0]
    uint8_t m   = ((dec2bin_bcd(month)  << MAX31331_MONTH_POS) & MAX31331_MONTH_MSK) // month register (bits 4:0)
 8002bb8:	1c7b      	adds	r3, r7, #1
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff fdef 	bl	80027a0 <dec2bin_bcd>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	230f      	movs	r3, #15
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b2d9      	uxtb	r1, r3
                  | ((century ? 1 : 0)  << MAX31331_CENT_POS);                       // century bit
 8002bcc:	2320      	movs	r3, #32
 8002bce:	2208      	movs	r2, #8
 8002bd0:	189b      	adds	r3, r3, r2
 8002bd2:	19db      	adds	r3, r3, r7
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <max31331_set_date+0xae>
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	e000      	b.n	8002be0 <max31331_set_date+0xb0>
 8002bde:	2300      	movs	r3, #0
    uint8_t m   = ((dec2bin_bcd(month)  << MAX31331_MONTH_POS) & MAX31331_MONTH_MSK) // month register (bits 4:0)
 8002be0:	250d      	movs	r5, #13
 8002be2:	197a      	adds	r2, r7, r5
 8002be4:	430b      	orrs	r3, r1
 8002be6:	7013      	strb	r3, [r2, #0]
    uint8_t y   = (dec2bin_bcd(year)    << MAX31331_YEAR_POS) & MAX31331_YEAR_MSK;   // year register
 8002be8:	260c      	movs	r6, #12
 8002bea:	19bc      	adds	r4, r7, r6
 8002bec:	2324      	movs	r3, #36	@ 0x24
 8002bee:	2208      	movs	r2, #8
 8002bf0:	189b      	adds	r3, r3, r2
 8002bf2:	19db      	adds	r3, r3, r7
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f7ff fdd2 	bl	80027a0 <dec2bin_bcd>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	7023      	strb	r3, [r4, #0]

    uint8_t set_date[] = {d, dt, m, y};
 8002c00:	2108      	movs	r1, #8
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	220f      	movs	r2, #15
 8002c06:	18ba      	adds	r2, r7, r2
 8002c08:	7812      	ldrb	r2, [r2, #0]
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	187b      	adds	r3, r7, r1
 8002c0e:	220e      	movs	r2, #14
 8002c10:	18ba      	adds	r2, r7, r2
 8002c12:	7812      	ldrb	r2, [r2, #0]
 8002c14:	705a      	strb	r2, [r3, #1]
 8002c16:	187b      	adds	r3, r7, r1
 8002c18:	197a      	adds	r2, r7, r5
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	709a      	strb	r2, [r3, #2]
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	19ba      	adds	r2, r7, r6
 8002c22:	7812      	ldrb	r2, [r2, #0]
 8002c24:	70da      	strb	r2, [r3, #3]

    return max31331_write_reg(ctx, MAX31331_DAY, set_date, sizeof(set_date));;
 8002c26:	187a      	adds	r2, r7, r1
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	2304      	movs	r3, #4
 8002c2c:	210b      	movs	r1, #11
 8002c2e:	f7ff fd6f 	bl	8002710 <max31331_write_reg>
 8002c32:	0003      	movs	r3, r0
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b005      	add	sp, #20
 8002c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c3c <max31331_get_date>:

int max31331_get_date(const max31331_ctx_t *ctx, uint8_t *day, uint8_t *date, uint8_t *month, uint8_t *century, uint8_t *year) {
 8002c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3e:	b089      	sub	sp, #36	@ 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
 8002c48:	603b      	str	r3, [r7, #0]
    if (!ctx || !day || !date || !month || !year) return -1;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <max31331_get_date+0x2c>
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <max31331_get_date+0x2c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d005      	beq.n	8002c68 <max31331_get_date+0x2c>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <max31331_get_date+0x2c>
 8002c62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d102      	bne.n	8002c6e <max31331_get_date+0x32>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	425b      	negs	r3, r3
 8002c6c:	e059      	b.n	8002d22 <max31331_get_date+0xe6>

    uint8_t regs[4] = {0};
 8002c6e:	2114      	movs	r1, #20
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
    int32_t ret = max31331_read_reg(ctx, MAX31331_DAY, regs, sizeof(regs));
 8002c76:	187a      	adds	r2, r7, r1
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	210b      	movs	r1, #11
 8002c7e:	f7ff fd19 	bl	80026b4 <max31331_read_reg>
 8002c82:	0003      	movs	r3, r0
 8002c84:	61fb      	str	r3, [r7, #28]
    if (ret != 0) return ret;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <max31331_get_date+0x54>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	e048      	b.n	8002d22 <max31331_get_date+0xe6>

    uint8_t d  = regs[0];   // day register
 8002c90:	201b      	movs	r0, #27
 8002c92:	183b      	adds	r3, r7, r0
 8002c94:	2114      	movs	r1, #20
 8002c96:	187a      	adds	r2, r7, r1
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	701a      	strb	r2, [r3, #0]
    uint8_t dt = regs[1];   // date register
 8002c9c:	251a      	movs	r5, #26
 8002c9e:	197b      	adds	r3, r7, r5
 8002ca0:	187a      	adds	r2, r7, r1
 8002ca2:	7852      	ldrb	r2, [r2, #1]
 8002ca4:	701a      	strb	r2, [r3, #0]
    uint8_t m  = regs[2];   // month + century bit
 8002ca6:	2419      	movs	r4, #25
 8002ca8:	193b      	adds	r3, r7, r4
 8002caa:	187a      	adds	r2, r7, r1
 8002cac:	7892      	ldrb	r2, [r2, #2]
 8002cae:	701a      	strb	r2, [r3, #0]
    uint8_t y  = regs[3];   // year register
 8002cb0:	2618      	movs	r6, #24
 8002cb2:	19bb      	adds	r3, r7, r6
 8002cb4:	187a      	adds	r2, r7, r1
 8002cb6:	78d2      	ldrb	r2, [r2, #3]
 8002cb8:	701a      	strb	r2, [r3, #0]

    *day     = bin2dec_bcd((d & MAX31331_DAY_MSK)   >> MAX31331_DAY_POS);
 8002cba:	183b      	adds	r3, r7, r0
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f7ff fd51 	bl	800276c <bin2dec_bcd>
 8002cca:	0003      	movs	r3, r0
 8002ccc:	001a      	movs	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	701a      	strb	r2, [r3, #0]
    *date    = bin2dec_bcd((dt & MAX31331_DATE_MSK) >> MAX31331_DATE_POS);  // lower 6 bits = date (1–31)
 8002cd2:	197b      	adds	r3, r7, r5
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	223f      	movs	r2, #63	@ 0x3f
 8002cd8:	4013      	ands	r3, r2
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff fd45 	bl	800276c <bin2dec_bcd>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	701a      	strb	r2, [r3, #0]
    *month   = bin2dec_bcd((m & MAX31331_MONTH_MSK) >> MAX31331_MONTH_POS); // lower 5 bits = month (1–12)
 8002cea:	193b      	adds	r3, r7, r4
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	220f      	movs	r2, #15
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7ff fd39 	bl	800276c <bin2dec_bcd>
 8002cfa:	0003      	movs	r3, r0
 8002cfc:	001a      	movs	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	701a      	strb	r2, [r3, #0]
    *century = (m & MAX31331_CENT_MSK) >> MAX31331_CENT_POS;
 8002d02:	193b      	adds	r3, r7, r4
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	09db      	lsrs	r3, r3, #7
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0c:	701a      	strb	r2, [r3, #0]
    *year    = bin2dec_bcd(y & MAX31331_YEAR_MSK) >> MAX31331_YEAR_POS;        // year (00–99)
 8002d0e:	19bb      	adds	r3, r7, r6
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7ff fd2a 	bl	800276c <bin2dec_bcd>
 8002d18:	0003      	movs	r3, r0
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d1e:	701a      	strb	r2, [r3, #0]

    return ret;
 8002d20:	69fb      	ldr	r3, [r7, #28]
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b009      	add	sp, #36	@ 0x24
 8002d28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d2a <max31331_set_clko>:

int max31331_set_clko(const max31331_ctx_t *ctx, uint8_t enable, uint8_t frequency) {
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	0008      	movs	r0, r1
 8002d34:	0011      	movs	r1, r2
 8002d36:	1cfb      	adds	r3, r7, #3
 8002d38:	1c02      	adds	r2, r0, #0
 8002d3a:	701a      	strb	r2, [r3, #0]
 8002d3c:	1cbb      	adds	r3, r7, #2
 8002d3e:	1c0a      	adds	r2, r1, #0
 8002d40:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d102      	bne.n	8002d4e <max31331_set_clko+0x24>
 8002d48:	2301      	movs	r3, #1
 8002d4a:	425b      	negs	r3, r3
 8002d4c:	e023      	b.n	8002d96 <max31331_set_clko+0x6c>

    uint8_t cfg = 0;
 8002d4e:	210f      	movs	r1, #15
 8002d50:	187b      	adds	r3, r7, r1
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
    cfg |= (frequency          << MAX31331_CONFIG2_CLKO_HZ_POS)     & MAX31331_CONFIG2_CLKO_HZ_MSK;
 8002d56:	1cbb      	adds	r3, r7, #2
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	187b      	adds	r3, r7, r1
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	701a      	strb	r2, [r3, #0]
    cfg |= ((enable ? 1 : 0)   << MAX31331_CONFIG2_CLKO_ENCLKO_POS) & MAX31331_CONFIG2_CLKO_ENCLKO_MSK;
 8002d6c:	1cfb      	adds	r3, r7, #3
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <max31331_set_clko+0x4e>
 8002d74:	2304      	movs	r3, #4
 8002d76:	e000      	b.n	8002d7a <max31331_set_clko+0x50>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	210f      	movs	r1, #15
 8002d7c:	187a      	adds	r2, r7, r1
 8002d7e:	7812      	ldrb	r2, [r2, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	187b      	adds	r3, r7, r1
 8002d86:	701a      	strb	r2, [r3, #0]

    return max31331_write_reg(ctx, MAX31331_RTC_CONFIG2, &cfg, 1);
 8002d88:	187a      	adds	r2, r7, r1
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	2104      	movs	r1, #4
 8002d90:	f7ff fcbe 	bl	8002710 <max31331_write_reg>
 8002d94:	0003      	movs	r3, r0
}
 8002d96:	0018      	movs	r0, r3
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b004      	add	sp, #16
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <max31331_set_timer_config>:
    ret = max31331_write_reg(ctx, MAX31331_OFFSET_HIGH, set_comp, sizeof(set_comp));

    return ret;
}

int max31331_set_timer_config(const max31331_ctx_t *ctx, uint8_t enable, uint8_t pause, uint8_t repeat, uint8_t frequency) {
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	000c      	movs	r4, r1
 8002da8:	0010      	movs	r0, r2
 8002daa:	0019      	movs	r1, r3
 8002dac:	1cfb      	adds	r3, r7, #3
 8002dae:	1c22      	adds	r2, r4, #0
 8002db0:	701a      	strb	r2, [r3, #0]
 8002db2:	1cbb      	adds	r3, r7, #2
 8002db4:	1c02      	adds	r2, r0, #0
 8002db6:	701a      	strb	r2, [r3, #0]
 8002db8:	1c7b      	adds	r3, r7, #1
 8002dba:	1c0a      	adds	r2, r1, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <max31331_set_timer_config+0x2c>
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	425b      	negs	r3, r3
 8002dc8:	e040      	b.n	8002e4c <max31331_set_timer_config+0xae>

    uint8_t tcfg = 0;
 8002dca:	210f      	movs	r1, #15
 8002dcc:	187b      	adds	r3, r7, r1
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]

    tcfg |= ((frequency & 0x03) << MAX31331_TIMER_CFG_TFRQ_POS)     & MAX31331_TIMER_CFG_TFRQ_MSK;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	4013      	ands	r3, r2
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	187b      	adds	r3, r7, r1
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	701a      	strb	r2, [r3, #0]
    tcfg |= ((enable ? 1 : 0)   << MAX31331_TIMER_CFG_TEN_POS)      & MAX31331_TIMER_CFG_TEN_MSK;
 8002dea:	1cfb      	adds	r3, r7, #3
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <max31331_set_timer_config+0x58>
 8002df2:	2310      	movs	r3, #16
 8002df4:	e000      	b.n	8002df8 <max31331_set_timer_config+0x5a>
 8002df6:	2300      	movs	r3, #0
 8002df8:	210f      	movs	r1, #15
 8002dfa:	187a      	adds	r2, r7, r1
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	187b      	adds	r3, r7, r1
 8002e04:	701a      	strb	r2, [r3, #0]
    tcfg |= ((repeat ? 1 : 0)   << MAX31331_TIMER_CFG_TRPT_POS)     & MAX31331_TIMER_CFG_TRPT_MSK;
 8002e06:	1c7b      	adds	r3, r7, #1
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <max31331_set_timer_config+0x74>
 8002e0e:	2304      	movs	r3, #4
 8002e10:	e000      	b.n	8002e14 <max31331_set_timer_config+0x76>
 8002e12:	2300      	movs	r3, #0
 8002e14:	210f      	movs	r1, #15
 8002e16:	187a      	adds	r2, r7, r1
 8002e18:	7812      	ldrb	r2, [r2, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	187b      	adds	r3, r7, r1
 8002e20:	701a      	strb	r2, [r3, #0]
    tcfg |= ((pause ? 1 : 0)    << MAX31331_TIMER_CFG_TPAUSE_POS)   & MAX31331_TIMER_CFG_TPAUSE_MSK;
 8002e22:	1cbb      	adds	r3, r7, #2
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <max31331_set_timer_config+0x90>
 8002e2a:	2308      	movs	r3, #8
 8002e2c:	e000      	b.n	8002e30 <max31331_set_timer_config+0x92>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	210f      	movs	r1, #15
 8002e32:	187a      	adds	r2, r7, r1
 8002e34:	7812      	ldrb	r2, [r2, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	187b      	adds	r3, r7, r1
 8002e3c:	701a      	strb	r2, [r3, #0]

    return max31331_write_reg(ctx, MAX31331_TIMER_CONFIG, &tcfg, 1);
 8002e3e:	187a      	adds	r2, r7, r1
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	2301      	movs	r3, #1
 8002e44:	2106      	movs	r1, #6
 8002e46:	f7ff fc63 	bl	8002710 <max31331_write_reg>
 8002e4a:	0003      	movs	r3, r0
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b005      	add	sp, #20
 8002e52:	bd90      	pop	{r4, r7, pc}

08002e54 <max31331_set_timer_init>:

int max31331_set_timer_init(const max31331_ctx_t *ctx, uint8_t val) {
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	000a      	movs	r2, r1
 8002e5e:	1cfb      	adds	r3, r7, #3
 8002e60:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <max31331_set_timer_init+0x1a>
 8002e68:	2301      	movs	r3, #1
 8002e6a:	425b      	negs	r3, r3
 8002e6c:	e006      	b.n	8002e7c <max31331_set_timer_init+0x28>
    return max31331_write_reg(ctx, MAX31331_TIMER_INIT, &val, 1);
 8002e6e:	1cfa      	adds	r2, r7, #3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	2301      	movs	r3, #1
 8002e74:	2119      	movs	r1, #25
 8002e76:	f7ff fc4b 	bl	8002710 <max31331_write_reg>
 8002e7a:	0003      	movs	r3, r0
}
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b002      	add	sp, #8
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <max31331_set_int_en>:

int max31331_set_int_en(const max31331_ctx_t *ctx, uint8_t DOSF, uint8_t PFAILE, uint8_t VBATLOWIE, uint8_t DIE, uint8_t TIE, uint8_t A2IE, uint8_t A1IE) {
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	000c      	movs	r4, r1
 8002e8e:	0010      	movs	r0, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	1cfb      	adds	r3, r7, #3
 8002e94:	1c22      	adds	r2, r4, #0
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	1cbb      	adds	r3, r7, #2
 8002e9a:	1c02      	adds	r2, r0, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	1c7b      	adds	r3, r7, #1
 8002ea0:	1c0a      	adds	r2, r1, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
    if (!ctx) return -1;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <max31331_set_int_en+0x2c>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	425b      	negs	r3, r3
 8002eae:	e070      	b.n	8002f92 <max31331_set_int_en+0x10e>

    uint8_t int_en = 0;
 8002eb0:	230f      	movs	r3, #15
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	701a      	strb	r2, [r3, #0]

    int_en |= ((DOSF      ? 1 : 0) << MAX31331_INT_EN_DOSF_POS)      & MAX31331_INT_EN_DOSF_MSK;
 8002eb8:	1cfb      	adds	r3, r7, #3
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <max31331_set_int_en+0x40>
 8002ec0:	2340      	movs	r3, #64	@ 0x40
 8002ec2:	e000      	b.n	8002ec6 <max31331_set_int_en+0x42>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	187a      	adds	r2, r7, r1
 8002eca:	7812      	ldrb	r2, [r2, #0]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	187b      	adds	r3, r7, r1
 8002ed2:	701a      	strb	r2, [r3, #0]
    int_en |= ((PFAILE    ? 1 : 0) << MAX31331_INT_EN_PFAILE_POS)    & MAX31331_INT_EN_PFAILE_MSK;
 8002ed4:	1cbb      	adds	r3, r7, #2
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <max31331_set_int_en+0x5c>
 8002edc:	2320      	movs	r3, #32
 8002ede:	e000      	b.n	8002ee2 <max31331_set_int_en+0x5e>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	210f      	movs	r1, #15
 8002ee4:	187a      	adds	r2, r7, r1
 8002ee6:	7812      	ldrb	r2, [r2, #0]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	187b      	adds	r3, r7, r1
 8002eee:	701a      	strb	r2, [r3, #0]
    int_en |= ((VBATLOWIE ? 1 : 0) << MAX31331_INT_EN_VBATLOWIE_POS) & MAX31331_INT_EN_VBATLOWIE_MSK;
 8002ef0:	1c7b      	adds	r3, r7, #1
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <max31331_set_int_en+0x78>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	e000      	b.n	8002efe <max31331_set_int_en+0x7a>
 8002efc:	2300      	movs	r3, #0
 8002efe:	210f      	movs	r1, #15
 8002f00:	187a      	adds	r2, r7, r1
 8002f02:	7812      	ldrb	r2, [r2, #0]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	187b      	adds	r3, r7, r1
 8002f0a:	701a      	strb	r2, [r3, #0]
    int_en |= ((DIE       ? 1 : 0) << MAX31331_INT_EN_DIE_POS)       & MAX31331_INT_EN_DIE_MSK;
 8002f0c:	2320      	movs	r3, #32
 8002f0e:	18fb      	adds	r3, r7, r3
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <max31331_set_int_en+0x96>
 8002f16:	2308      	movs	r3, #8
 8002f18:	e000      	b.n	8002f1c <max31331_set_int_en+0x98>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	210f      	movs	r1, #15
 8002f1e:	187a      	adds	r2, r7, r1
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	187b      	adds	r3, r7, r1
 8002f28:	701a      	strb	r2, [r3, #0]
    int_en |= ((TIE       ? 1 : 0) << MAX31331_INT_EN_TIE_POS)       & MAX31331_INT_EN_TIE_MSK;
 8002f2a:	2324      	movs	r3, #36	@ 0x24
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <max31331_set_int_en+0xb4>
 8002f34:	2304      	movs	r3, #4
 8002f36:	e000      	b.n	8002f3a <max31331_set_int_en+0xb6>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	187a      	adds	r2, r7, r1
 8002f3e:	7812      	ldrb	r2, [r2, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	187b      	adds	r3, r7, r1
 8002f46:	701a      	strb	r2, [r3, #0]
    int_en |= ((A2IE      ? 1 : 0) << MAX31331_INT_EN_A2IE_POS)      & MAX31331_INT_EN_A2IE_MSK;
 8002f48:	2328      	movs	r3, #40	@ 0x28
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <max31331_set_int_en+0xd2>
 8002f52:	2302      	movs	r3, #2
 8002f54:	e000      	b.n	8002f58 <max31331_set_int_en+0xd4>
 8002f56:	2300      	movs	r3, #0
 8002f58:	210f      	movs	r1, #15
 8002f5a:	187a      	adds	r2, r7, r1
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	187b      	adds	r3, r7, r1
 8002f64:	701a      	strb	r2, [r3, #0]
    int_en |= ((A1IE      ? 1 : 0) << MAX31331_INT_EN_A1IE_POS)      & MAX31331_INT_EN_A1IE_MSK;
 8002f66:	232c      	movs	r3, #44	@ 0x2c
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <max31331_set_int_en+0xf0>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <max31331_set_int_en+0xf2>
 8002f74:	2300      	movs	r3, #0
 8002f76:	210f      	movs	r1, #15
 8002f78:	187a      	adds	r2, r7, r1
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	701a      	strb	r2, [r3, #0]

    return max31331_write_reg(ctx, MAX31331_RTC_INT_EN, &int_en, 1);
 8002f84:	187a      	adds	r2, r7, r1
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	2301      	movs	r3, #1
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	f7ff fbc0 	bl	8002710 <max31331_write_reg>
 8002f90:	0003      	movs	r3, r0
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b005      	add	sp, #20
 8002f98:	bd90      	pop	{r4, r7, pc}

08002f9a <max31331_get_int_en>:

int max31331_get_int_en(const max31331_ctx_t *ctx, uint8_t *int_en) {
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
    if (!ctx) return -1;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d102      	bne.n	8002fb0 <max31331_get_int_en+0x16>
 8002faa:	2301      	movs	r3, #1
 8002fac:	425b      	negs	r3, r3
 8002fae:	e006      	b.n	8002fbe <max31331_get_int_en+0x24>

    return max31331_read_reg(ctx, MAX31331_RTC_INT_EN, int_en, 1);
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	f7ff fb7c 	bl	80026b4 <max31331_read_reg>
 8002fbc:	0003      	movs	r3, r0
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b002      	add	sp, #8
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fce:	4b0f      	ldr	r3, [pc, #60]	@ (800300c <HAL_MspInit+0x44>)
 8002fd0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800300c <HAL_MspInit+0x44>)
 8002fd4:	2180      	movs	r1, #128	@ 0x80
 8002fd6:	0549      	lsls	r1, r1, #21
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800300c <HAL_MspInit+0x44>)
 8002fde:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002fe0:	2380      	movs	r3, #128	@ 0x80
 8002fe2:	055b      	lsls	r3, r3, #21
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	607b      	str	r3, [r7, #4]
 8002fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	4b08      	ldr	r3, [pc, #32]	@ (800300c <HAL_MspInit+0x44>)
 8002fec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fee:	4b07      	ldr	r3, [pc, #28]	@ (800300c <HAL_MspInit+0x44>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002ff6:	4b05      	ldr	r3, [pc, #20]	@ (800300c <HAL_MspInit+0x44>)
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b002      	add	sp, #8
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	40021000 	.word	0x40021000

08003010 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b099      	sub	sp, #100	@ 0x64
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003018:	234c      	movs	r3, #76	@ 0x4c
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	0018      	movs	r0, r3
 800301e:	2314      	movs	r3, #20
 8003020:	001a      	movs	r2, r3
 8003022:	2100      	movs	r1, #0
 8003024:	f004 fe58 	bl	8007cd8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003028:	2414      	movs	r4, #20
 800302a:	193b      	adds	r3, r7, r4
 800302c:	0018      	movs	r0, r3
 800302e:	2338      	movs	r3, #56	@ 0x38
 8003030:	001a      	movs	r2, r3
 8003032:	2100      	movs	r1, #0
 8003034:	f004 fe50 	bl	8007cd8 <memset>
  if(hi2c->Instance==I2C3)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a3b      	ldr	r2, [pc, #236]	@ (800312c <HAL_I2C_MspInit+0x11c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d16f      	bne.n	8003122 <HAL_I2C_MspInit+0x112>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003042:	193b      	adds	r3, r7, r4
 8003044:	2240      	movs	r2, #64	@ 0x40
 8003046:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003048:	193b      	adds	r3, r7, r4
 800304a:	2200      	movs	r2, #0
 800304c:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800304e:	193b      	adds	r3, r7, r4
 8003050:	0018      	movs	r0, r3
 8003052:	f004 f9d7 	bl	8007404 <HAL_RCCEx_PeriphCLKConfig>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800305a:	f7ff fb25 	bl	80026a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800305e:	4b34      	ldr	r3, [pc, #208]	@ (8003130 <HAL_I2C_MspInit+0x120>)
 8003060:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003062:	4b33      	ldr	r3, [pc, #204]	@ (8003130 <HAL_I2C_MspInit+0x120>)
 8003064:	2101      	movs	r1, #1
 8003066:	430a      	orrs	r2, r1
 8003068:	64da      	str	r2, [r3, #76]	@ 0x4c
 800306a:	4b31      	ldr	r3, [pc, #196]	@ (8003130 <HAL_I2C_MspInit+0x120>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306e:	2201      	movs	r2, #1
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
 8003074:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA6     ------> I2C3_SDA
    PA7     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003076:	214c      	movs	r1, #76	@ 0x4c
 8003078:	187b      	adds	r3, r7, r1
 800307a:	22c0      	movs	r2, #192	@ 0xc0
 800307c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2212      	movs	r2, #18
 8003082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	187b      	adds	r3, r7, r1
 8003086:	2200      	movs	r2, #0
 8003088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	187b      	adds	r3, r7, r1
 800308c:	2200      	movs	r2, #0
 800308e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003090:	187b      	adds	r3, r7, r1
 8003092:	2204      	movs	r2, #4
 8003094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003096:	187a      	adds	r2, r7, r1
 8003098:	23a0      	movs	r3, #160	@ 0xa0
 800309a:	05db      	lsls	r3, r3, #23
 800309c:	0011      	movs	r1, r2
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 fd72 	bl	8003b88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80030a4:	4b22      	ldr	r3, [pc, #136]	@ (8003130 <HAL_I2C_MspInit+0x120>)
 80030a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030a8:	4b21      	ldr	r3, [pc, #132]	@ (8003130 <HAL_I2C_MspInit+0x120>)
 80030aa:	2180      	movs	r1, #128	@ 0x80
 80030ac:	0409      	lsls	r1, r1, #16
 80030ae:	430a      	orrs	r2, r1
 80030b0:	659a      	str	r2, [r3, #88]	@ 0x58
 80030b2:	4b1f      	ldr	r3, [pc, #124]	@ (8003130 <HAL_I2C_MspInit+0x120>)
 80030b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030b6:	2380      	movs	r3, #128	@ 0x80
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	4013      	ands	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]

    /* I2C3 DMA Init */
    /* I2C3_RX Init */
    hdma_i2c3_rx.Instance = DMA1_Channel1;
 80030c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030c2:	4a1d      	ldr	r2, [pc, #116]	@ (8003138 <HAL_I2C_MspInit+0x128>)
 80030c4:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Request = DMA_REQUEST_I2C3_RX;
 80030c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030c8:	220d      	movs	r2, #13
 80030ca:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d2:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030d8:	4b16      	ldr	r3, [pc, #88]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030de:	4b15      	ldr	r3, [pc, #84]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030e4:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80030ea:	4b12      	ldr	r3, [pc, #72]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030f0:	4b10      	ldr	r3, [pc, #64]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80030f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fa7d 	bl	80035f8 <HAL_DMA_Init>
 80030fe:	1e03      	subs	r3, r0, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8003102:	f7ff fad1 	bl	80026a8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a0a      	ldr	r2, [pc, #40]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 800310a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HAL_I2C_MspInit+0x124>)
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_3_IRQn, 0, 0);
 8003112:	2200      	movs	r2, #0
 8003114:	2100      	movs	r1, #0
 8003116:	2018      	movs	r0, #24
 8003118:	f000 fa3c 	bl	8003594 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_3_IRQn);
 800311c:	2018      	movs	r0, #24
 800311e:	f000 fa4e 	bl	80035be <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b019      	add	sp, #100	@ 0x64
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	40008800 	.word	0x40008800
 8003130:	40021000 	.word	0x40021000
 8003134:	20000090 	.word	0x20000090
 8003138:	40020008 	.word	0x40020008

0800313c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b093      	sub	sp, #76	@ 0x4c
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003144:	2410      	movs	r4, #16
 8003146:	193b      	adds	r3, r7, r4
 8003148:	0018      	movs	r0, r3
 800314a:	2338      	movs	r3, #56	@ 0x38
 800314c:	001a      	movs	r2, r3
 800314e:	2100      	movs	r1, #0
 8003150:	f004 fdc2 	bl	8007cd8 <memset>
  if(hrtc->Instance==RTC)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a16      	ldr	r2, [pc, #88]	@ (80031b4 <HAL_RTC_MspInit+0x78>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d126      	bne.n	80031ac <HAL_RTC_MspInit+0x70>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800315e:	193b      	adds	r3, r7, r4
 8003160:	2280      	movs	r2, #128	@ 0x80
 8003162:	0212      	lsls	r2, r2, #8
 8003164:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003166:	193b      	adds	r3, r7, r4
 8003168:	2280      	movs	r2, #128	@ 0x80
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800316e:	193b      	adds	r3, r7, r4
 8003170:	0018      	movs	r0, r3
 8003172:	f004 f947 	bl	8007404 <HAL_RCCEx_PeriphCLKConfig>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d001      	beq.n	800317e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800317a:	f7ff fa95 	bl	80026a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800317e:	4a0e      	ldr	r2, [pc, #56]	@ (80031b8 <HAL_RTC_MspInit+0x7c>)
 8003180:	2390      	movs	r3, #144	@ 0x90
 8003182:	58d3      	ldr	r3, [r2, r3]
 8003184:	490c      	ldr	r1, [pc, #48]	@ (80031b8 <HAL_RTC_MspInit+0x7c>)
 8003186:	2280      	movs	r2, #128	@ 0x80
 8003188:	0212      	lsls	r2, r2, #8
 800318a:	4313      	orrs	r3, r2
 800318c:	2290      	movs	r2, #144	@ 0x90
 800318e:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003190:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_RTC_MspInit+0x7c>)
 8003192:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003194:	4b08      	ldr	r3, [pc, #32]	@ (80031b8 <HAL_RTC_MspInit+0x7c>)
 8003196:	2180      	movs	r1, #128	@ 0x80
 8003198:	00c9      	lsls	r1, r1, #3
 800319a:	430a      	orrs	r2, r1
 800319c:	659a      	str	r2, [r3, #88]	@ 0x58
 800319e:	4b06      	ldr	r3, [pc, #24]	@ (80031b8 <HAL_RTC_MspInit+0x7c>)
 80031a0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4013      	ands	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b013      	add	sp, #76	@ 0x4c
 80031b2:	bd90      	pop	{r4, r7, pc}
 80031b4:	40002800 	.word	0x40002800
 80031b8:	40021000 	.word	0x40021000

080031bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c0:	46c0      	nop			@ (mov r8, r8)
 80031c2:	e7fd      	b.n	80031c0 <NMI_Handler+0x4>

080031c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031c8:	46c0      	nop			@ (mov r8, r8)
 80031ca:	e7fd      	b.n	80031c8 <HardFault_Handler+0x4>

080031cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031da:	46c0      	nop			@ (mov r8, r8)
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031e4:	f000 f8ee 	bl	80033c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031e8:	46c0      	nop			@ (mov r8, r8)
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 80031f2:	2001      	movs	r0, #1
 80031f4:	f000 ff2a 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80031f8:	46c0      	nop			@ (mov r8, r8)
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */
  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 8003202:	2004      	movs	r0, #4
 8003204:	f000 ff22 	bl	800404c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */
  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003208:	46c0      	nop			@ (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
	...

08003210 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8003214:	4b03      	ldr	r3, [pc, #12]	@ (8003224 <DMA1_Channel1_IRQHandler+0x14>)
 8003216:	0018      	movs	r0, r3
 8003218:	f000 fb68 	bl	80038ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800321c:	46c0      	nop			@ (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	20000090 	.word	0x20000090

08003228 <I2C2_3_IRQHandler>:

/**
  * @brief This function handles I2C2 + I2C3 global interrupt (combined with EXTI 22).
  */
void I2C2_3_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_3_IRQn 0 */

  /* USER CODE END I2C2_3_IRQn 0 */
  if (hi2c3.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800322c:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <I2C2_3_IRQHandler+0x2c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	23e0      	movs	r3, #224	@ 0xe0
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4013      	ands	r3, r2
 8003238:	d004      	beq.n	8003244 <I2C2_3_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c3);
 800323a:	4b06      	ldr	r3, [pc, #24]	@ (8003254 <I2C2_3_IRQHandler+0x2c>)
 800323c:	0018      	movs	r0, r3
 800323e:	f001 fb51 	bl	80048e4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c3);
  }
  /* USER CODE BEGIN I2C2_3_IRQn 1 */

  /* USER CODE END I2C2_3_IRQn 1 */
}
 8003242:	e003      	b.n	800324c <I2C2_3_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c3);
 8003244:	4b03      	ldr	r3, [pc, #12]	@ (8003254 <I2C2_3_IRQHandler+0x2c>)
 8003246:	0018      	movs	r0, r3
 8003248:	f001 fb32 	bl	80048b0 <HAL_I2C_EV_IRQHandler>
}
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	2000003c 	.word	0x2000003c

08003258 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800325e:	4b12      	ldr	r3, [pc, #72]	@ (80032a8 <SystemInit+0x50>)
 8003260:	2280      	movs	r2, #128	@ 0x80
 8003262:	0512      	lsls	r2, r2, #20
 8003264:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8003266:	4a11      	ldr	r2, [pc, #68]	@ (80032ac <SystemInit+0x54>)
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	58d3      	ldr	r3, [r2, r3]
 800326c:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 800326e:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <SystemInit+0x54>)
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	2380      	movs	r3, #128	@ 0x80
 8003278:	025b      	lsls	r3, r3, #9
 800327a:	4013      	ands	r3, r2
 800327c:	d010      	beq.n	80032a0 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	22ff      	movs	r2, #255	@ 0xff
 8003282:	4013      	ands	r3, r2
 8003284:	2bcc      	cmp	r3, #204	@ 0xcc
 8003286:	d00b      	beq.n	80032a0 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	22ff      	movs	r2, #255	@ 0xff
 800328c:	4013      	ands	r3, r2
 800328e:	2baa      	cmp	r3, #170	@ 0xaa
 8003290:	d006      	beq.n	80032a0 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <SystemInit+0x54>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b05      	ldr	r3, [pc, #20]	@ (80032ac <SystemInit+0x54>)
 8003298:	2180      	movs	r1, #128	@ 0x80
 800329a:	02c9      	lsls	r1, r1, #11
 800329c:	430a      	orrs	r2, r1
 800329e:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	46bd      	mov	sp, r7
 80032a4:	b002      	add	sp, #8
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	e000ed00 	.word	0xe000ed00
 80032ac:	40022000 	.word	0x40022000

080032b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80032b0:	480d      	ldr	r0, [pc, #52]	@ (80032e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80032b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80032b4:	f7ff ffd0 	bl	8003258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032b8:	480c      	ldr	r0, [pc, #48]	@ (80032ec <LoopForever+0x6>)
  ldr r1, =_edata
 80032ba:	490d      	ldr	r1, [pc, #52]	@ (80032f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032bc:	4a0d      	ldr	r2, [pc, #52]	@ (80032f4 <LoopForever+0xe>)
  movs r3, #0
 80032be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c0:	e002      	b.n	80032c8 <LoopCopyDataInit>

080032c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032c6:	3304      	adds	r3, #4

080032c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032cc:	d3f9      	bcc.n	80032c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ce:	4a0a      	ldr	r2, [pc, #40]	@ (80032f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d0:	4c0a      	ldr	r4, [pc, #40]	@ (80032fc <LoopForever+0x16>)
  movs r3, #0
 80032d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d4:	e001      	b.n	80032da <LoopFillZerobss>

080032d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032d8:	3204      	adds	r2, #4

080032da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032dc:	d3fb      	bcc.n	80032d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80032de:	f004 fd03 	bl	8007ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80032e2:	f7fe f9df 	bl	80016a4 <main>

080032e6 <LoopForever>:

LoopForever:
  b LoopForever
 80032e6:	e7fe      	b.n	80032e6 <LoopForever>
  ldr   r0, =_estack
 80032e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80032ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80032f4:	08007d94 	.word	0x08007d94
  ldr r2, =_sbss
 80032f8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80032fc:	200001c0 	.word	0x200001c0

08003300 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003300:	e7fe      	b.n	8003300 <ADC_COMP1_IRQHandler>

08003302 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003308:	1dfb      	adds	r3, r7, #7
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800330e:	2003      	movs	r0, #3
 8003310:	f000 f80e 	bl	8003330 <HAL_InitTick>
 8003314:	1e03      	subs	r3, r0, #0
 8003316:	d003      	beq.n	8003320 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e001      	b.n	8003324 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003320:	f7ff fe52 	bl	8002fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	781b      	ldrb	r3, [r3, #0]
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b002      	add	sp, #8
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003330:	b590      	push	{r4, r7, lr}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003338:	230f      	movs	r3, #15
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	2200      	movs	r2, #0
 800333e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8003340:	4b1d      	ldr	r3, [pc, #116]	@ (80033b8 <HAL_InitTick+0x88>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02b      	beq.n	80033a0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003348:	4b1c      	ldr	r3, [pc, #112]	@ (80033bc <HAL_InitTick+0x8c>)
 800334a:	681c      	ldr	r4, [r3, #0]
 800334c:	4b1a      	ldr	r3, [pc, #104]	@ (80033b8 <HAL_InitTick+0x88>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0019      	movs	r1, r3
 8003352:	23fa      	movs	r3, #250	@ 0xfa
 8003354:	0098      	lsls	r0, r3, #2
 8003356:	f7fc fed7 	bl	8000108 <__udivsi3>
 800335a:	0003      	movs	r3, r0
 800335c:	0019      	movs	r1, r3
 800335e:	0020      	movs	r0, r4
 8003360:	f7fc fed2 	bl	8000108 <__udivsi3>
 8003364:	0003      	movs	r3, r0
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f939 	bl	80035de <HAL_SYSTICK_Config>
 800336c:	1e03      	subs	r3, r0, #0
 800336e:	d112      	bne.n	8003396 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d80a      	bhi.n	800338c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	2301      	movs	r3, #1
 800337a:	425b      	negs	r3, r3
 800337c:	2200      	movs	r2, #0
 800337e:	0018      	movs	r0, r3
 8003380:	f000 f908 	bl	8003594 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003384:	4b0e      	ldr	r3, [pc, #56]	@ (80033c0 <HAL_InitTick+0x90>)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e00d      	b.n	80033a8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800338c:	230f      	movs	r3, #15
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	e008      	b.n	80033a8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	2201      	movs	r2, #1
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	e003      	b.n	80033a8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033a0:	230f      	movs	r3, #15
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80033a8:	230f      	movs	r3, #15
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	781b      	ldrb	r3, [r3, #0]
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b005      	add	sp, #20
 80033b4:	bd90      	pop	{r4, r7, pc}
 80033b6:	46c0      	nop			@ (mov r8, r8)
 80033b8:	2000001c 	.word	0x2000001c
 80033bc:	20000014 	.word	0x20000014
 80033c0:	20000018 	.word	0x20000018

080033c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c8:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <HAL_IncTick+0x18>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	4b04      	ldr	r3, [pc, #16]	@ (80033e0 <HAL_IncTick+0x1c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	18d2      	adds	r2, r2, r3
 80033d2:	4b02      	ldr	r3, [pc, #8]	@ (80033dc <HAL_IncTick+0x18>)
 80033d4:	601a      	str	r2, [r3, #0]
}
 80033d6:	46c0      	nop			@ (mov r8, r8)
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	200001bc 	.word	0x200001bc
 80033e0:	2000001c 	.word	0x2000001c

080033e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  return uwTick;
 80033e8:	4b02      	ldr	r3, [pc, #8]	@ (80033f4 <HAL_GetTick+0x10>)
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			@ (mov r8, r8)
 80033f4:	200001bc 	.word	0x200001bc

080033f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff fff0 	bl	80033e4 <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3301      	adds	r3, #1
 8003410:	d004      	beq.n	800341c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003412:	4b09      	ldr	r3, [pc, #36]	@ (8003438 <HAL_Delay+0x40>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	18d3      	adds	r3, r2, r3
 800341a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	f7ff ffe1 	bl	80033e4 <HAL_GetTick>
 8003422:	0002      	movs	r2, r0
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	429a      	cmp	r2, r3
 800342c:	d8f7      	bhi.n	800341e <HAL_Delay+0x26>
  {
  }
}
 800342e:	46c0      	nop			@ (mov r8, r8)
 8003430:	46c0      	nop			@ (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b004      	add	sp, #16
 8003436:	bd80      	pop	{r7, pc}
 8003438:	2000001c 	.word	0x2000001c

0800343c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	0002      	movs	r2, r0
 8003444:	1dfb      	adds	r3, r7, #7
 8003446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003448:	1dfb      	adds	r3, r7, #7
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b7f      	cmp	r3, #127	@ 0x7f
 800344e:	d809      	bhi.n	8003464 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003450:	1dfb      	adds	r3, r7, #7
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	001a      	movs	r2, r3
 8003456:	231f      	movs	r3, #31
 8003458:	401a      	ands	r2, r3
 800345a:	4b04      	ldr	r3, [pc, #16]	@ (800346c <__NVIC_EnableIRQ+0x30>)
 800345c:	2101      	movs	r1, #1
 800345e:	4091      	lsls	r1, r2
 8003460:	000a      	movs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}
 800346c:	e000e100 	.word	0xe000e100

08003470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	0002      	movs	r2, r0
 8003478:	6039      	str	r1, [r7, #0]
 800347a:	1dfb      	adds	r3, r7, #7
 800347c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800347e:	1dfb      	adds	r3, r7, #7
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b7f      	cmp	r3, #127	@ 0x7f
 8003484:	d828      	bhi.n	80034d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003486:	4a2f      	ldr	r2, [pc, #188]	@ (8003544 <__NVIC_SetPriority+0xd4>)
 8003488:	1dfb      	adds	r3, r7, #7
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b25b      	sxtb	r3, r3
 800348e:	089b      	lsrs	r3, r3, #2
 8003490:	33c0      	adds	r3, #192	@ 0xc0
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	589b      	ldr	r3, [r3, r2]
 8003496:	1dfa      	adds	r2, r7, #7
 8003498:	7812      	ldrb	r2, [r2, #0]
 800349a:	0011      	movs	r1, r2
 800349c:	2203      	movs	r2, #3
 800349e:	400a      	ands	r2, r1
 80034a0:	00d2      	lsls	r2, r2, #3
 80034a2:	21ff      	movs	r1, #255	@ 0xff
 80034a4:	4091      	lsls	r1, r2
 80034a6:	000a      	movs	r2, r1
 80034a8:	43d2      	mvns	r2, r2
 80034aa:	401a      	ands	r2, r3
 80034ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	22ff      	movs	r2, #255	@ 0xff
 80034b4:	401a      	ands	r2, r3
 80034b6:	1dfb      	adds	r3, r7, #7
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	0018      	movs	r0, r3
 80034bc:	2303      	movs	r3, #3
 80034be:	4003      	ands	r3, r0
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034c4:	481f      	ldr	r0, [pc, #124]	@ (8003544 <__NVIC_SetPriority+0xd4>)
 80034c6:	1dfb      	adds	r3, r7, #7
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b25b      	sxtb	r3, r3
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	430a      	orrs	r2, r1
 80034d0:	33c0      	adds	r3, #192	@ 0xc0
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80034d6:	e031      	b.n	800353c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80034d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003548 <__NVIC_SetPriority+0xd8>)
 80034da:	1dfb      	adds	r3, r7, #7
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	0019      	movs	r1, r3
 80034e0:	230f      	movs	r3, #15
 80034e2:	400b      	ands	r3, r1
 80034e4:	3b08      	subs	r3, #8
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	3306      	adds	r3, #6
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	18d3      	adds	r3, r2, r3
 80034ee:	3304      	adds	r3, #4
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1dfa      	adds	r2, r7, #7
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	0011      	movs	r1, r2
 80034f8:	2203      	movs	r2, #3
 80034fa:	400a      	ands	r2, r1
 80034fc:	00d2      	lsls	r2, r2, #3
 80034fe:	21ff      	movs	r1, #255	@ 0xff
 8003500:	4091      	lsls	r1, r2
 8003502:	000a      	movs	r2, r1
 8003504:	43d2      	mvns	r2, r2
 8003506:	401a      	ands	r2, r3
 8003508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	019b      	lsls	r3, r3, #6
 800350e:	22ff      	movs	r2, #255	@ 0xff
 8003510:	401a      	ands	r2, r3
 8003512:	1dfb      	adds	r3, r7, #7
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	0018      	movs	r0, r3
 8003518:	2303      	movs	r3, #3
 800351a:	4003      	ands	r3, r0
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003520:	4809      	ldr	r0, [pc, #36]	@ (8003548 <__NVIC_SetPriority+0xd8>)
 8003522:	1dfb      	adds	r3, r7, #7
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	001c      	movs	r4, r3
 8003528:	230f      	movs	r3, #15
 800352a:	4023      	ands	r3, r4
 800352c:	3b08      	subs	r3, #8
 800352e:	089b      	lsrs	r3, r3, #2
 8003530:	430a      	orrs	r2, r1
 8003532:	3306      	adds	r3, #6
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	18c3      	adds	r3, r0, r3
 8003538:	3304      	adds	r3, #4
 800353a:	601a      	str	r2, [r3, #0]
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b003      	add	sp, #12
 8003542:	bd90      	pop	{r4, r7, pc}
 8003544:	e000e100 	.word	0xe000e100
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	1e5a      	subs	r2, r3, #1
 8003558:	2380      	movs	r3, #128	@ 0x80
 800355a:	045b      	lsls	r3, r3, #17
 800355c:	429a      	cmp	r2, r3
 800355e:	d301      	bcc.n	8003564 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003560:	2301      	movs	r3, #1
 8003562:	e010      	b.n	8003586 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003564:	4b0a      	ldr	r3, [pc, #40]	@ (8003590 <SysTick_Config+0x44>)
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	3a01      	subs	r2, #1
 800356a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356c:	2301      	movs	r3, #1
 800356e:	425b      	negs	r3, r3
 8003570:	2103      	movs	r1, #3
 8003572:	0018      	movs	r0, r3
 8003574:	f7ff ff7c 	bl	8003470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <SysTick_Config+0x44>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <SysTick_Config+0x44>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003584:	2300      	movs	r3, #0
}
 8003586:	0018      	movs	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	b002      	add	sp, #8
 800358c:	bd80      	pop	{r7, pc}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	210f      	movs	r1, #15
 80035a0:	187b      	adds	r3, r7, r1
 80035a2:	1c02      	adds	r2, r0, #0
 80035a4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	0011      	movs	r1, r2
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff ff5d 	bl	8003470 <__NVIC_SetPriority>
}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	46bd      	mov	sp, r7
 80035ba:	b004      	add	sp, #16
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32u0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	0002      	movs	r2, r0
 80035c6:	1dfb      	adds	r3, r7, #7
 80035c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ca:	1dfb      	adds	r3, r7, #7
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	0018      	movs	r0, r3
 80035d2:	f7ff ff33 	bl	800343c <__NVIC_EnableIRQ>
}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff ffaf 	bl	800354c <SysTick_Config>
 80035ee:	0003      	movs	r3, r0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e077      	b.n	80036fa <HAL_DMA_Init+0x102>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / \
                          ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a3d      	ldr	r2, [pc, #244]	@ (8003704 <HAL_DMA_Init+0x10c>)
 8003610:	4694      	mov	ip, r2
 8003612:	4463      	add	r3, ip
 8003614:	2114      	movs	r1, #20
 8003616:	0018      	movs	r0, r3
 8003618:	f7fc fd76 	bl	8000108 <__udivsi3>
 800361c:	0003      	movs	r3, r0
                        ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800361e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / \
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2225      	movs	r2, #37	@ 0x25
 8003628:	2102      	movs	r1, #2
 800362a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4934      	ldr	r1, [pc, #208]	@ (8003708 <HAL_DMA_Init+0x110>)
 8003638:	400a      	ands	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	431a      	orrs	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	0018      	movs	r0, r3
 8003676:	f000 fa37 	bl	8003ae8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	2380      	movs	r3, #128	@ 0x80
 8003680:	01db      	lsls	r3, r3, #7
 8003682:	429a      	cmp	r2, r3
 8003684:	d102      	bne.n	800368c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	21ff      	movs	r1, #255	@ 0xff
 8003696:	400a      	ands	r2, r1
 8003698:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80036a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d011      	beq.n	80036d0 <HAL_DMA_Init+0xd8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d80d      	bhi.n	80036d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	0018      	movs	r0, r3
 80036b8:	f000 fa42 	bl	8003b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	e008      	b.n	80036e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2225      	movs	r2, #37	@ 0x25
 80036ec:	2101      	movs	r1, #1
 80036ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2224      	movs	r2, #36	@ 0x24
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b002      	add	sp, #8
 8003700:	bd80      	pop	{r7, pc}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	bffdfff8 	.word	0xbffdfff8
 8003708:	ffff800f 	.word	0xffff800f

0800370c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2317      	movs	r3, #23
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2224      	movs	r2, #36	@ 0x24
 8003726:	5c9b      	ldrb	r3, [r3, r2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_DMA_Start_IT+0x24>
 800372c:	2302      	movs	r3, #2
 800372e:	e06f      	b.n	8003810 <HAL_DMA_Start_IT+0x104>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2224      	movs	r2, #36	@ 0x24
 8003734:	2101      	movs	r1, #1
 8003736:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2225      	movs	r2, #37	@ 0x25
 800373c:	5c9b      	ldrb	r3, [r3, r2]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d157      	bne.n	80037f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2225      	movs	r2, #37	@ 0x25
 8003748:	2102      	movs	r1, #2
 800374a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	438a      	bics	r2, r1
 8003760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	68b9      	ldr	r1, [r7, #8]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f97d 	bl	8003a68 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	210e      	movs	r1, #14
 8003782:	430a      	orrs	r2, r1
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e00f      	b.n	80037a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2104      	movs	r1, #4
 8003794:	438a      	bics	r2, r1
 8003796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	210a      	movs	r1, #10
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	2380      	movs	r3, #128	@ 0x80
 80037b0:	025b      	lsls	r3, r3, #9
 80037b2:	4013      	ands	r3, r2
 80037b4:	d008      	beq.n	80037c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c0:	2180      	movs	r1, #128	@ 0x80
 80037c2:	0049      	lsls	r1, r1, #1
 80037c4:	430a      	orrs	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037da:	2180      	movs	r1, #128	@ 0x80
 80037dc:	0049      	lsls	r1, r1, #1
 80037de:	430a      	orrs	r2, r1
 80037e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	430a      	orrs	r2, r1
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e00a      	b.n	800380a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2280      	movs	r2, #128	@ 0x80
 80037f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2224      	movs	r2, #36	@ 0x24
 80037fe:	2100      	movs	r1, #0
 8003800:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003802:	2317      	movs	r3, #23
 8003804:	18fb      	adds	r3, r7, r3
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800380a:	2317      	movs	r3, #23
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	781b      	ldrb	r3, [r3, #0]
}
 8003810:	0018      	movs	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	b006      	add	sp, #24
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003820:	210f      	movs	r1, #15
 8003822:	187b      	adds	r3, r7, r1
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2225      	movs	r2, #37	@ 0x25
 800382c:	5c9b      	ldrb	r3, [r3, r2]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d006      	beq.n	8003842 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2204      	movs	r2, #4
 8003838:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800383a:	187b      	adds	r3, r7, r1
 800383c:	2201      	movs	r2, #1
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e049      	b.n	80038d6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	210e      	movs	r1, #14
 800384e:	438a      	bics	r2, r1
 8003850:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	438a      	bics	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	491d      	ldr	r1, [pc, #116]	@ (80038e4 <HAL_DMA_Abort_IT+0xcc>)
 800386e:	400a      	ands	r2, r1
 8003870:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003872:	4b1d      	ldr	r3, [pc, #116]	@ (80038e8 <HAL_DMA_Abort_IT+0xd0>)
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	221c      	movs	r2, #28
 800387c:	4013      	ands	r3, r2
 800387e:	2201      	movs	r2, #1
 8003880:	409a      	lsls	r2, r3
 8003882:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <HAL_DMA_Abort_IT+0xd0>)
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003890:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a4:	490f      	ldr	r1, [pc, #60]	@ (80038e4 <HAL_DMA_Abort_IT+0xcc>)
 80038a6:	400a      	ands	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80038b2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2225      	movs	r2, #37	@ 0x25
 80038b8:	2101      	movs	r1, #1
 80038ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2224      	movs	r2, #36	@ 0x24
 80038c0:	2100      	movs	r1, #0
 80038c2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d004      	beq.n	80038d6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	0010      	movs	r0, r2
 80038d4:	4798      	blx	r3
    }
  }
  return status;
 80038d6:	230f      	movs	r3, #15
 80038d8:	18fb      	adds	r3, r7, r3
 80038da:	781b      	ldrb	r3, [r3, #0]
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b004      	add	sp, #16
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	fffffeff 	.word	0xfffffeff
 80038e8:	40020000 	.word	0x40020000

080038ec <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80038f4:	4b55      	ldr	r3, [pc, #340]	@ (8003a4c <HAL_DMA_IRQHandler+0x160>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	221c      	movs	r2, #28
 8003908:	4013      	ands	r3, r2
 800390a:	2204      	movs	r2, #4
 800390c:	409a      	lsls	r2, r3
 800390e:	0013      	movs	r3, r2
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4013      	ands	r3, r2
 8003914:	d027      	beq.n	8003966 <HAL_DMA_IRQHandler+0x7a>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2204      	movs	r2, #4
 800391a:	4013      	ands	r3, r2
 800391c:	d023      	beq.n	8003966 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2220      	movs	r2, #32
 8003926:	4013      	ands	r3, r2
 8003928:	d107      	bne.n	800393a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2104      	movs	r1, #4
 8003936:	438a      	bics	r2, r1
 8003938:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800393a:	4b44      	ldr	r3, [pc, #272]	@ (8003a4c <HAL_DMA_IRQHandler+0x160>)
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	221c      	movs	r2, #28
 8003944:	4013      	ands	r3, r2
 8003946:	2204      	movs	r2, #4
 8003948:	409a      	lsls	r2, r3
 800394a:	4b40      	ldr	r3, [pc, #256]	@ (8003a4c <HAL_DMA_IRQHandler+0x160>)
 800394c:	430a      	orrs	r2, r1
 800394e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003954:	2b00      	cmp	r3, #0
 8003956:	d100      	bne.n	800395a <HAL_DMA_IRQHandler+0x6e>
 8003958:	e073      	b.n	8003a42 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	0010      	movs	r0, r2
 8003962:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003964:	e06d      	b.n	8003a42 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	221c      	movs	r2, #28
 800396c:	4013      	ands	r3, r2
 800396e:	2202      	movs	r2, #2
 8003970:	409a      	lsls	r2, r3
 8003972:	0013      	movs	r3, r2
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4013      	ands	r3, r2
 8003978:	d02e      	beq.n	80039d8 <HAL_DMA_IRQHandler+0xec>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2202      	movs	r2, #2
 800397e:	4013      	ands	r3, r2
 8003980:	d02a      	beq.n	80039d8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2220      	movs	r2, #32
 800398a:	4013      	ands	r3, r2
 800398c:	d10b      	bne.n	80039a6 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	210a      	movs	r1, #10
 800399a:	438a      	bics	r2, r1
 800399c:	601a      	str	r2, [r3, #0]
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2225      	movs	r2, #37	@ 0x25
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80039a6:	4b29      	ldr	r3, [pc, #164]	@ (8003a4c <HAL_DMA_IRQHandler+0x160>)
 80039a8:	6859      	ldr	r1, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ae:	221c      	movs	r2, #28
 80039b0:	4013      	ands	r3, r2
 80039b2:	2202      	movs	r2, #2
 80039b4:	409a      	lsls	r2, r3
 80039b6:	4b25      	ldr	r3, [pc, #148]	@ (8003a4c <HAL_DMA_IRQHandler+0x160>)
 80039b8:	430a      	orrs	r2, r1
 80039ba:	605a      	str	r2, [r3, #4]
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2224      	movs	r2, #36	@ 0x24
 80039c0:	2100      	movs	r1, #0
 80039c2:	5499      	strb	r1, [r3, r2]
    if (hdma->XferCpltCallback != NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d03a      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	0010      	movs	r0, r2
 80039d4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039d6:	e034      	b.n	8003a42 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039dc:	221c      	movs	r2, #28
 80039de:	4013      	ands	r3, r2
 80039e0:	2208      	movs	r2, #8
 80039e2:	409a      	lsls	r2, r3
 80039e4:	0013      	movs	r3, r2
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	4013      	ands	r3, r2
 80039ea:	d02b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x158>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2208      	movs	r2, #8
 80039f0:	4013      	ands	r3, r2
 80039f2:	d027      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	210e      	movs	r1, #14
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a04:	4b11      	ldr	r3, [pc, #68]	@ (8003a4c <HAL_DMA_IRQHandler+0x160>)
 8003a06:	6859      	ldr	r1, [r3, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	221c      	movs	r2, #28
 8003a0e:	4013      	ands	r3, r2
 8003a10:	2201      	movs	r2, #1
 8003a12:	409a      	lsls	r2, r3
 8003a14:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <HAL_DMA_IRQHandler+0x160>)
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2225      	movs	r2, #37	@ 0x25
 8003a24:	2101      	movs	r1, #1
 8003a26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	0010      	movs	r0, r2
 8003a40:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46c0      	nop			@ (mov r8, r8)
}
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b004      	add	sp, #16
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40020000 	.word	0x40020000

08003a50 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(const DMA_HandleTypeDef *hdma)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2225      	movs	r2, #37	@ 0x25
 8003a5c:	5c9b      	ldrb	r3, [r3, r2]
 8003a5e:	b2db      	uxtb	r3, r3
}
 8003a60:	0018      	movs	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	b002      	add	sp, #8
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a7e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d004      	beq.n	8003a92 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003a90:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003a92:	4b14      	ldr	r3, [pc, #80]	@ (8003ae4 <DMA_SetConfig+0x7c>)
 8003a94:	6859      	ldr	r1, [r3, #4]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	221c      	movs	r2, #28
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	4b10      	ldr	r3, [pc, #64]	@ (8003ae4 <DMA_SetConfig+0x7c>)
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b10      	cmp	r3, #16
 8003ab6:	d108      	bne.n	8003aca <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ac8:	e007      	b.n	8003ada <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	60da      	str	r2, [r3, #12]
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b004      	add	sp, #16
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	40020000 	.word	0x40020000

08003ae8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *) \
                        (uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                   ((hdma->ChannelIndex >> 2U) * \
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af4:	089b      	lsrs	r3, r3, #2
                        (uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8003af6:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003af8:	4694      	mov	ip, r2
 8003afa:	4463      	add	r3, ip
 8003afc:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *) \
 8003afe:	001a      	movs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	645a      	str	r2, [r3, #68]	@ 0x44
                                    ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	001a      	movs	r2, r3
 8003b0a:	23ff      	movs	r3, #255	@ 0xff
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	3b08      	subs	r3, #8
 8003b10:	2114      	movs	r1, #20
 8003b12:	0018      	movs	r0, r3
 8003b14:	f7fc faf8 	bl	8000108 <__udivsi3>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a07      	ldr	r2, [pc, #28]	@ (8003b3c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003b20:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected
     for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	221f      	movs	r2, #31
 8003b26:	4013      	ands	r3, r2
 8003b28:	2201      	movs	r2, #1
 8003b2a:	409a      	lsls	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b004      	add	sp, #16
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	10008200 	.word	0x10008200
 8003b3c:	40020880 	.word	0x40020880

08003b40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	22ff      	movs	r2, #255	@ 0xff
 8003b4e:	4013      	ands	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a0a      	ldr	r2, [pc, #40]	@ (8003b80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003b56:	4694      	mov	ip, r2
 8003b58:	4463      	add	r3, ip
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	001a      	movs	r2, r3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a07      	ldr	r2, [pc, #28]	@ (8003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	2203      	movs	r2, #3
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2201      	movs	r2, #1
 8003b72:	409a      	lsls	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003b78:	46c0      	nop			@ (mov r8, r8)
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	1000823f 	.word	0x1000823f
 8003b84:	40020940 	.word	0x40020940

08003b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b96:	e14d      	b.n	8003e34 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4091      	lsls	r1, r2
 8003ba2:	000a      	movs	r2, r1
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d100      	bne.n	8003bb0 <HAL_GPIO_Init+0x28>
 8003bae:	e13e      	b.n	8003e2e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d005      	beq.n	8003bc8 <HAL_GPIO_Init+0x40>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2203      	movs	r2, #3
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d130      	bne.n	8003c2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	43da      	mvns	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	409a      	lsls	r2, r3
 8003bea:	0013      	movs	r3, r2
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003bfe:	2201      	movs	r2, #1
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	409a      	lsls	r2, r3
 8003c04:	0013      	movs	r3, r2
 8003c06:	43da      	mvns	r2, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	091b      	lsrs	r3, r3, #4
 8003c14:	2201      	movs	r2, #1
 8003c16:	401a      	ands	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	409a      	lsls	r2, r3
 8003c1c:	0013      	movs	r3, r2
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d017      	beq.n	8003c66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	2203      	movs	r2, #3
 8003c42:	409a      	lsls	r2, r3
 8003c44:	0013      	movs	r3, r2
 8003c46:	43da      	mvns	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	409a      	lsls	r2, r3
 8003c58:	0013      	movs	r3, r2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d123      	bne.n	8003cba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	08da      	lsrs	r2, r3, #3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3208      	adds	r2, #8
 8003c7a:	0092      	lsls	r2, r2, #2
 8003c7c:	58d3      	ldr	r3, [r2, r3]
 8003c7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2207      	movs	r2, #7
 8003c84:	4013      	ands	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	220f      	movs	r2, #15
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	0013      	movs	r3, r2
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2107      	movs	r1, #7
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	08da      	lsrs	r2, r3, #3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3208      	adds	r2, #8
 8003cb4:	0092      	lsls	r2, r2, #2
 8003cb6:	6939      	ldr	r1, [r7, #16]
 8003cb8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	0013      	movs	r3, r2
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2203      	movs	r2, #3
 8003cd8:	401a      	ands	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	693a      	ldr	r2, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	23c0      	movs	r3, #192	@ 0xc0
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d100      	bne.n	8003cfc <HAL_GPIO_Init+0x174>
 8003cfa:	e098      	b.n	8003e2e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003cfc:	4a53      	ldr	r2, [pc, #332]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3318      	adds	r3, #24
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	589b      	ldr	r3, [r3, r2]
 8003d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	4013      	ands	r3, r2
 8003d10:	00db      	lsls	r3, r3, #3
 8003d12:	220f      	movs	r2, #15
 8003d14:	409a      	lsls	r2, r3
 8003d16:	0013      	movs	r3, r2
 8003d18:	43da      	mvns	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	23a0      	movs	r3, #160	@ 0xa0
 8003d24:	05db      	lsls	r3, r3, #23
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d019      	beq.n	8003d5e <HAL_GPIO_Init+0x1d6>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a48      	ldr	r2, [pc, #288]	@ (8003e50 <HAL_GPIO_Init+0x2c8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_GPIO_Init+0x1d2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a47      	ldr	r2, [pc, #284]	@ (8003e54 <HAL_GPIO_Init+0x2cc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00d      	beq.n	8003d56 <HAL_GPIO_Init+0x1ce>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a46      	ldr	r2, [pc, #280]	@ (8003e58 <HAL_GPIO_Init+0x2d0>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d007      	beq.n	8003d52 <HAL_GPIO_Init+0x1ca>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a45      	ldr	r2, [pc, #276]	@ (8003e5c <HAL_GPIO_Init+0x2d4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <HAL_GPIO_Init+0x1c6>
 8003d4a:	2305      	movs	r3, #5
 8003d4c:	e008      	b.n	8003d60 <HAL_GPIO_Init+0x1d8>
 8003d4e:	2306      	movs	r3, #6
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x1d8>
 8003d52:	2303      	movs	r3, #3
 8003d54:	e004      	b.n	8003d60 <HAL_GPIO_Init+0x1d8>
 8003d56:	2302      	movs	r3, #2
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_Init+0x1d8>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_GPIO_Init+0x1d8>
 8003d5e:	2300      	movs	r3, #0
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	2103      	movs	r1, #3
 8003d64:	400a      	ands	r2, r1
 8003d66:	00d2      	lsls	r2, r2, #3
 8003d68:	4093      	lsls	r3, r2
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003d70:	4936      	ldr	r1, [pc, #216]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	3318      	adds	r3, #24
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d7e:	4b33      	ldr	r3, [pc, #204]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43da      	mvns	r2, r3
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	2380      	movs	r3, #128	@ 0x80
 8003d94:	035b      	lsls	r3, r3, #13
 8003d96:	4013      	ands	r3, r2
 8003d98:	d003      	beq.n	8003da2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003da2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003da8:	4b28      	ldr	r3, [pc, #160]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	43da      	mvns	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	2380      	movs	r3, #128	@ 0x80
 8003dbe:	039b      	lsls	r3, r3, #14
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003dd4:	2384      	movs	r3, #132	@ 0x84
 8003dd6:	58d3      	ldr	r3, [r2, r3]
 8003dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	2380      	movs	r3, #128	@ 0x80
 8003dea:	029b      	lsls	r3, r3, #10
 8003dec:	4013      	ands	r3, r2
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003df8:	4914      	ldr	r1, [pc, #80]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003dfa:	2284      	movs	r2, #132	@ 0x84
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003e00:	4a12      	ldr	r2, [pc, #72]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003e02:	2380      	movs	r3, #128	@ 0x80
 8003e04:	58d3      	ldr	r3, [r2, r3]
 8003e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	4013      	ands	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	2380      	movs	r3, #128	@ 0x80
 8003e18:	025b      	lsls	r3, r3, #9
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e26:	4909      	ldr	r1, [pc, #36]	@ (8003e4c <HAL_GPIO_Init+0x2c4>)
 8003e28:	2280      	movs	r2, #128	@ 0x80
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	3301      	adds	r3, #1
 8003e32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	40da      	lsrs	r2, r3
 8003e3c:	1e13      	subs	r3, r2, #0
 8003e3e:	d000      	beq.n	8003e42 <HAL_GPIO_Init+0x2ba>
 8003e40:	e6aa      	b.n	8003b98 <HAL_GPIO_Init+0x10>
  }
}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	46c0      	nop			@ (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b006      	add	sp, #24
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021800 	.word	0x40021800
 8003e50:	50000400 	.word	0x50000400
 8003e54:	50000800 	.word	0x50000800
 8003e58:	50000c00 	.word	0x50000c00
 8003e5c:	50001400 	.word	0x50001400

08003e60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003e6e:	e0ba      	b.n	8003fe6 <HAL_GPIO_DeInit+0x186>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003e70:	2201      	movs	r2, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	409a      	lsls	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d100      	bne.n	8003e84 <HAL_GPIO_DeInit+0x24>
 8003e82:	e0ad      	b.n	8003fe0 <HAL_GPIO_DeInit+0x180>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8003e84:	4a5d      	ldr	r2, [pc, #372]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	589b      	ldr	r3, [r3, r2]
 8003e90:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2203      	movs	r2, #3
 8003e96:	4013      	ands	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	220f      	movs	r2, #15
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u))))
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	23a0      	movs	r3, #160	@ 0xa0
 8003ea8:	05db      	lsls	r3, r3, #23
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d019      	beq.n	8003ee2 <HAL_GPIO_DeInit+0x82>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a53      	ldr	r2, [pc, #332]	@ (8004000 <HAL_GPIO_DeInit+0x1a0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_GPIO_DeInit+0x7e>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a52      	ldr	r2, [pc, #328]	@ (8004004 <HAL_GPIO_DeInit+0x1a4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00d      	beq.n	8003eda <HAL_GPIO_DeInit+0x7a>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a51      	ldr	r2, [pc, #324]	@ (8004008 <HAL_GPIO_DeInit+0x1a8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <HAL_GPIO_DeInit+0x76>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a50      	ldr	r2, [pc, #320]	@ (800400c <HAL_GPIO_DeInit+0x1ac>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_GPIO_DeInit+0x72>
 8003ece:	2305      	movs	r3, #5
 8003ed0:	e008      	b.n	8003ee4 <HAL_GPIO_DeInit+0x84>
 8003ed2:	2306      	movs	r3, #6
 8003ed4:	e006      	b.n	8003ee4 <HAL_GPIO_DeInit+0x84>
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e004      	b.n	8003ee4 <HAL_GPIO_DeInit+0x84>
 8003eda:	2302      	movs	r3, #2
 8003edc:	e002      	b.n	8003ee4 <HAL_GPIO_DeInit+0x84>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_DeInit+0x84>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	400a      	ands	r2, r1
 8003eea:	00d2      	lsls	r2, r2, #3
 8003eec:	4093      	lsls	r3, r2
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d136      	bne.n	8003f62 <HAL_GPIO_DeInit+0x102>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003ef4:	4a41      	ldr	r2, [pc, #260]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003ef6:	2380      	movs	r3, #128	@ 0x80
 8003ef8:	58d3      	ldr	r3, [r2, r3]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	43d2      	mvns	r2, r2
 8003efe:	493f      	ldr	r1, [pc, #252]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8003f06:	4a3d      	ldr	r2, [pc, #244]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f08:	2384      	movs	r3, #132	@ 0x84
 8003f0a:	58d3      	ldr	r3, [r2, r3]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	43d2      	mvns	r2, r2
 8003f10:	493a      	ldr	r1, [pc, #232]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	2284      	movs	r2, #132	@ 0x84
 8003f16:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003f18:	4b38      	ldr	r3, [pc, #224]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	43d9      	mvns	r1, r3
 8003f20:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8003f26:	4b35      	ldr	r3, [pc, #212]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	43d9      	mvns	r1, r3
 8003f2e:	4b33      	ldr	r3, [pc, #204]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f30:	400a      	ands	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u));
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2203      	movs	r2, #3
 8003f38:	4013      	ands	r3, r2
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	409a      	lsls	r2, r3
 8003f40:	0013      	movs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8003f44:	4a2d      	ldr	r2, [pc, #180]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	089b      	lsrs	r3, r3, #2
 8003f4a:	3318      	adds	r3, #24
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	589a      	ldr	r2, [r3, r2]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	43d9      	mvns	r1, r3
 8003f54:	4829      	ldr	r0, [pc, #164]	@ (8003ffc <HAL_GPIO_DeInit+0x19c>)
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	3318      	adds	r3, #24
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	2103      	movs	r1, #3
 8003f6c:	4099      	lsls	r1, r3
 8003f6e:	000b      	movs	r3, r1
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos)) ;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	08da      	lsrs	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3208      	adds	r2, #8
 8003f7e:	0092      	lsls	r2, r2, #2
 8003f80:	58d3      	ldr	r3, [r2, r3]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	2107      	movs	r1, #7
 8003f86:	400a      	ands	r2, r1
 8003f88:	0092      	lsls	r2, r2, #2
 8003f8a:	210f      	movs	r1, #15
 8003f8c:	4091      	lsls	r1, r2
 8003f8e:	000a      	movs	r2, r1
 8003f90:	43d1      	mvns	r1, r2
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	08d2      	lsrs	r2, r2, #3
 8003f96:	4019      	ands	r1, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3208      	adds	r2, #8
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	0052      	lsls	r2, r2, #1
 8003fa8:	2103      	movs	r1, #3
 8003faa:	4091      	lsls	r1, r2
 8003fac:	000a      	movs	r2, r1
 8003fae:	43d2      	mvns	r2, r2
 8003fb0:	401a      	ands	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2101      	movs	r1, #1
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4091      	lsls	r1, r2
 8003fc0:	000a      	movs	r2, r1
 8003fc2:	43d2      	mvns	r2, r2
 8003fc4:	401a      	ands	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	0052      	lsls	r2, r2, #1
 8003fd2:	2103      	movs	r1, #3
 8003fd4:	4091      	lsls	r1, r2
 8003fd6:	000a      	movs	r2, r1
 8003fd8:	43d2      	mvns	r2, r2
 8003fda:	401a      	ands	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	40da      	lsrs	r2, r3
 8003fec:	1e13      	subs	r3, r2, #0
 8003fee:	d000      	beq.n	8003ff2 <HAL_GPIO_DeInit+0x192>
 8003ff0:	e73e      	b.n	8003e70 <HAL_GPIO_DeInit+0x10>
  }
}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	46c0      	nop			@ (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b006      	add	sp, #24
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021800 	.word	0x40021800
 8004000:	50000400 	.word	0x50000400
 8004004:	50000800 	.word	0x50000800
 8004008:	50000c00 	.word	0x50000c00
 800400c:	50001400 	.word	0x50001400

08004010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	0008      	movs	r0, r1
 800401a:	0011      	movs	r1, r2
 800401c:	1cbb      	adds	r3, r7, #2
 800401e:	1c02      	adds	r2, r0, #0
 8004020:	801a      	strh	r2, [r3, #0]
 8004022:	1c7b      	adds	r3, r7, #1
 8004024:	1c0a      	adds	r2, r1, #0
 8004026:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004028:	1c7b      	adds	r3, r7, #1
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d004      	beq.n	800403a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004030:	1cbb      	adds	r3, r7, #2
 8004032:	881a      	ldrh	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004038:	e003      	b.n	8004042 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800403a:	1cbb      	adds	r3, r7, #2
 800403c:	881a      	ldrh	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	b002      	add	sp, #8
 8004048:	bd80      	pop	{r7, pc}
	...

0800404c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	0002      	movs	r2, r0
 8004054:	1dbb      	adds	r3, r7, #6
 8004056:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004058:	4b10      	ldr	r3, [pc, #64]	@ (800409c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	1dba      	adds	r2, r7, #6
 800405e:	8812      	ldrh	r2, [r2, #0]
 8004060:	4013      	ands	r3, r2
 8004062:	d008      	beq.n	8004076 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004064:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004066:	1dba      	adds	r2, r7, #6
 8004068:	8812      	ldrh	r2, [r2, #0]
 800406a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800406c:	1dbb      	adds	r3, r7, #6
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	0018      	movs	r0, r3
 8004072:	f7fe fa41 	bl	80024f8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004076:	4b09      	ldr	r3, [pc, #36]	@ (800409c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	1dba      	adds	r2, r7, #6
 800407c:	8812      	ldrh	r2, [r2, #0]
 800407e:	4013      	ands	r3, r2
 8004080:	d008      	beq.n	8004094 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8004082:	4b06      	ldr	r3, [pc, #24]	@ (800409c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004084:	1dba      	adds	r2, r7, #6
 8004086:	8812      	ldrh	r2, [r2, #0]
 8004088:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800408a:	1dbb      	adds	r3, r7, #6
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	0018      	movs	r0, r3
 8004090:	f7fe fa0c 	bl	80024ac <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	46bd      	mov	sp, r7
 8004098:	b002      	add	sp, #8
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40021800 	.word	0x40021800

080040a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e08f      	b.n	80041d2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2241      	movs	r2, #65	@ 0x41
 80040b6:	5c9b      	ldrb	r3, [r3, r2]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2240      	movs	r2, #64	@ 0x40
 80040c2:	2100      	movs	r1, #0
 80040c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7fe ffa1 	bl	8003010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2241      	movs	r2, #65	@ 0x41
 80040d2:	2124      	movs	r1, #36	@ 0x24
 80040d4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	438a      	bics	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	493b      	ldr	r1, [pc, #236]	@ (80041dc <HAL_I2C_Init+0x13c>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4938      	ldr	r1, [pc, #224]	@ (80041e0 <HAL_I2C_Init+0x140>)
 8004100:	400a      	ands	r2, r1
 8004102:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d108      	bne.n	800411e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2180      	movs	r1, #128	@ 0x80
 8004116:	0209      	lsls	r1, r1, #8
 8004118:	430a      	orrs	r2, r1
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	e007      	b.n	800412e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2184      	movs	r1, #132	@ 0x84
 8004128:	0209      	lsls	r1, r1, #8
 800412a:	430a      	orrs	r2, r1
 800412c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d109      	bne.n	800414a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2180      	movs	r1, #128	@ 0x80
 8004142:	0109      	lsls	r1, r1, #4
 8004144:	430a      	orrs	r2, r1
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	e007      	b.n	800415a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4923      	ldr	r1, [pc, #140]	@ (80041e4 <HAL_I2C_Init+0x144>)
 8004156:	400a      	ands	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4920      	ldr	r1, [pc, #128]	@ (80041e8 <HAL_I2C_Init+0x148>)
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68da      	ldr	r2, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	491a      	ldr	r1, [pc, #104]	@ (80041e0 <HAL_I2C_Init+0x140>)
 8004176:	400a      	ands	r2, r1
 8004178:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	431a      	orrs	r2, r3
 8004184:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69d9      	ldr	r1, [r3, #28]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a1a      	ldr	r2, [r3, #32]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2101      	movs	r1, #1
 80041b0:	430a      	orrs	r2, r1
 80041b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2241      	movs	r2, #65	@ 0x41
 80041be:	2120      	movs	r1, #32
 80041c0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2242      	movs	r2, #66	@ 0x42
 80041cc:	2100      	movs	r1, #0
 80041ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	0018      	movs	r0, r3
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b002      	add	sp, #8
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	f0ffffff 	.word	0xf0ffffff
 80041e0:	ffff7fff 	.word	0xffff7fff
 80041e4:	fffff7ff 	.word	0xfffff7ff
 80041e8:	02008000 	.word	0x02008000

080041ec <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b089      	sub	sp, #36	@ 0x24
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	000c      	movs	r4, r1
 80041f6:	0010      	movs	r0, r2
 80041f8:	0019      	movs	r1, r3
 80041fa:	230a      	movs	r3, #10
 80041fc:	18fb      	adds	r3, r7, r3
 80041fe:	1c22      	adds	r2, r4, #0
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	2308      	movs	r3, #8
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	1c02      	adds	r2, r0, #0
 8004208:	801a      	strh	r2, [r3, #0]
 800420a:	1dbb      	adds	r3, r7, #6
 800420c:	1c0a      	adds	r2, r1, #0
 800420e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2241      	movs	r2, #65	@ 0x41
 8004214:	5c9b      	ldrb	r3, [r3, r2]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b20      	cmp	r3, #32
 800421a:	d000      	beq.n	800421e <HAL_I2C_Mem_Write+0x32>
 800421c:	e10c      	b.n	8004438 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800421e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <HAL_I2C_Mem_Write+0x42>
 8004224:	232c      	movs	r3, #44	@ 0x2c
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d105      	bne.n	800423a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2280      	movs	r2, #128	@ 0x80
 8004232:	0092      	lsls	r2, r2, #2
 8004234:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e0ff      	b.n	800443a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2240      	movs	r2, #64	@ 0x40
 800423e:	5c9b      	ldrb	r3, [r3, r2]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_I2C_Mem_Write+0x5c>
 8004244:	2302      	movs	r3, #2
 8004246:	e0f8      	b.n	800443a <HAL_I2C_Mem_Write+0x24e>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2240      	movs	r2, #64	@ 0x40
 800424c:	2101      	movs	r1, #1
 800424e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004250:	f7ff f8c8 	bl	80033e4 <HAL_GetTick>
 8004254:	0003      	movs	r3, r0
 8004256:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004258:	2380      	movs	r3, #128	@ 0x80
 800425a:	0219      	lsls	r1, r3, #8
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	2319      	movs	r3, #25
 8004264:	2201      	movs	r2, #1
 8004266:	f001 fe8b 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 800426a:	1e03      	subs	r3, r0, #0
 800426c:	d001      	beq.n	8004272 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0e3      	b.n	800443a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2241      	movs	r2, #65	@ 0x41
 8004276:	2121      	movs	r1, #33	@ 0x21
 8004278:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2242      	movs	r2, #66	@ 0x42
 800427e:	2140      	movs	r1, #64	@ 0x40
 8004280:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	222c      	movs	r2, #44	@ 0x2c
 8004292:	18ba      	adds	r2, r7, r2
 8004294:	8812      	ldrh	r2, [r2, #0]
 8004296:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800429e:	1dbb      	adds	r3, r7, #6
 80042a0:	881c      	ldrh	r4, [r3, #0]
 80042a2:	2308      	movs	r3, #8
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	230a      	movs	r3, #10
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	8819      	ldrh	r1, [r3, #0]
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	0023      	movs	r3, r4
 80042ba:	f000 ffcd 	bl	8005258 <I2C_RequestMemoryWrite>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d005      	beq.n	80042ce <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2240      	movs	r2, #64	@ 0x40
 80042c6:	2100      	movs	r1, #0
 80042c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0b5      	b.n	800443a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	2bff      	cmp	r3, #255	@ 0xff
 80042d6:	d911      	bls.n	80042fc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	22ff      	movs	r2, #255	@ 0xff
 80042dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	2380      	movs	r3, #128	@ 0x80
 80042e6:	045c      	lsls	r4, r3, #17
 80042e8:	230a      	movs	r3, #10
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	8819      	ldrh	r1, [r3, #0]
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	2300      	movs	r3, #0
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	0023      	movs	r3, r4
 80042f6:	f002 f81d 	bl	8006334 <I2C_TransferConfig>
 80042fa:	e012      	b.n	8004322 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430a:	b2da      	uxtb	r2, r3
 800430c:	2380      	movs	r3, #128	@ 0x80
 800430e:	049c      	lsls	r4, r3, #18
 8004310:	230a      	movs	r3, #10
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	8819      	ldrh	r1, [r3, #0]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	2300      	movs	r3, #0
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	0023      	movs	r3, r4
 800431e:	f002 f809 	bl	8006334 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	0018      	movs	r0, r3
 800432a:	f001 fe81 	bl	8006030 <I2C_WaitOnTXISFlagUntilTimeout>
 800432e:	1e03      	subs	r3, r0, #0
 8004330:	d001      	beq.n	8004336 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e081      	b.n	800443a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	781a      	ldrb	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800435e:	3b01      	subs	r3, #1
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d03a      	beq.n	80043e6 <HAL_I2C_Mem_Write+0x1fa>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004374:	2b00      	cmp	r3, #0
 8004376:	d136      	bne.n	80043e6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004378:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	0013      	movs	r3, r2
 8004382:	2200      	movs	r2, #0
 8004384:	2180      	movs	r1, #128	@ 0x80
 8004386:	f001 fdfb 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 800438a:	1e03      	subs	r3, r0, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e053      	b.n	800443a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004396:	b29b      	uxth	r3, r3
 8004398:	2bff      	cmp	r3, #255	@ 0xff
 800439a:	d911      	bls.n	80043c0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	22ff      	movs	r2, #255	@ 0xff
 80043a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	2380      	movs	r3, #128	@ 0x80
 80043aa:	045c      	lsls	r4, r3, #17
 80043ac:	230a      	movs	r3, #10
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	8819      	ldrh	r1, [r3, #0]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	2300      	movs	r3, #0
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	0023      	movs	r3, r4
 80043ba:	f001 ffbb 	bl	8006334 <I2C_TransferConfig>
 80043be:	e012      	b.n	80043e6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	2380      	movs	r3, #128	@ 0x80
 80043d2:	049c      	lsls	r4, r3, #18
 80043d4:	230a      	movs	r3, #10
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	8819      	ldrh	r1, [r3, #0]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	0023      	movs	r3, r4
 80043e2:	f001 ffa7 	bl	8006334 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d198      	bne.n	8004322 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	0018      	movs	r0, r3
 80043f8:	f001 fe60 	bl	80060bc <I2C_WaitOnSTOPFlagUntilTimeout>
 80043fc:	1e03      	subs	r3, r0, #0
 80043fe:	d001      	beq.n	8004404 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e01a      	b.n	800443a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2220      	movs	r2, #32
 800440a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	490b      	ldr	r1, [pc, #44]	@ (8004444 <HAL_I2C_Mem_Write+0x258>)
 8004418:	400a      	ands	r2, r1
 800441a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2241      	movs	r2, #65	@ 0x41
 8004420:	2120      	movs	r1, #32
 8004422:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2242      	movs	r2, #66	@ 0x42
 8004428:	2100      	movs	r1, #0
 800442a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2240      	movs	r2, #64	@ 0x40
 8004430:	2100      	movs	r1, #0
 8004432:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b007      	add	sp, #28
 8004440:	bd90      	pop	{r4, r7, pc}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	fe00e800 	.word	0xfe00e800

08004448 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004448:	b590      	push	{r4, r7, lr}
 800444a:	b089      	sub	sp, #36	@ 0x24
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	000c      	movs	r4, r1
 8004452:	0010      	movs	r0, r2
 8004454:	0019      	movs	r1, r3
 8004456:	230a      	movs	r3, #10
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	1c22      	adds	r2, r4, #0
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	2308      	movs	r3, #8
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	1c02      	adds	r2, r0, #0
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	1dbb      	adds	r3, r7, #6
 8004468:	1c0a      	adds	r2, r1, #0
 800446a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2241      	movs	r2, #65	@ 0x41
 8004470:	5c9b      	ldrb	r3, [r3, r2]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b20      	cmp	r3, #32
 8004476:	d000      	beq.n	800447a <HAL_I2C_Mem_Read+0x32>
 8004478:	e110      	b.n	800469c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800447a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447c:	2b00      	cmp	r3, #0
 800447e:	d004      	beq.n	800448a <HAL_I2C_Mem_Read+0x42>
 8004480:	232c      	movs	r3, #44	@ 0x2c
 8004482:	18fb      	adds	r3, r7, r3
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d105      	bne.n	8004496 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2280      	movs	r2, #128	@ 0x80
 800448e:	0092      	lsls	r2, r2, #2
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e103      	b.n	800469e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2240      	movs	r2, #64	@ 0x40
 800449a:	5c9b      	ldrb	r3, [r3, r2]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_I2C_Mem_Read+0x5c>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e0fc      	b.n	800469e <HAL_I2C_Mem_Read+0x256>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2240      	movs	r2, #64	@ 0x40
 80044a8:	2101      	movs	r1, #1
 80044aa:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80044ac:	f7fe ff9a 	bl	80033e4 <HAL_GetTick>
 80044b0:	0003      	movs	r3, r0
 80044b2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	0219      	lsls	r1, r3, #8
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2319      	movs	r3, #25
 80044c0:	2201      	movs	r2, #1
 80044c2:	f001 fd5d 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 80044c6:	1e03      	subs	r3, r0, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0e7      	b.n	800469e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2241      	movs	r2, #65	@ 0x41
 80044d2:	2122      	movs	r1, #34	@ 0x22
 80044d4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2242      	movs	r2, #66	@ 0x42
 80044da:	2140      	movs	r1, #64	@ 0x40
 80044dc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	222c      	movs	r2, #44	@ 0x2c
 80044ee:	18ba      	adds	r2, r7, r2
 80044f0:	8812      	ldrh	r2, [r2, #0]
 80044f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044fa:	1dbb      	adds	r3, r7, #6
 80044fc:	881c      	ldrh	r4, [r3, #0]
 80044fe:	2308      	movs	r3, #8
 8004500:	18fb      	adds	r3, r7, r3
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	230a      	movs	r3, #10
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	8819      	ldrh	r1, [r3, #0]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	9301      	str	r3, [sp, #4]
 8004510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	0023      	movs	r3, r4
 8004516:	f000 ff03 	bl	8005320 <I2C_RequestMemoryRead>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d005      	beq.n	800452a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2240      	movs	r2, #64	@ 0x40
 8004522:	2100      	movs	r1, #0
 8004524:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e0b9      	b.n	800469e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	2bff      	cmp	r3, #255	@ 0xff
 8004532:	d911      	bls.n	8004558 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	22ff      	movs	r2, #255	@ 0xff
 8004538:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453e:	b2da      	uxtb	r2, r3
 8004540:	2380      	movs	r3, #128	@ 0x80
 8004542:	045c      	lsls	r4, r3, #17
 8004544:	230a      	movs	r3, #10
 8004546:	18fb      	adds	r3, r7, r3
 8004548:	8819      	ldrh	r1, [r3, #0]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	4b56      	ldr	r3, [pc, #344]	@ (80046a8 <HAL_I2C_Mem_Read+0x260>)
 800454e:	9300      	str	r3, [sp, #0]
 8004550:	0023      	movs	r3, r4
 8004552:	f001 feef 	bl	8006334 <I2C_TransferConfig>
 8004556:	e012      	b.n	800457e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455c:	b29a      	uxth	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004566:	b2da      	uxtb	r2, r3
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	049c      	lsls	r4, r3, #18
 800456c:	230a      	movs	r3, #10
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	8819      	ldrh	r1, [r3, #0]
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	4b4c      	ldr	r3, [pc, #304]	@ (80046a8 <HAL_I2C_Mem_Read+0x260>)
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	0023      	movs	r3, r4
 800457a:	f001 fedb 	bl	8006334 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800457e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	0013      	movs	r3, r2
 8004588:	2200      	movs	r2, #0
 800458a:	2104      	movs	r1, #4
 800458c:	f001 fcf8 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8004590:	1e03      	subs	r3, r0, #0
 8004592:	d001      	beq.n	8004598 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e082      	b.n	800469e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b4:	3b01      	subs	r3, #1
 80045b6:	b29a      	uxth	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03a      	beq.n	800464a <HAL_I2C_Mem_Read+0x202>
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d136      	bne.n	800464a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80045dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	0013      	movs	r3, r2
 80045e6:	2200      	movs	r2, #0
 80045e8:	2180      	movs	r1, #128	@ 0x80
 80045ea:	f001 fcc9 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 80045ee:	1e03      	subs	r3, r0, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e053      	b.n	800469e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2bff      	cmp	r3, #255	@ 0xff
 80045fe:	d911      	bls.n	8004624 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	22ff      	movs	r2, #255	@ 0xff
 8004604:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460a:	b2da      	uxtb	r2, r3
 800460c:	2380      	movs	r3, #128	@ 0x80
 800460e:	045c      	lsls	r4, r3, #17
 8004610:	230a      	movs	r3, #10
 8004612:	18fb      	adds	r3, r7, r3
 8004614:	8819      	ldrh	r1, [r3, #0]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	2300      	movs	r3, #0
 800461a:	9300      	str	r3, [sp, #0]
 800461c:	0023      	movs	r3, r4
 800461e:	f001 fe89 	bl	8006334 <I2C_TransferConfig>
 8004622:	e012      	b.n	800464a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	b2da      	uxtb	r2, r3
 8004634:	2380      	movs	r3, #128	@ 0x80
 8004636:	049c      	lsls	r4, r3, #18
 8004638:	230a      	movs	r3, #10
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	8819      	ldrh	r1, [r3, #0]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	2300      	movs	r3, #0
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	0023      	movs	r3, r4
 8004646:	f001 fe75 	bl	8006334 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d194      	bne.n	800457e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	0018      	movs	r0, r3
 800465c:	f001 fd2e 	bl	80060bc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004660:	1e03      	subs	r3, r0, #0
 8004662:	d001      	beq.n	8004668 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e01a      	b.n	800469e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2220      	movs	r2, #32
 800466e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	490c      	ldr	r1, [pc, #48]	@ (80046ac <HAL_I2C_Mem_Read+0x264>)
 800467c:	400a      	ands	r2, r1
 800467e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2241      	movs	r2, #65	@ 0x41
 8004684:	2120      	movs	r1, #32
 8004686:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2242      	movs	r2, #66	@ 0x42
 800468c:	2100      	movs	r1, #0
 800468e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2240      	movs	r2, #64	@ 0x40
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e000      	b.n	800469e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800469c:	2302      	movs	r3, #2
  }
}
 800469e:	0018      	movs	r0, r3
 80046a0:	46bd      	mov	sp, r7
 80046a2:	b007      	add	sp, #28
 80046a4:	bd90      	pop	{r4, r7, pc}
 80046a6:	46c0      	nop			@ (mov r8, r8)
 80046a8:	80002400 	.word	0x80002400
 80046ac:	fe00e800 	.word	0xfe00e800

080046b0 <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80046b0:	b5b0      	push	{r4, r5, r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	000c      	movs	r4, r1
 80046ba:	0010      	movs	r0, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	230a      	movs	r3, #10
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	1c22      	adds	r2, r4, #0
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	2308      	movs	r3, #8
 80046c8:	18fb      	adds	r3, r7, r3
 80046ca:	1c02      	adds	r2, r0, #0
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	1dbb      	adds	r3, r7, #6
 80046d0:	1c0a      	adds	r2, r1, #0
 80046d2:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2241      	movs	r2, #65	@ 0x41
 80046d8:	5c9b      	ldrb	r3, [r3, r2]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d000      	beq.n	80046e2 <HAL_I2C_Mem_Read_DMA+0x32>
 80046e0:	e0d6      	b.n	8004890 <HAL_I2C_Mem_Read_DMA+0x1e0>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <HAL_I2C_Mem_Read_DMA+0x42>
 80046e8:	232c      	movs	r3, #44	@ 0x2c
 80046ea:	18fb      	adds	r3, r7, r3
 80046ec:	881b      	ldrh	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d105      	bne.n	80046fe <HAL_I2C_Mem_Read_DMA+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2280      	movs	r2, #128	@ 0x80
 80046f6:	0092      	lsls	r2, r2, #2
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e0c9      	b.n	8004892 <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	699a      	ldr	r2, [r3, #24]
 8004704:	2380      	movs	r3, #128	@ 0x80
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	401a      	ands	r2, r3
 800470a:	2380      	movs	r3, #128	@ 0x80
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	429a      	cmp	r2, r3
 8004710:	d101      	bne.n	8004716 <HAL_I2C_Mem_Read_DMA+0x66>
    {
      return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
 8004714:	e0bd      	b.n	8004892 <HAL_I2C_Mem_Read_DMA+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2240      	movs	r2, #64	@ 0x40
 800471a:	5c9b      	ldrb	r3, [r3, r2]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_I2C_Mem_Read_DMA+0x74>
 8004720:	2302      	movs	r3, #2
 8004722:	e0b6      	b.n	8004892 <HAL_I2C_Mem_Read_DMA+0x1e2>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2240      	movs	r2, #64	@ 0x40
 8004728:	2101      	movs	r1, #1
 800472a:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2241      	movs	r2, #65	@ 0x41
 8004730:	2122      	movs	r1, #34	@ 0x22
 8004732:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2242      	movs	r2, #66	@ 0x42
 8004738:	2140      	movs	r1, #64	@ 0x40
 800473a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004746:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	222c      	movs	r2, #44	@ 0x2c
 800474c:	18ba      	adds	r2, r7, r2
 800474e:	8812      	ldrh	r2, [r2, #0]
 8004750:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a51      	ldr	r2, [pc, #324]	@ (800489c <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8004756:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_DMA;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a51      	ldr	r2, [pc, #324]	@ (80048a0 <HAL_I2C_Mem_Read_DMA+0x1f0>)
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800475e:	230a      	movs	r3, #10
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	64da      	str	r2, [r3, #76]	@ 0x4c

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476c:	b29b      	uxth	r3, r3
 800476e:	2bff      	cmp	r3, #255	@ 0xff
 8004770:	d903      	bls.n	800477a <HAL_I2C_Mem_Read_DMA+0xca>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	22ff      	movs	r2, #255	@ 0xff
 8004776:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004778:	e004      	b.n	8004784 <HAL_I2C_Mem_Read_DMA+0xd4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004784:	1dbb      	adds	r3, r7, #6
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10b      	bne.n	80047a4 <HAL_I2C_Mem_Read_DMA+0xf4>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800478c:	2308      	movs	r3, #8
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2201      	movs	r2, #1
 800479e:	4252      	negs	r2, r2
 80047a0:	651a      	str	r2, [r3, #80]	@ 0x50
 80047a2:	e00e      	b.n	80047c2 <HAL_I2C_Mem_Read_DMA+0x112>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047a4:	2108      	movs	r1, #8
 80047a6:	187b      	adds	r3, r7, r1
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80047b6:	187b      	adds	r3, r7, r1
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	001a      	movs	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    if (hi2c->hdmarx != NULL)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d023      	beq.n	8004812 <HAL_I2C_Mem_Read_DMA+0x162>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ce:	4a35      	ldr	r2, [pc, #212]	@ (80048a4 <HAL_I2C_Mem_Read_DMA+0x1f4>)
 80047d0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d6:	4a34      	ldr	r2, [pc, #208]	@ (80048a8 <HAL_I2C_Mem_Read_DMA+0x1f8>)
 80047d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047e6:	2200      	movs	r2, #0
 80047e8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3324      	adds	r3, #36	@ 0x24
 80047f4:	0019      	movs	r1, r3
 80047f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
                                       hi2c->XferSize);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80047fc:	2517      	movs	r5, #23
 80047fe:	197c      	adds	r4, r7, r5
 8004800:	f7fe ff84 	bl	800370c <HAL_DMA_Start_IT>
 8004804:	0003      	movs	r3, r0
 8004806:	7023      	strb	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8004808:	197b      	adds	r3, r7, r5
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d12b      	bne.n	8004868 <HAL_I2C_Mem_Read_DMA+0x1b8>
 8004810:	e013      	b.n	800483a <HAL_I2C_Mem_Read_DMA+0x18a>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2241      	movs	r2, #65	@ 0x41
 8004816:	2120      	movs	r1, #32
 8004818:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2242      	movs	r2, #66	@ 0x42
 800481e:	2100      	movs	r1, #0
 8004820:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004826:	2280      	movs	r2, #128	@ 0x80
 8004828:	431a      	orrs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2240      	movs	r2, #64	@ 0x40
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e02b      	b.n	8004892 <HAL_I2C_Mem_Read_DMA+0x1e2>
    {
      /* Send Slave Address and Memory Address */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800483a:	1dbb      	adds	r3, r7, #6
 800483c:	881b      	ldrh	r3, [r3, #0]
 800483e:	b2da      	uxtb	r2, r3
 8004840:	230a      	movs	r3, #10
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	8819      	ldrh	r1, [r3, #0]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	4b18      	ldr	r3, [pc, #96]	@ (80048ac <HAL_I2C_Mem_Read_DMA+0x1fc>)
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	2300      	movs	r3, #0
 800484e:	f001 fd71 	bl	8006334 <I2C_TransferConfig>

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2240      	movs	r2, #64	@ 0x40
 8004856:	2100      	movs	r1, #0
 8004858:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2101      	movs	r1, #1
 800485e:	0018      	movs	r0, r3
 8004860:	f001 fda2 	bl	80063a8 <I2C_Enable_IRQ>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	e014      	b.n	8004892 <HAL_I2C_Mem_Read_DMA+0x1e2>
      hi2c->State     = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2241      	movs	r2, #65	@ 0x41
 800486c:	2120      	movs	r1, #32
 800486e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2242      	movs	r2, #66	@ 0x42
 8004874:	2100      	movs	r1, #0
 8004876:	5499      	strb	r1, [r3, r2]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800487c:	2210      	movs	r2, #16
 800487e:	431a      	orrs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2240      	movs	r2, #64	@ 0x40
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_I2C_Mem_Read_DMA+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004890:	2302      	movs	r3, #2
  }
}
 8004892:	0018      	movs	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	b006      	add	sp, #24
 8004898:	bdb0      	pop	{r4, r5, r7, pc}
 800489a:	46c0      	nop			@ (mov r8, r8)
 800489c:	ffff0000 	.word	0xffff0000
 80048a0:	08004e31 	.word	0x08004e31
 80048a4:	08005e71 	.word	0x08005e71
 80048a8:	08005f11 	.word	0x08005f11
 80048ac:	80002000 	.word	0x80002000

080048b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d005      	beq.n	80048dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	68f9      	ldr	r1, [r7, #12]
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4798      	blx	r3
  }
}
 80048dc:	46c0      	nop			@ (mov r8, r8)
 80048de:	46bd      	mov	sp, r7
 80048e0:	b004      	add	sp, #16
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	2380      	movs	r3, #128	@ 0x80
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4013      	ands	r3, r2
 8004904:	d00e      	beq.n	8004924 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2280      	movs	r2, #128	@ 0x80
 800490a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800490c:	d00a      	beq.n	8004924 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004912:	2201      	movs	r2, #1
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2280      	movs	r2, #128	@ 0x80
 8004920:	0052      	lsls	r2, r2, #1
 8004922:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	2380      	movs	r3, #128	@ 0x80
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	4013      	ands	r3, r2
 800492c:	d00e      	beq.n	800494c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	2280      	movs	r2, #128	@ 0x80
 8004932:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004934:	d00a      	beq.n	800494c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800493a:	2208      	movs	r2, #8
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2280      	movs	r2, #128	@ 0x80
 8004948:	00d2      	lsls	r2, r2, #3
 800494a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	2380      	movs	r3, #128	@ 0x80
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4013      	ands	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	2280      	movs	r2, #128	@ 0x80
 800495a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800495c:	d00a      	beq.n	8004974 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004962:	2202      	movs	r2, #2
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2280      	movs	r2, #128	@ 0x80
 8004970:	0092      	lsls	r2, r2, #2
 8004972:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004978:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	220b      	movs	r2, #11
 800497e:	4013      	ands	r3, r2
 8004980:	d005      	beq.n	800498e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0011      	movs	r1, r2
 8004988:	0018      	movs	r0, r3
 800498a:	f001 f923 	bl	8005bd4 <I2C_ITError>
  }
}
 800498e:	46c0      	nop			@ (mov r8, r8)
 8004990:	46bd      	mov	sp, r7
 8004992:	b006      	add	sp, #24
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b082      	sub	sp, #8
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800499e:	46c0      	nop			@ (mov r8, r8)
 80049a0:	46bd      	mov	sp, r7
 80049a2:	b002      	add	sp, #8
 80049a4:	bd80      	pop	{r7, pc}

080049a6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	46bd      	mov	sp, r7
 80049b2:	b002      	add	sp, #8
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b082      	sub	sp, #8
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049be:	46c0      	nop			@ (mov r8, r8)
 80049c0:	46bd      	mov	sp, r7
 80049c2:	b002      	add	sp, #8
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	0008      	movs	r0, r1
 80049e0:	0011      	movs	r1, r2
 80049e2:	1cfb      	adds	r3, r7, #3
 80049e4:	1c02      	adds	r2, r0, #0
 80049e6:	701a      	strb	r2, [r3, #0]
 80049e8:	003b      	movs	r3, r7
 80049ea:	1c0a      	adds	r2, r1, #0
 80049ec:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	46bd      	mov	sp, r7
 80049f2:	b002      	add	sp, #8
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b082      	sub	sp, #8
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b002      	add	sp, #8
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b082      	sub	sp, #8
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
 8004a10:	46bd      	mov	sp, r7
 8004a12:	b002      	add	sp, #8
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b082      	sub	sp, #8
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004a1e:	46c0      	nop			@ (mov r8, r8)
 8004a20:	46bd      	mov	sp, r7
 8004a22:	b002      	add	sp, #8
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a2e:	46c0      	nop			@ (mov r8, r8)
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b002      	add	sp, #8
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a48:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2240      	movs	r2, #64	@ 0x40
 8004a52:	5c9b      	ldrb	r3, [r3, r2]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d101      	bne.n	8004a5c <I2C_Slave_ISR_IT+0x24>
 8004a58:	2302      	movs	r3, #2
 8004a5a:	e0e7      	b.n	8004c2c <I2C_Slave_ISR_IT+0x1f4>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2240      	movs	r2, #64	@ 0x40
 8004a60:	2101      	movs	r1, #1
 8004a62:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	2220      	movs	r2, #32
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d00a      	beq.n	8004a82 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a72:	d006      	beq.n	8004a82 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	0011      	movs	r1, r2
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 feca 	bl	8005814 <I2C_ITSlaveCplt>
 8004a80:	e0cf      	b.n	8004c22 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2210      	movs	r2, #16
 8004a86:	4013      	ands	r3, r2
 8004a88:	d052      	beq.n	8004b30 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2210      	movs	r2, #16
 8004a8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a90:	d04e      	beq.n	8004b30 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d12d      	bne.n	8004af8 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2241      	movs	r2, #65	@ 0x41
 8004aa0:	5c9b      	ldrb	r3, [r3, r2]
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b28      	cmp	r3, #40	@ 0x28
 8004aa6:	d10b      	bne.n	8004ac0 <I2C_Slave_ISR_IT+0x88>
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	2380      	movs	r3, #128	@ 0x80
 8004aac:	049b      	lsls	r3, r3, #18
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d106      	bne.n	8004ac0 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	0011      	movs	r1, r2
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f001 f833 	bl	8005b24 <I2C_ITListenCplt>
 8004abe:	e036      	b.n	8004b2e <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2241      	movs	r2, #65	@ 0x41
 8004ac4:	5c9b      	ldrb	r3, [r3, r2]
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	2b29      	cmp	r3, #41	@ 0x29
 8004aca:	d110      	bne.n	8004aee <I2C_Slave_ISR_IT+0xb6>
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	4a59      	ldr	r2, [pc, #356]	@ (8004c34 <I2C_Slave_ISR_IT+0x1fc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00c      	beq.n	8004aee <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2210      	movs	r2, #16
 8004ada:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f001 f9a3 	bl	8005e2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	0018      	movs	r0, r3
 8004ae8:	f000 fd62 	bl	80055b0 <I2C_ITSlaveSeqCplt>
 8004aec:	e01f      	b.n	8004b2e <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2210      	movs	r2, #16
 8004af4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004af6:	e091      	b.n	8004c1c <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2210      	movs	r2, #16
 8004afe:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b04:	2204      	movs	r2, #4
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <I2C_Slave_ISR_IT+0xe6>
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	2380      	movs	r3, #128	@ 0x80
 8004b16:	045b      	lsls	r3, r3, #17
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d000      	beq.n	8004b1e <I2C_Slave_ISR_IT+0xe6>
 8004b1c:	e07e      	b.n	8004c1c <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	0011      	movs	r1, r2
 8004b26:	0018      	movs	r0, r3
 8004b28:	f001 f854 	bl	8005bd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004b2c:	e076      	b.n	8004c1c <I2C_Slave_ISR_IT+0x1e4>
 8004b2e:	e075      	b.n	8004c1c <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	2204      	movs	r2, #4
 8004b34:	4013      	ands	r3, r2
 8004b36:	d02f      	beq.n	8004b98 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2204      	movs	r2, #4
 8004b3c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004b3e:	d02b      	beq.n	8004b98 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d018      	beq.n	8004b7c <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d14c      	bne.n	8004c20 <I2C_Slave_ISR_IT+0x1e8>
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	4a2a      	ldr	r2, [pc, #168]	@ (8004c34 <I2C_Slave_ISR_IT+0x1fc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d048      	beq.n	8004c20 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	0018      	movs	r0, r3
 8004b92:	f000 fd0d 	bl	80055b0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004b96:	e043      	b.n	8004c20 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	d00a      	beq.n	8004bb6 <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2208      	movs	r2, #8
 8004ba4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004ba6:	d006      	beq.n	8004bb6 <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	0011      	movs	r1, r2
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f000 fc18 	bl	80053e4 <I2C_ITAddrCplt>
 8004bb4:	e035      	b.n	8004c22 <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d031      	beq.n	8004c22 <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004bc4:	d02d      	beq.n	8004c22 <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d018      	beq.n	8004c02 <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd4:	781a      	ldrb	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be0:	1c5a      	adds	r2, r3, #1
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	3b01      	subs	r3, #1
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004c00:	e00f      	b.n	8004c22 <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	2380      	movs	r3, #128	@ 0x80
 8004c06:	045b      	lsls	r3, r3, #17
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d002      	beq.n	8004c12 <I2C_Slave_ISR_IT+0x1da>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d107      	bne.n	8004c22 <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	0018      	movs	r0, r3
 8004c16:	f000 fccb 	bl	80055b0 <I2C_ITSlaveSeqCplt>
 8004c1a:	e002      	b.n	8004c22 <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 8004c1c:	46c0      	nop			@ (mov r8, r8)
 8004c1e:	e000      	b.n	8004c22 <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 8004c20:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2240      	movs	r2, #64	@ 0x40
 8004c26:	2100      	movs	r1, #0
 8004c28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b006      	add	sp, #24
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	ffff0000 	.word	0xffff0000

08004c38 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8004c38:	b590      	push	{r4, r7, lr}
 8004c3a:	b089      	sub	sp, #36	@ 0x24
 8004c3c:	af02      	add	r7, sp, #8
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2240      	movs	r2, #64	@ 0x40
 8004c48:	5c9b      	ldrb	r3, [r3, r2]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <I2C_Master_ISR_DMA+0x1a>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e0e7      	b.n	8004e22 <I2C_Master_ISR_DMA+0x1ea>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2240      	movs	r2, #64	@ 0x40
 8004c56:	2101      	movs	r1, #1
 8004c58:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d017      	beq.n	8004c92 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2210      	movs	r2, #16
 8004c66:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004c68:	d013      	beq.n	8004c92 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2210      	movs	r2, #16
 8004c70:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c76:	2204      	movs	r2, #4
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2120      	movs	r1, #32
 8004c82:	0018      	movs	r0, r3
 8004c84:	f001 fb90 	bl	80063a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	0018      	movs	r0, r3
 8004c8c:	f001 f8cd 	bl	8005e2a <I2C_Flush_TXDR>
 8004c90:	e0c2      	b.n	8004e18 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2280      	movs	r2, #128	@ 0x80
 8004c96:	4013      	ands	r3, r2
 8004c98:	d100      	bne.n	8004c9c <I2C_Master_ISR_DMA+0x64>
 8004c9a:	e07c      	b.n	8004d96 <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2240      	movs	r2, #64	@ 0x40
 8004ca0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004ca2:	d100      	bne.n	8004ca6 <I2C_Master_ISR_DMA+0x6e>
 8004ca4:	e077      	b.n	8004d96 <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2140      	movs	r1, #64	@ 0x40
 8004cb2:	438a      	bics	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d055      	beq.n	8004d6c <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	2312      	movs	r3, #18
 8004cca:	18fb      	adds	r3, r7, r3
 8004ccc:	0592      	lsls	r2, r2, #22
 8004cce:	0d92      	lsrs	r2, r2, #22
 8004cd0:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2bff      	cmp	r3, #255	@ 0xff
 8004cda:	d906      	bls.n	8004cea <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	22ff      	movs	r2, #255	@ 0xff
 8004ce0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8004ce2:	2380      	movs	r3, #128	@ 0x80
 8004ce4:	045b      	lsls	r3, r3, #17
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	e010      	b.n	8004d0c <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	4a4c      	ldr	r2, [pc, #304]	@ (8004e2c <I2C_Master_ISR_DMA+0x1f4>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d003      	beq.n	8004d06 <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e002      	b.n	8004d0c <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8004d06:	2380      	movs	r3, #128	@ 0x80
 8004d08:	049b      	lsls	r3, r3, #18
 8004d0a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d10:	b2da      	uxtb	r2, r3
 8004d12:	697c      	ldr	r4, [r7, #20]
 8004d14:	2312      	movs	r3, #18
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	8819      	ldrh	r1, [r3, #0]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	0023      	movs	r3, r4
 8004d22:	f001 fb07 	bl	8006334 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2241      	movs	r2, #65	@ 0x41
 8004d3c:	5c9b      	ldrb	r3, [r3, r2]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b22      	cmp	r3, #34	@ 0x22
 8004d42:	d109      	bne.n	8004d58 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	0209      	lsls	r1, r1, #8
 8004d52:	430a      	orrs	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d56:	e05f      	b.n	8004e18 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2180      	movs	r1, #128	@ 0x80
 8004d64:	01c9      	lsls	r1, r1, #7
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004d6a:	e055      	b.n	8004e18 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	2380      	movs	r3, #128	@ 0x80
 8004d74:	049b      	lsls	r3, r3, #18
 8004d76:	401a      	ands	r2, r3
 8004d78:	2380      	movs	r3, #128	@ 0x80
 8004d7a:	049b      	lsls	r3, r3, #18
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d004      	beq.n	8004d8a <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	0018      	movs	r0, r3
 8004d84:	f000 fbd2 	bl	800552c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004d88:	e046      	b.n	8004e18 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2140      	movs	r1, #64	@ 0x40
 8004d8e:	0018      	movs	r0, r3
 8004d90:	f000 ff20 	bl	8005bd4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004d94:	e040      	b.n	8004e18 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2240      	movs	r2, #64	@ 0x40
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	d02c      	beq.n	8004df8 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2240      	movs	r2, #64	@ 0x40
 8004da2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004da4:	d028      	beq.n	8004df8 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d11d      	bne.n	8004dec <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	2380      	movs	r3, #128	@ 0x80
 8004db8:	049b      	lsls	r3, r3, #18
 8004dba:	401a      	ands	r2, r3
 8004dbc:	2380      	movs	r3, #128	@ 0x80
 8004dbe:	049b      	lsls	r3, r3, #18
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d028      	beq.n	8004e16 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	4a18      	ldr	r2, [pc, #96]	@ (8004e2c <I2C_Master_ISR_DMA+0x1f4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d109      	bne.n	8004de2 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2180      	movs	r1, #128	@ 0x80
 8004dda:	01c9      	lsls	r1, r1, #7
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004de0:	e019      	b.n	8004e16 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	0018      	movs	r0, r3
 8004de6:	f000 fba1 	bl	800552c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004dea:	e014      	b.n	8004e16 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2140      	movs	r1, #64	@ 0x40
 8004df0:	0018      	movs	r0, r3
 8004df2:	f000 feef 	bl	8005bd4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004df6:	e00e      	b.n	8004e16 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004e06:	d007      	beq.n	8004e18 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	0011      	movs	r1, r2
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f000 fc32 	bl	8005678 <I2C_ITMasterCplt>
 8004e14:	e000      	b.n	8004e18 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8004e16:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2240      	movs	r2, #64	@ 0x40
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	0018      	movs	r0, r3
 8004e24:	46bd      	mov	sp, r7
 8004e26:	b007      	add	sp, #28
 8004e28:	bd90      	pop	{r4, r7, pc}
 8004e2a:	46c0      	nop			@ (mov r8, r8)
 8004e2c:	ffff0000 	.word	0xffff0000

08004e30 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8004e30:	b590      	push	{r4, r7, lr}
 8004e32:	b089      	sub	sp, #36	@ 0x24
 8004e34:	af02      	add	r7, sp, #8
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004e3c:	4b90      	ldr	r3, [pc, #576]	@ (8005080 <I2C_Mem_ISR_DMA+0x250>)
 8004e3e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2240      	movs	r2, #64	@ 0x40
 8004e44:	5c9b      	ldrb	r3, [r3, r2]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <I2C_Mem_ISR_DMA+0x1e>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e113      	b.n	8005076 <I2C_Mem_ISR_DMA+0x246>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2240      	movs	r2, #64	@ 0x40
 8004e52:	2101      	movs	r1, #1
 8004e54:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2210      	movs	r2, #16
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d017      	beq.n	8004e8e <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2210      	movs	r2, #16
 8004e62:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004e64:	d013      	beq.n	8004e8e <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2210      	movs	r2, #16
 8004e6c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e72:	2204      	movs	r2, #4
 8004e74:	431a      	orrs	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2120      	movs	r1, #32
 8004e7e:	0018      	movs	r0, r3
 8004e80:	f001 fa92 	bl	80063a8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	0018      	movs	r0, r3
 8004e88:	f000 ffcf 	bl	8005e2a <I2C_Flush_TXDR>
 8004e8c:	e0ee      	b.n	800506c <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2202      	movs	r2, #2
 8004e92:	4013      	ands	r3, r2
 8004e94:	d00d      	beq.n	8004eb2 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004e9c:	d009      	beq.n	8004eb2 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ea6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	4252      	negs	r2, r2
 8004eae:	651a      	str	r2, [r3, #80]	@ 0x50
 8004eb0:	e0dc      	b.n	800506c <I2C_Mem_ISR_DMA+0x23c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2280      	movs	r2, #128	@ 0x80
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	d063      	beq.n	8004f82 <I2C_Mem_ISR_DMA+0x152>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2240      	movs	r2, #64	@ 0x40
 8004ebe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004ec0:	d05f      	beq.n	8004f82 <I2C_Mem_ISR_DMA+0x152>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f001 faf8 	bl	80064bc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2110      	movs	r1, #16
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	f001 fa69 	bl	80063a8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d04a      	beq.n	8004f76 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2bff      	cmp	r3, #255	@ 0xff
 8004ee8:	d910      	bls.n	8004f0c <I2C_Mem_ISR_DMA+0xdc>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	22ff      	movs	r2, #255	@ 0xff
 8004eee:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ef4:	b299      	uxth	r1, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	2380      	movs	r3, #128	@ 0x80
 8004efe:	045b      	lsls	r3, r3, #17
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	2400      	movs	r4, #0
 8004f04:	9400      	str	r4, [sp, #0]
 8004f06:	f001 fa15 	bl	8006334 <I2C_TransferConfig>
 8004f0a:	e011      	b.n	8004f30 <I2C_Mem_ISR_DMA+0x100>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1a:	b299      	uxth	r1, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	2380      	movs	r3, #128	@ 0x80
 8004f24:	049b      	lsls	r3, r3, #18
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	2400      	movs	r4, #0
 8004f2a:	9400      	str	r4, [sp, #0]
 8004f2c:	f001 fa02 	bl	8006334 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2241      	movs	r2, #65	@ 0x41
 8004f46:	5c9b      	ldrb	r3, [r3, r2]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b22      	cmp	r3, #34	@ 0x22
 8004f4c:	d109      	bne.n	8004f62 <I2C_Mem_ISR_DMA+0x132>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2180      	movs	r1, #128	@ 0x80
 8004f5a:	0209      	lsls	r1, r1, #8
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f60:	e084      	b.n	800506c <I2C_Mem_ISR_DMA+0x23c>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2180      	movs	r1, #128	@ 0x80
 8004f6e:	01c9      	lsls	r1, r1, #7
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004f74:	e07a      	b.n	800506c <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2140      	movs	r1, #64	@ 0x40
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	f000 fe2a 	bl	8005bd4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004f80:	e074      	b.n	800506c <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2240      	movs	r2, #64	@ 0x40
 8004f86:	4013      	ands	r3, r2
 8004f88:	d062      	beq.n	8005050 <I2C_Mem_ISR_DMA+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2240      	movs	r2, #64	@ 0x40
 8004f8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004f90:	d05e      	beq.n	8005050 <I2C_Mem_ISR_DMA+0x220>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2101      	movs	r1, #1
 8004f96:	0018      	movs	r0, r3
 8004f98:	f001 fa90 	bl	80064bc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2110      	movs	r1, #16
 8004fa0:	0018      	movs	r0, r3
 8004fa2:	f001 fa01 	bl	80063a8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2241      	movs	r2, #65	@ 0x41
 8004faa:	5c9b      	ldrb	r3, [r3, r2]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b22      	cmp	r3, #34	@ 0x22
 8004fb0:	d101      	bne.n	8004fb6 <I2C_Mem_ISR_DMA+0x186>
    {
      direction = I2C_GENERATE_START_READ;
 8004fb2:	4b34      	ldr	r3, [pc, #208]	@ (8005084 <I2C_Mem_ISR_DMA+0x254>)
 8004fb4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2bff      	cmp	r3, #255	@ 0xff
 8004fbe:	d911      	bls.n	8004fe4 <I2C_Mem_ISR_DMA+0x1b4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	22ff      	movs	r2, #255	@ 0xff
 8004fc4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fca:	b299      	uxth	r1, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	2380      	movs	r3, #128	@ 0x80
 8004fd4:	045c      	lsls	r4, r3, #17
 8004fd6:	68f8      	ldr	r0, [r7, #12]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	0023      	movs	r3, r4
 8004fde:	f001 f9a9 	bl	8006334 <I2C_TransferConfig>
 8004fe2:	e012      	b.n	800500a <I2C_Mem_ISR_DMA+0x1da>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff2:	b299      	uxth	r1, r3
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	049c      	lsls	r4, r3, #18
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	0023      	movs	r3, r4
 8005006:	f001 f995 	bl	8006334 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2241      	movs	r2, #65	@ 0x41
 8005020:	5c9b      	ldrb	r3, [r3, r2]
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b22      	cmp	r3, #34	@ 0x22
 8005026:	d109      	bne.n	800503c <I2C_Mem_ISR_DMA+0x20c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2180      	movs	r1, #128	@ 0x80
 8005034:	0209      	lsls	r1, r1, #8
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800503a:	e017      	b.n	800506c <I2C_Mem_ISR_DMA+0x23c>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2180      	movs	r1, #128	@ 0x80
 8005048:	01c9      	lsls	r1, r1, #7
 800504a:	430a      	orrs	r2, r1
 800504c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800504e:	e00d      	b.n	800506c <I2C_Mem_ISR_DMA+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	2220      	movs	r2, #32
 8005054:	4013      	ands	r3, r2
 8005056:	d009      	beq.n	800506c <I2C_Mem_ISR_DMA+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800505e:	d005      	beq.n	800506c <I2C_Mem_ISR_DMA+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	0011      	movs	r1, r2
 8005066:	0018      	movs	r0, r3
 8005068:	f000 fb06 	bl	8005678 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2240      	movs	r2, #64	@ 0x40
 8005070:	2100      	movs	r1, #0
 8005072:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	0018      	movs	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	b007      	add	sp, #28
 800507c:	bd90      	pop	{r4, r7, pc}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	80002000 	.word	0x80002000
 8005084:	80002400 	.word	0x80002400

08005088 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2240      	movs	r2, #64	@ 0x40
 80050a2:	5c9b      	ldrb	r3, [r3, r2]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <I2C_Slave_ISR_DMA+0x24>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e0ce      	b.n	800524a <I2C_Slave_ISR_DMA+0x1c2>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2240      	movs	r2, #64	@ 0x40
 80050b0:	2101      	movs	r1, #1
 80050b2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2220      	movs	r2, #32
 80050b8:	4013      	ands	r3, r2
 80050ba:	d00a      	beq.n	80050d2 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2220      	movs	r2, #32
 80050c0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050c2:	d006      	beq.n	80050d2 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	0011      	movs	r1, r2
 80050ca:	0018      	movs	r0, r3
 80050cc:	f000 fba2 	bl	8005814 <I2C_ITSlaveCplt>
 80050d0:	e0b6      	b.n	8005240 <I2C_Slave_ISR_DMA+0x1b8>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	2210      	movs	r2, #16
 80050d6:	4013      	ands	r3, r2
 80050d8:	d100      	bne.n	80050dc <I2C_Slave_ISR_DMA+0x54>
 80050da:	e0a3      	b.n	8005224 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2210      	movs	r2, #16
 80050e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80050e2:	d100      	bne.n	80050e6 <I2C_Slave_ISR_DMA+0x5e>
 80050e4:	e09e      	b.n	8005224 <I2C_Slave_ISR_DMA+0x19c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	01db      	lsls	r3, r3, #7
 80050ec:	4013      	ands	r3, r2
 80050ee:	d105      	bne.n	80050fc <I2C_Slave_ISR_DMA+0x74>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	2380      	movs	r3, #128	@ 0x80
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80050f8:	d100      	bne.n	80050fc <I2C_Slave_ISR_DMA+0x74>
 80050fa:	e08c      	b.n	8005216 <I2C_Slave_ISR_DMA+0x18e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00c      	beq.n	800511e <I2C_Slave_ISR_DMA+0x96>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	2380      	movs	r3, #128	@ 0x80
 8005108:	021b      	lsls	r3, r3, #8
 800510a:	4013      	ands	r3, r2
 800510c:	d007      	beq.n	800511e <I2C_Slave_ISR_DMA+0x96>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <I2C_Slave_ISR_DMA+0x96>
          {
            treatdmanack = 1U;
 800511a:	2301      	movs	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00c      	beq.n	8005140 <I2C_Slave_ISR_DMA+0xb8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	01db      	lsls	r3, r3, #7
 800512c:	4013      	ands	r3, r2
 800512e:	d007      	beq.n	8005140 <I2C_Slave_ISR_DMA+0xb8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <I2C_Slave_ISR_DMA+0xb8>
          {
            treatdmanack = 1U;
 800513c:	2301      	movs	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d12d      	bne.n	80051a2 <I2C_Slave_ISR_DMA+0x11a>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2241      	movs	r2, #65	@ 0x41
 800514a:	5c9b      	ldrb	r3, [r3, r2]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b28      	cmp	r3, #40	@ 0x28
 8005150:	d10b      	bne.n	800516a <I2C_Slave_ISR_DMA+0xe2>
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	2380      	movs	r3, #128	@ 0x80
 8005156:	049b      	lsls	r3, r3, #18
 8005158:	429a      	cmp	r2, r3
 800515a:	d106      	bne.n	800516a <I2C_Slave_ISR_DMA+0xe2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	0011      	movs	r1, r2
 8005162:	0018      	movs	r0, r3
 8005164:	f000 fcde 	bl	8005b24 <I2C_ITListenCplt>
 8005168:	e054      	b.n	8005214 <I2C_Slave_ISR_DMA+0x18c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2241      	movs	r2, #65	@ 0x41
 800516e:	5c9b      	ldrb	r3, [r3, r2]
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b29      	cmp	r3, #41	@ 0x29
 8005174:	d110      	bne.n	8005198 <I2C_Slave_ISR_DMA+0x110>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	4a36      	ldr	r2, [pc, #216]	@ (8005254 <I2C_Slave_ISR_DMA+0x1cc>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00c      	beq.n	8005198 <I2C_Slave_ISR_DMA+0x110>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2210      	movs	r2, #16
 8005184:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	0018      	movs	r0, r3
 800518a:	f000 fe4e 	bl	8005e2a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	0018      	movs	r0, r3
 8005192:	f000 fa0d 	bl	80055b0 <I2C_ITSlaveSeqCplt>
 8005196:	e03d      	b.n	8005214 <I2C_Slave_ISR_DMA+0x18c>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2210      	movs	r2, #16
 800519e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80051a0:	e03e      	b.n	8005220 <I2C_Slave_ISR_DMA+0x198>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2210      	movs	r2, #16
 80051a8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ae:	2204      	movs	r2, #4
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80051b6:	2317      	movs	r3, #23
 80051b8:	18fb      	adds	r3, r7, r3
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	2141      	movs	r1, #65	@ 0x41
 80051be:	5c52      	ldrb	r2, [r2, r1]
 80051c0:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <I2C_Slave_ISR_DMA+0x14a>
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	2380      	movs	r3, #128	@ 0x80
 80051cc:	045b      	lsls	r3, r3, #17
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d126      	bne.n	8005220 <I2C_Slave_ISR_DMA+0x198>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80051d2:	2217      	movs	r2, #23
 80051d4:	18bb      	adds	r3, r7, r2
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b21      	cmp	r3, #33	@ 0x21
 80051da:	d003      	beq.n	80051e4 <I2C_Slave_ISR_DMA+0x15c>
 80051dc:	18bb      	adds	r3, r7, r2
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b29      	cmp	r3, #41	@ 0x29
 80051e2:	d103      	bne.n	80051ec <I2C_Slave_ISR_DMA+0x164>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2221      	movs	r2, #33	@ 0x21
 80051e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80051ea:	e00b      	b.n	8005204 <I2C_Slave_ISR_DMA+0x17c>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051ec:	2217      	movs	r2, #23
 80051ee:	18bb      	adds	r3, r7, r2
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b22      	cmp	r3, #34	@ 0x22
 80051f4:	d003      	beq.n	80051fe <I2C_Slave_ISR_DMA+0x176>
 80051f6:	18bb      	adds	r3, r7, r2
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80051fc:	d102      	bne.n	8005204 <I2C_Slave_ISR_DMA+0x17c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2222      	movs	r2, #34	@ 0x22
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	0011      	movs	r1, r2
 800520c:	0018      	movs	r0, r3
 800520e:	f000 fce1 	bl	8005bd4 <I2C_ITError>
      if (treatdmanack == 1U)
 8005212:	e005      	b.n	8005220 <I2C_Slave_ISR_DMA+0x198>
 8005214:	e004      	b.n	8005220 <I2C_Slave_ISR_DMA+0x198>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2210      	movs	r2, #16
 800521c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800521e:	e00f      	b.n	8005240 <I2C_Slave_ISR_DMA+0x1b8>
      if (treatdmanack == 1U)
 8005220:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005222:	e00d      	b.n	8005240 <I2C_Slave_ISR_DMA+0x1b8>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2208      	movs	r2, #8
 8005228:	4013      	ands	r3, r2
 800522a:	d009      	beq.n	8005240 <I2C_Slave_ISR_DMA+0x1b8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2208      	movs	r2, #8
 8005230:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005232:	d005      	beq.n	8005240 <I2C_Slave_ISR_DMA+0x1b8>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	0011      	movs	r1, r2
 800523a:	0018      	movs	r0, r3
 800523c:	f000 f8d2 	bl	80053e4 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2240      	movs	r2, #64	@ 0x40
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	0018      	movs	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	b008      	add	sp, #32
 8005250:	bd80      	pop	{r7, pc}
 8005252:	46c0      	nop			@ (mov r8, r8)
 8005254:	ffff0000 	.word	0xffff0000

08005258 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005258:	b5b0      	push	{r4, r5, r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	000c      	movs	r4, r1
 8005262:	0010      	movs	r0, r2
 8005264:	0019      	movs	r1, r3
 8005266:	250a      	movs	r5, #10
 8005268:	197b      	adds	r3, r7, r5
 800526a:	1c22      	adds	r2, r4, #0
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	2308      	movs	r3, #8
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	1c02      	adds	r2, r0, #0
 8005274:	801a      	strh	r2, [r3, #0]
 8005276:	1dbb      	adds	r3, r7, #6
 8005278:	1c0a      	adds	r2, r1, #0
 800527a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800527c:	1dbb      	adds	r3, r7, #6
 800527e:	881b      	ldrh	r3, [r3, #0]
 8005280:	b2da      	uxtb	r2, r3
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	045c      	lsls	r4, r3, #17
 8005286:	197b      	adds	r3, r7, r5
 8005288:	8819      	ldrh	r1, [r3, #0]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	4b23      	ldr	r3, [pc, #140]	@ (800531c <I2C_RequestMemoryWrite+0xc4>)
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	0023      	movs	r3, r4
 8005292:	f001 f84f 	bl	8006334 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005296:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005298:	6a39      	ldr	r1, [r7, #32]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	0018      	movs	r0, r3
 800529e:	f000 fec7 	bl	8006030 <I2C_WaitOnTXISFlagUntilTimeout>
 80052a2:	1e03      	subs	r3, r0, #0
 80052a4:	d001      	beq.n	80052aa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e033      	b.n	8005312 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052aa:	1dbb      	adds	r3, r7, #6
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d107      	bne.n	80052c2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052b2:	2308      	movs	r3, #8
 80052b4:	18fb      	adds	r3, r7, r3
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	629a      	str	r2, [r3, #40]	@ 0x28
 80052c0:	e019      	b.n	80052f6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052c2:	2308      	movs	r3, #8
 80052c4:	18fb      	adds	r3, r7, r3
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	0a1b      	lsrs	r3, r3, #8
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d6:	6a39      	ldr	r1, [r7, #32]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 fea8 	bl	8006030 <I2C_WaitOnTXISFlagUntilTimeout>
 80052e0:	1e03      	subs	r3, r0, #0
 80052e2:	d001      	beq.n	80052e8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e014      	b.n	8005312 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052e8:	2308      	movs	r3, #8
 80052ea:	18fb      	adds	r3, r7, r3
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	0013      	movs	r3, r2
 8005300:	2200      	movs	r2, #0
 8005302:	2180      	movs	r1, #128	@ 0x80
 8005304:	f000 fe3c 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 8005308:	1e03      	subs	r3, r0, #0
 800530a:	d001      	beq.n	8005310 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e000      	b.n	8005312 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	0018      	movs	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	b004      	add	sp, #16
 8005318:	bdb0      	pop	{r4, r5, r7, pc}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	80002000 	.word	0x80002000

08005320 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005320:	b5b0      	push	{r4, r5, r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	000c      	movs	r4, r1
 800532a:	0010      	movs	r0, r2
 800532c:	0019      	movs	r1, r3
 800532e:	250a      	movs	r5, #10
 8005330:	197b      	adds	r3, r7, r5
 8005332:	1c22      	adds	r2, r4, #0
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	2308      	movs	r3, #8
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	1c02      	adds	r2, r0, #0
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	1dbb      	adds	r3, r7, #6
 8005340:	1c0a      	adds	r2, r1, #0
 8005342:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005344:	1dbb      	adds	r3, r7, #6
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b2da      	uxtb	r2, r3
 800534a:	197b      	adds	r3, r7, r5
 800534c:	8819      	ldrh	r1, [r3, #0]
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	4b23      	ldr	r3, [pc, #140]	@ (80053e0 <I2C_RequestMemoryRead+0xc0>)
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2300      	movs	r3, #0
 8005356:	f000 ffed 	bl	8006334 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800535c:	6a39      	ldr	r1, [r7, #32]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	0018      	movs	r0, r3
 8005362:	f000 fe65 	bl	8006030 <I2C_WaitOnTXISFlagUntilTimeout>
 8005366:	1e03      	subs	r3, r0, #0
 8005368:	d001      	beq.n	800536e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e033      	b.n	80053d6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800536e:	1dbb      	adds	r3, r7, #6
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d107      	bne.n	8005386 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005376:	2308      	movs	r3, #8
 8005378:	18fb      	adds	r3, r7, r3
 800537a:	881b      	ldrh	r3, [r3, #0]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	629a      	str	r2, [r3, #40]	@ 0x28
 8005384:	e019      	b.n	80053ba <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005386:	2308      	movs	r3, #8
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	881b      	ldrh	r3, [r3, #0]
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	b29b      	uxth	r3, r3
 8005390:	b2da      	uxtb	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539a:	6a39      	ldr	r1, [r7, #32]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 fe46 	bl	8006030 <I2C_WaitOnTXISFlagUntilTimeout>
 80053a4:	1e03      	subs	r3, r0, #0
 80053a6:	d001      	beq.n	80053ac <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e014      	b.n	80053d6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80053ac:	2308      	movs	r3, #8
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	9300      	str	r3, [sp, #0]
 80053c2:	0013      	movs	r3, r2
 80053c4:	2200      	movs	r2, #0
 80053c6:	2140      	movs	r1, #64	@ 0x40
 80053c8:	f000 fdda 	bl	8005f80 <I2C_WaitOnFlagUntilTimeout>
 80053cc:	1e03      	subs	r3, r0, #0
 80053ce:	d001      	beq.n	80053d4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	0018      	movs	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	b004      	add	sp, #16
 80053dc:	bdb0      	pop	{r4, r5, r7, pc}
 80053de:	46c0      	nop			@ (mov r8, r8)
 80053e0:	80002000 	.word	0x80002000

080053e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80053e4:	b5b0      	push	{r4, r5, r7, lr}
 80053e6:	b084      	sub	sp, #16
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2241      	movs	r2, #65	@ 0x41
 80053f2:	5c9b      	ldrb	r3, [r3, r2]
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	001a      	movs	r2, r3
 80053f8:	2328      	movs	r3, #40	@ 0x28
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b28      	cmp	r3, #40	@ 0x28
 80053fe:	d000      	beq.n	8005402 <I2C_ITAddrCplt+0x1e>
 8005400:	e088      	b.n	8005514 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	0c1b      	lsrs	r3, r3, #16
 800540a:	b2da      	uxtb	r2, r3
 800540c:	250f      	movs	r5, #15
 800540e:	197b      	adds	r3, r7, r5
 8005410:	2101      	movs	r1, #1
 8005412:	400a      	ands	r2, r1
 8005414:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	0c1b      	lsrs	r3, r3, #16
 800541e:	b29a      	uxth	r2, r3
 8005420:	200c      	movs	r0, #12
 8005422:	183b      	adds	r3, r7, r0
 8005424:	21fe      	movs	r1, #254	@ 0xfe
 8005426:	400a      	ands	r2, r1
 8005428:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	b29a      	uxth	r2, r3
 8005432:	240a      	movs	r4, #10
 8005434:	193b      	adds	r3, r7, r4
 8005436:	0592      	lsls	r2, r2, #22
 8005438:	0d92      	lsrs	r2, r2, #22
 800543a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	b29a      	uxth	r2, r3
 8005444:	2308      	movs	r3, #8
 8005446:	18fb      	adds	r3, r7, r3
 8005448:	21fe      	movs	r1, #254	@ 0xfe
 800544a:	400a      	ands	r2, r1
 800544c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d148      	bne.n	80054e8 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005456:	0021      	movs	r1, r4
 8005458:	187b      	adds	r3, r7, r1
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	09db      	lsrs	r3, r3, #7
 800545e:	b29a      	uxth	r2, r3
 8005460:	183b      	adds	r3, r7, r0
 8005462:	881b      	ldrh	r3, [r3, #0]
 8005464:	4053      	eors	r3, r2
 8005466:	b29b      	uxth	r3, r3
 8005468:	001a      	movs	r2, r3
 800546a:	2306      	movs	r3, #6
 800546c:	4013      	ands	r3, r2
 800546e:	d120      	bne.n	80054b2 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005470:	183b      	adds	r3, r7, r0
 8005472:	187a      	adds	r2, r7, r1
 8005474:	8812      	ldrh	r2, [r2, #0]
 8005476:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005486:	2b02      	cmp	r3, #2
 8005488:	d14c      	bne.n	8005524 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2208      	movs	r2, #8
 8005496:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2240      	movs	r2, #64	@ 0x40
 800549c:	2100      	movs	r1, #0
 800549e:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80054a0:	183b      	adds	r3, r7, r0
 80054a2:	881a      	ldrh	r2, [r3, #0]
 80054a4:	197b      	adds	r3, r7, r5
 80054a6:	7819      	ldrb	r1, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	0018      	movs	r0, r3
 80054ac:	f7ff fa93 	bl	80049d6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054b0:	e038      	b.n	8005524 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80054b2:	240c      	movs	r4, #12
 80054b4:	193b      	adds	r3, r7, r4
 80054b6:	2208      	movs	r2, #8
 80054b8:	18ba      	adds	r2, r7, r2
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	021a      	lsls	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	0011      	movs	r1, r2
 80054c6:	0018      	movs	r0, r3
 80054c8:	f000 fff8 	bl	80064bc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2240      	movs	r2, #64	@ 0x40
 80054d0:	2100      	movs	r1, #0
 80054d2:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80054d4:	193b      	adds	r3, r7, r4
 80054d6:	881a      	ldrh	r2, [r3, #0]
 80054d8:	230f      	movs	r3, #15
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	7819      	ldrb	r1, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	0018      	movs	r0, r3
 80054e2:	f7ff fa78 	bl	80049d6 <HAL_I2C_AddrCallback>
}
 80054e6:	e01d      	b.n	8005524 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80054e8:	2380      	movs	r3, #128	@ 0x80
 80054ea:	021a      	lsls	r2, r3, #8
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	0011      	movs	r1, r2
 80054f0:	0018      	movs	r0, r3
 80054f2:	f000 ffe3 	bl	80064bc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2240      	movs	r2, #64	@ 0x40
 80054fa:	2100      	movs	r1, #0
 80054fc:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80054fe:	230c      	movs	r3, #12
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	881a      	ldrh	r2, [r3, #0]
 8005504:	230f      	movs	r3, #15
 8005506:	18fb      	adds	r3, r7, r3
 8005508:	7819      	ldrb	r1, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	0018      	movs	r0, r3
 800550e:	f7ff fa62 	bl	80049d6 <HAL_I2C_AddrCallback>
}
 8005512:	e007      	b.n	8005524 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2208      	movs	r2, #8
 800551a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2240      	movs	r2, #64	@ 0x40
 8005520:	2100      	movs	r1, #0
 8005522:	5499      	strb	r1, [r3, r2]
}
 8005524:	46c0      	nop			@ (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	b004      	add	sp, #16
 800552a:	bdb0      	pop	{r4, r5, r7, pc}

0800552c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2242      	movs	r2, #66	@ 0x42
 8005538:	2100      	movs	r1, #0
 800553a:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2241      	movs	r2, #65	@ 0x41
 8005540:	5c9b      	ldrb	r3, [r3, r2]
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b21      	cmp	r3, #33	@ 0x21
 8005546:	d117      	bne.n	8005578 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2241      	movs	r2, #65	@ 0x41
 800554c:	2120      	movs	r1, #32
 800554e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2211      	movs	r2, #17
 8005554:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2101      	movs	r1, #1
 8005560:	0018      	movs	r0, r3
 8005562:	f000 ffab 	bl	80064bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2240      	movs	r2, #64	@ 0x40
 800556a:	2100      	movs	r1, #0
 800556c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	0018      	movs	r0, r3
 8005572:	f7ff fa10 	bl	8004996 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005576:	e016      	b.n	80055a6 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2241      	movs	r2, #65	@ 0x41
 800557c:	2120      	movs	r1, #32
 800557e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2212      	movs	r2, #18
 8005584:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2102      	movs	r1, #2
 8005590:	0018      	movs	r0, r3
 8005592:	f000 ff93 	bl	80064bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2240      	movs	r2, #64	@ 0x40
 800559a:	2100      	movs	r1, #0
 800559c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f7ff fa00 	bl	80049a6 <HAL_I2C_MasterRxCpltCallback>
}
 80055a6:	46c0      	nop			@ (mov r8, r8)
 80055a8:	46bd      	mov	sp, r7
 80055aa:	b002      	add	sp, #8
 80055ac:	bd80      	pop	{r7, pc}
	...

080055b0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2242      	movs	r2, #66	@ 0x42
 80055c4:	2100      	movs	r1, #0
 80055c6:	5499      	strb	r1, [r3, r2]

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	2380      	movs	r3, #128	@ 0x80
 80055cc:	01db      	lsls	r3, r3, #7
 80055ce:	4013      	ands	r3, r2
 80055d0:	d008      	beq.n	80055e4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4924      	ldr	r1, [pc, #144]	@ (8005670 <I2C_ITSlaveSeqCplt+0xc0>)
 80055de:	400a      	ands	r2, r1
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e00c      	b.n	80055fe <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	2380      	movs	r3, #128	@ 0x80
 80055e8:	021b      	lsls	r3, r3, #8
 80055ea:	4013      	ands	r3, r2
 80055ec:	d007      	beq.n	80055fe <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	491e      	ldr	r1, [pc, #120]	@ (8005674 <I2C_ITSlaveSeqCplt+0xc4>)
 80055fa:	400a      	ands	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2241      	movs	r2, #65	@ 0x41
 8005602:	5c9b      	ldrb	r3, [r3, r2]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b29      	cmp	r3, #41	@ 0x29
 8005608:	d114      	bne.n	8005634 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2241      	movs	r2, #65	@ 0x41
 800560e:	2128      	movs	r1, #40	@ 0x28
 8005610:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2221      	movs	r2, #33	@ 0x21
 8005616:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2101      	movs	r1, #1
 800561c:	0018      	movs	r0, r3
 800561e:	f000 ff4d 	bl	80064bc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2240      	movs	r2, #64	@ 0x40
 8005626:	2100      	movs	r1, #0
 8005628:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	0018      	movs	r0, r3
 800562e:	f7ff f9c2 	bl	80049b6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005632:	e019      	b.n	8005668 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2241      	movs	r2, #65	@ 0x41
 8005638:	5c9b      	ldrb	r3, [r3, r2]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b2a      	cmp	r3, #42	@ 0x2a
 800563e:	d113      	bne.n	8005668 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2241      	movs	r2, #65	@ 0x41
 8005644:	2128      	movs	r1, #40	@ 0x28
 8005646:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2222      	movs	r2, #34	@ 0x22
 800564c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2102      	movs	r1, #2
 8005652:	0018      	movs	r0, r3
 8005654:	f000 ff32 	bl	80064bc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2240      	movs	r2, #64	@ 0x40
 800565c:	2100      	movs	r1, #0
 800565e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	0018      	movs	r0, r3
 8005664:	f7ff f9af 	bl	80049c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005668:	46c0      	nop			@ (mov r8, r8)
 800566a:	46bd      	mov	sp, r7
 800566c:	b004      	add	sp, #16
 800566e:	bd80      	pop	{r7, pc}
 8005670:	ffffbfff 	.word	0xffffbfff
 8005674:	ffff7fff 	.word	0xffff7fff

08005678 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b086      	sub	sp, #24
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2220      	movs	r2, #32
 800568c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2241      	movs	r2, #65	@ 0x41
 8005692:	5c9b      	ldrb	r3, [r3, r2]
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b21      	cmp	r3, #33	@ 0x21
 8005698:	d108      	bne.n	80056ac <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2101      	movs	r1, #1
 800569e:	0018      	movs	r0, r3
 80056a0:	f000 ff0c 	bl	80064bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2211      	movs	r2, #17
 80056a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80056aa:	e00d      	b.n	80056c8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2241      	movs	r2, #65	@ 0x41
 80056b0:	5c9b      	ldrb	r3, [r3, r2]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b22      	cmp	r3, #34	@ 0x22
 80056b6:	d107      	bne.n	80056c8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2102      	movs	r1, #2
 80056bc:	0018      	movs	r0, r3
 80056be:	f000 fefd 	bl	80064bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2212      	movs	r2, #18
 80056c6:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	494e      	ldr	r1, [pc, #312]	@ (800580c <I2C_ITMasterCplt+0x194>)
 80056d4:	400a      	ands	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005810 <I2C_ITMasterCplt+0x198>)
 80056e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2210      	movs	r2, #16
 80056e8:	4013      	ands	r3, r2
 80056ea:	d009      	beq.n	8005700 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2210      	movs	r2, #16
 80056f2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f8:	2204      	movs	r2, #4
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2241      	movs	r2, #65	@ 0x41
 8005704:	5c9b      	ldrb	r3, [r3, r2]
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b60      	cmp	r3, #96	@ 0x60
 800570a:	d109      	bne.n	8005720 <I2C_ITMasterCplt+0xa8>
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	2204      	movs	r2, #4
 8005710:	4013      	ands	r3, r2
 8005712:	d005      	beq.n	8005720 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	b2db      	uxtb	r3, r3
 800571c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800571e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	0018      	movs	r0, r3
 8005724:	f000 fb81 	bl	8005e2a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2241      	movs	r2, #65	@ 0x41
 8005732:	5c9b      	ldrb	r3, [r3, r2]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b60      	cmp	r3, #96	@ 0x60
 8005738:	d002      	beq.n	8005740 <I2C_ITMasterCplt+0xc8>
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	0011      	movs	r1, r2
 8005748:	0018      	movs	r0, r3
 800574a:	f000 fa43 	bl	8005bd4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800574e:	e058      	b.n	8005802 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2241      	movs	r2, #65	@ 0x41
 8005754:	5c9b      	ldrb	r3, [r3, r2]
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b21      	cmp	r3, #33	@ 0x21
 800575a:	d126      	bne.n	80057aa <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2241      	movs	r2, #65	@ 0x41
 8005760:	2120      	movs	r1, #32
 8005762:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2242      	movs	r2, #66	@ 0x42
 800576e:	5c9b      	ldrb	r3, [r3, r2]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b40      	cmp	r3, #64	@ 0x40
 8005774:	d10c      	bne.n	8005790 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2242      	movs	r2, #66	@ 0x42
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2240      	movs	r2, #64	@ 0x40
 8005782:	2100      	movs	r1, #0
 8005784:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	0018      	movs	r0, r3
 800578a:	f7ff f93c 	bl	8004a06 <HAL_I2C_MemTxCpltCallback>
}
 800578e:	e038      	b.n	8005802 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2242      	movs	r2, #66	@ 0x42
 8005794:	2100      	movs	r1, #0
 8005796:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2240      	movs	r2, #64	@ 0x40
 800579c:	2100      	movs	r1, #0
 800579e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	0018      	movs	r0, r3
 80057a4:	f7ff f8f7 	bl	8004996 <HAL_I2C_MasterTxCpltCallback>
}
 80057a8:	e02b      	b.n	8005802 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2241      	movs	r2, #65	@ 0x41
 80057ae:	5c9b      	ldrb	r3, [r3, r2]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b22      	cmp	r3, #34	@ 0x22
 80057b4:	d125      	bne.n	8005802 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2241      	movs	r2, #65	@ 0x41
 80057ba:	2120      	movs	r1, #32
 80057bc:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2242      	movs	r2, #66	@ 0x42
 80057c8:	5c9b      	ldrb	r3, [r3, r2]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b40      	cmp	r3, #64	@ 0x40
 80057ce:	d10c      	bne.n	80057ea <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2242      	movs	r2, #66	@ 0x42
 80057d4:	2100      	movs	r1, #0
 80057d6:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2240      	movs	r2, #64	@ 0x40
 80057dc:	2100      	movs	r1, #0
 80057de:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	0018      	movs	r0, r3
 80057e4:	f7fc fec6 	bl	8002574 <HAL_I2C_MemRxCpltCallback>
}
 80057e8:	e00b      	b.n	8005802 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2242      	movs	r2, #66	@ 0x42
 80057ee:	2100      	movs	r1, #0
 80057f0:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2240      	movs	r2, #64	@ 0x40
 80057f6:	2100      	movs	r1, #0
 80057f8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	0018      	movs	r0, r3
 80057fe:	f7ff f8d2 	bl	80049a6 <HAL_I2C_MasterRxCpltCallback>
}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	46bd      	mov	sp, r7
 8005806:	b006      	add	sp, #24
 8005808:	bd80      	pop	{r7, pc}
 800580a:	46c0      	nop			@ (mov r8, r8)
 800580c:	fe00e800 	.word	0xfe00e800
 8005810:	ffff0000 	.word	0xffff0000

08005814 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005830:	200b      	movs	r0, #11
 8005832:	183b      	adds	r3, r7, r0
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	2141      	movs	r1, #65	@ 0x41
 8005838:	5c52      	ldrb	r2, [r2, r1]
 800583a:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2220      	movs	r2, #32
 8005842:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005844:	183b      	adds	r3, r7, r0
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b21      	cmp	r3, #33	@ 0x21
 800584a:	d003      	beq.n	8005854 <I2C_ITSlaveCplt+0x40>
 800584c:	183b      	adds	r3, r7, r0
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b29      	cmp	r3, #41	@ 0x29
 8005852:	d109      	bne.n	8005868 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005854:	4aac      	ldr	r2, [pc, #688]	@ (8005b08 <I2C_ITSlaveCplt+0x2f4>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0011      	movs	r1, r2
 800585a:	0018      	movs	r0, r3
 800585c:	f000 fe2e 	bl	80064bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2221      	movs	r2, #33	@ 0x21
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30
 8005866:	e020      	b.n	80058aa <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005868:	220b      	movs	r2, #11
 800586a:	18bb      	adds	r3, r7, r2
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b22      	cmp	r3, #34	@ 0x22
 8005870:	d003      	beq.n	800587a <I2C_ITSlaveCplt+0x66>
 8005872:	18bb      	adds	r3, r7, r2
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b2a      	cmp	r3, #42	@ 0x2a
 8005878:	d109      	bne.n	800588e <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800587a:	4aa4      	ldr	r2, [pc, #656]	@ (8005b0c <I2C_ITSlaveCplt+0x2f8>)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	0011      	movs	r1, r2
 8005880:	0018      	movs	r0, r3
 8005882:	f000 fe1b 	bl	80064bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2222      	movs	r2, #34	@ 0x22
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30
 800588c:	e00d      	b.n	80058aa <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800588e:	230b      	movs	r3, #11
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b28      	cmp	r3, #40	@ 0x28
 8005896:	d108      	bne.n	80058aa <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005898:	4a9d      	ldr	r2, [pc, #628]	@ (8005b10 <I2C_ITSlaveCplt+0x2fc>)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	0011      	movs	r1, r2
 800589e:	0018      	movs	r0, r3
 80058a0:	f000 fe0c 	bl	80064bc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2180      	movs	r1, #128	@ 0x80
 80058b6:	0209      	lsls	r1, r1, #8
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4993      	ldr	r1, [pc, #588]	@ (8005b14 <I2C_ITSlaveCplt+0x300>)
 80058c8:	400a      	ands	r2, r1
 80058ca:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	0018      	movs	r0, r3
 80058d0:	f000 faab 	bl	8005e2a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	2380      	movs	r3, #128	@ 0x80
 80058d8:	01db      	lsls	r3, r3, #7
 80058da:	4013      	ands	r3, r2
 80058dc:	d013      	beq.n	8005906 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	498b      	ldr	r1, [pc, #556]	@ (8005b18 <I2C_ITSlaveCplt+0x304>)
 80058ea:	400a      	ands	r2, r1
 80058ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d01f      	beq.n	8005936 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	b29a      	uxth	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005904:	e017      	b.n	8005936 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	2380      	movs	r3, #128	@ 0x80
 800590a:	021b      	lsls	r3, r3, #8
 800590c:	4013      	ands	r3, r2
 800590e:	d012      	beq.n	8005936 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4980      	ldr	r1, [pc, #512]	@ (8005b1c <I2C_ITSlaveCplt+0x308>)
 800591c:	400a      	ands	r2, r1
 800591e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	d006      	beq.n	8005936 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	b29a      	uxth	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	2204      	movs	r2, #4
 800593a:	4013      	ands	r3, r2
 800593c:	d020      	beq.n	8005980 <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2204      	movs	r2, #4
 8005942:	4393      	bics	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00c      	beq.n	8005980 <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	2204      	movs	r2, #4
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2210      	movs	r2, #16
 800599a:	4013      	ands	r3, r2
 800599c:	d04f      	beq.n	8005a3e <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2210      	movs	r2, #16
 80059a2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80059a4:	d04b      	beq.n	8005a3e <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d12d      	bne.n	8005a0c <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2241      	movs	r2, #65	@ 0x41
 80059b4:	5c9b      	ldrb	r3, [r3, r2]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	2b28      	cmp	r3, #40	@ 0x28
 80059ba:	d10b      	bne.n	80059d4 <I2C_ITSlaveCplt+0x1c0>
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	2380      	movs	r3, #128	@ 0x80
 80059c0:	049b      	lsls	r3, r3, #18
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d106      	bne.n	80059d4 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80059c6:	697a      	ldr	r2, [r7, #20]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	0011      	movs	r1, r2
 80059cc:	0018      	movs	r0, r3
 80059ce:	f000 f8a9 	bl	8005b24 <I2C_ITListenCplt>
 80059d2:	e034      	b.n	8005a3e <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2241      	movs	r2, #65	@ 0x41
 80059d8:	5c9b      	ldrb	r3, [r3, r2]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b29      	cmp	r3, #41	@ 0x29
 80059de:	d110      	bne.n	8005a02 <I2C_ITSlaveCplt+0x1ee>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	4a4f      	ldr	r2, [pc, #316]	@ (8005b20 <I2C_ITSlaveCplt+0x30c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d00c      	beq.n	8005a02 <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2210      	movs	r2, #16
 80059ee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	0018      	movs	r0, r3
 80059f4:	f000 fa19 	bl	8005e2a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	0018      	movs	r0, r3
 80059fc:	f7ff fdd8 	bl	80055b0 <I2C_ITSlaveSeqCplt>
 8005a00:	e01d      	b.n	8005a3e <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2210      	movs	r2, #16
 8005a08:	61da      	str	r2, [r3, #28]
 8005a0a:	e018      	b.n	8005a3e <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2210      	movs	r2, #16
 8005a12:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a18:	2204      	movs	r2, #4
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d004      	beq.n	8005a30 <I2C_ITSlaveCplt+0x21c>
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	2380      	movs	r3, #128	@ 0x80
 8005a2a:	045b      	lsls	r3, r3, #17
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d106      	bne.n	8005a3e <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	0011      	movs	r1, r2
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 f8cb 	bl	8005bd4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2242      	movs	r2, #66	@ 0x42
 8005a42:	2100      	movs	r1, #0
 8005a44:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d013      	beq.n	8005a7c <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	0011      	movs	r1, r2
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f000 f8b9 	bl	8005bd4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2241      	movs	r2, #65	@ 0x41
 8005a66:	5c9b      	ldrb	r3, [r3, r2]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b28      	cmp	r3, #40	@ 0x28
 8005a6c:	d147      	bne.n	8005afe <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	0011      	movs	r1, r2
 8005a74:	0018      	movs	r0, r3
 8005a76:	f000 f855 	bl	8005b24 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a7a:	e040      	b.n	8005afe <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	4a27      	ldr	r2, [pc, #156]	@ (8005b20 <I2C_ITSlaveCplt+0x30c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d016      	beq.n	8005ab4 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f7ff fd91 	bl	80055b0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a23      	ldr	r2, [pc, #140]	@ (8005b20 <I2C_ITSlaveCplt+0x30c>)
 8005a92:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2241      	movs	r2, #65	@ 0x41
 8005a98:	2120      	movs	r1, #32
 8005a9a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2240      	movs	r2, #64	@ 0x40
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	0018      	movs	r0, r3
 8005aae:	f7fe ffa2 	bl	80049f6 <HAL_I2C_ListenCpltCallback>
}
 8005ab2:	e024      	b.n	8005afe <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2241      	movs	r2, #65	@ 0x41
 8005ab8:	5c9b      	ldrb	r3, [r3, r2]
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b22      	cmp	r3, #34	@ 0x22
 8005abe:	d10f      	bne.n	8005ae0 <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2241      	movs	r2, #65	@ 0x41
 8005ac4:	2120      	movs	r1, #32
 8005ac6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2240      	movs	r2, #64	@ 0x40
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	0018      	movs	r0, r3
 8005ada:	f7fe ff74 	bl	80049c6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005ade:	e00e      	b.n	8005afe <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2241      	movs	r2, #65	@ 0x41
 8005ae4:	2120      	movs	r1, #32
 8005ae6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2240      	movs	r2, #64	@ 0x40
 8005af2:	2100      	movs	r1, #0
 8005af4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	0018      	movs	r0, r3
 8005afa:	f7fe ff5c 	bl	80049b6 <HAL_I2C_SlaveTxCpltCallback>
}
 8005afe:	46c0      	nop			@ (mov r8, r8)
 8005b00:	46bd      	mov	sp, r7
 8005b02:	b006      	add	sp, #24
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	46c0      	nop			@ (mov r8, r8)
 8005b08:	00008001 	.word	0x00008001
 8005b0c:	00008002 	.word	0x00008002
 8005b10:	00008003 	.word	0x00008003
 8005b14:	fe00e800 	.word	0xfe00e800
 8005b18:	ffffbfff 	.word	0xffffbfff
 8005b1c:	ffff7fff 	.word	0xffff7fff
 8005b20:	ffff0000 	.word	0xffff0000

08005b24 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a26      	ldr	r2, [pc, #152]	@ (8005bcc <I2C_ITListenCplt+0xa8>)
 8005b32:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2241      	movs	r2, #65	@ 0x41
 8005b3e:	2120      	movs	r1, #32
 8005b40:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2242      	movs	r2, #66	@ 0x42
 8005b46:	2100      	movs	r1, #0
 8005b48:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2204      	movs	r2, #4
 8005b54:	4013      	ands	r3, r2
 8005b56:	d022      	beq.n	8005b9e <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d012      	beq.n	8005b9e <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b96:	2204      	movs	r2, #4
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005b9e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd0 <I2C_ITListenCplt+0xac>)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	0011      	movs	r1, r2
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	f000 fc89 	bl	80064bc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2210      	movs	r2, #16
 8005bb0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2240      	movs	r2, #64	@ 0x40
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f7fe ff1a 	bl	80049f6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005bc2:	46c0      	nop			@ (mov r8, r8)
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	b002      	add	sp, #8
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	46c0      	nop			@ (mov r8, r8)
 8005bcc:	ffff0000 	.word	0xffff0000
 8005bd0:	00008003 	.word	0x00008003

08005bd4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bde:	200f      	movs	r0, #15
 8005be0:	183b      	adds	r3, r7, r0
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	2141      	movs	r1, #65	@ 0x41
 8005be6:	5c52      	ldrb	r2, [r2, r1]
 8005be8:	701a      	strb	r2, [r3, #0]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2242      	movs	r2, #66	@ 0x42
 8005bee:	2100      	movs	r1, #0
 8005bf0:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a72      	ldr	r2, [pc, #456]	@ (8005dc0 <I2C_ITError+0x1ec>)
 8005bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005c0a:	183b      	adds	r3, r7, r0
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b28      	cmp	r3, #40	@ 0x28
 8005c10:	d007      	beq.n	8005c22 <I2C_ITError+0x4e>
 8005c12:	183b      	adds	r3, r7, r0
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b29      	cmp	r3, #41	@ 0x29
 8005c18:	d003      	beq.n	8005c22 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005c1a:	183b      	adds	r3, r7, r0
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c20:	d10c      	bne.n	8005c3c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2103      	movs	r1, #3
 8005c26:	0018      	movs	r0, r3
 8005c28:	f000 fc48 	bl	80064bc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2241      	movs	r2, #65	@ 0x41
 8005c30:	2128      	movs	r1, #40	@ 0x28
 8005c32:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a63      	ldr	r2, [pc, #396]	@ (8005dc4 <I2C_ITError+0x1f0>)
 8005c38:	635a      	str	r2, [r3, #52]	@ 0x34
 8005c3a:	e032      	b.n	8005ca2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005c3c:	4a62      	ldr	r2, [pc, #392]	@ (8005dc8 <I2C_ITError+0x1f4>)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	0011      	movs	r1, r2
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 fc3a 	bl	80064bc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f000 f8ed 	bl	8005e2a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2241      	movs	r2, #65	@ 0x41
 8005c54:	5c9b      	ldrb	r3, [r3, r2]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b60      	cmp	r3, #96	@ 0x60
 8005c5a:	d01f      	beq.n	8005c9c <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2241      	movs	r2, #65	@ 0x41
 8005c60:	2120      	movs	r1, #32
 8005c62:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2220      	movs	r2, #32
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d114      	bne.n	8005c9c <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	2210      	movs	r2, #16
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	2b10      	cmp	r3, #16
 8005c7e:	d109      	bne.n	8005c94 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2210      	movs	r2, #16
 8005c86:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c8c:	2204      	movs	r2, #4
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d03b      	beq.n	8005d28 <I2C_ITError+0x154>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b11      	cmp	r3, #17
 8005cb4:	d002      	beq.n	8005cbc <I2C_ITError+0xe8>
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b21      	cmp	r3, #33	@ 0x21
 8005cba:	d135      	bne.n	8005d28 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	2380      	movs	r3, #128	@ 0x80
 8005cc4:	01db      	lsls	r3, r3, #7
 8005cc6:	401a      	ands	r2, r3
 8005cc8:	2380      	movs	r3, #128	@ 0x80
 8005cca:	01db      	lsls	r3, r3, #7
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d107      	bne.n	8005ce0 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	493c      	ldr	r1, [pc, #240]	@ (8005dcc <I2C_ITError+0x1f8>)
 8005cdc:	400a      	ands	r2, r1
 8005cde:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce4:	0018      	movs	r0, r3
 8005ce6:	f7fd feb3 	bl	8003a50 <HAL_DMA_GetState>
 8005cea:	0003      	movs	r3, r0
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d016      	beq.n	8005d1e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cf4:	4a36      	ldr	r2, [pc, #216]	@ (8005dd0 <I2C_ITError+0x1fc>)
 8005cf6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2240      	movs	r2, #64	@ 0x40
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7fd fd87 	bl	8003818 <HAL_DMA_Abort_IT>
 8005d0a:	1e03      	subs	r3, r0, #0
 8005d0c:	d051      	beq.n	8005db2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d18:	0018      	movs	r0, r3
 8005d1a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d1c:	e049      	b.n	8005db2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	0018      	movs	r0, r3
 8005d22:	f000 f859 	bl	8005dd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d26:	e044      	b.n	8005db2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d03b      	beq.n	8005da8 <I2C_ITError+0x1d4>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	2b12      	cmp	r3, #18
 8005d34:	d002      	beq.n	8005d3c <I2C_ITError+0x168>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b22      	cmp	r3, #34	@ 0x22
 8005d3a:	d135      	bne.n	8005da8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	2380      	movs	r3, #128	@ 0x80
 8005d44:	021b      	lsls	r3, r3, #8
 8005d46:	401a      	ands	r2, r3
 8005d48:	2380      	movs	r3, #128	@ 0x80
 8005d4a:	021b      	lsls	r3, r3, #8
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d107      	bne.n	8005d60 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	491e      	ldr	r1, [pc, #120]	@ (8005dd4 <I2C_ITError+0x200>)
 8005d5c:	400a      	ands	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d64:	0018      	movs	r0, r3
 8005d66:	f7fd fe73 	bl	8003a50 <HAL_DMA_GetState>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d016      	beq.n	8005d9e <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d74:	4a16      	ldr	r2, [pc, #88]	@ (8005dd0 <I2C_ITError+0x1fc>)
 8005d76:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2240      	movs	r2, #64	@ 0x40
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7fd fd47 	bl	8003818 <HAL_DMA_Abort_IT>
 8005d8a:	1e03      	subs	r3, r0, #0
 8005d8c:	d013      	beq.n	8005db6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d98:	0018      	movs	r0, r3
 8005d9a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d9c:	e00b      	b.n	8005db6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	0018      	movs	r0, r3
 8005da2:	f000 f819 	bl	8005dd8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005da6:	e006      	b.n	8005db6 <I2C_ITError+0x1e2>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	0018      	movs	r0, r3
 8005dac:	f000 f814 	bl	8005dd8 <I2C_TreatErrorCallback>
  }
}
 8005db0:	e002      	b.n	8005db8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	e000      	b.n	8005db8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005db6:	46c0      	nop			@ (mov r8, r8)
}
 8005db8:	46c0      	nop			@ (mov r8, r8)
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	b004      	add	sp, #16
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	ffff0000 	.word	0xffff0000
 8005dc4:	08004a39 	.word	0x08004a39
 8005dc8:	00008003 	.word	0x00008003
 8005dcc:	ffffbfff 	.word	0xffffbfff
 8005dd0:	08005f43 	.word	0x08005f43
 8005dd4:	ffff7fff 	.word	0xffff7fff

08005dd8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2241      	movs	r2, #65	@ 0x41
 8005de4:	5c9b      	ldrb	r3, [r3, r2]
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b60      	cmp	r3, #96	@ 0x60
 8005dea:	d10f      	bne.n	8005e0c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2241      	movs	r2, #65	@ 0x41
 8005df0:	2120      	movs	r1, #32
 8005df2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2240      	movs	r2, #64	@ 0x40
 8005dfe:	2100      	movs	r1, #0
 8005e00:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	0018      	movs	r0, r3
 8005e06:	f7fe fe0e 	bl	8004a26 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005e0a:	e00a      	b.n	8005e22 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2240      	movs	r2, #64	@ 0x40
 8005e16:	2100      	movs	r1, #0
 8005e18:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7fe fdfa 	bl	8004a16 <HAL_I2C_ErrorCallback>
}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b002      	add	sp, #8
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e2a:	b580      	push	{r7, lr}
 8005e2c:	b082      	sub	sp, #8
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	2202      	movs	r2, #2
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d103      	bne.n	8005e48 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2200      	movs	r2, #0
 8005e46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d007      	beq.n	8005e66 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699a      	ldr	r2, [r3, #24]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2101      	movs	r1, #1
 8005e62:	430a      	orrs	r2, r1
 8005e64:	619a      	str	r2, [r3, #24]
  }
}
 8005e66:	46c0      	nop			@ (mov r8, r8)
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b002      	add	sp, #8
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4920      	ldr	r1, [pc, #128]	@ (8005f0c <I2C_DMAMasterReceiveCplt+0x9c>)
 8005e8a:	400a      	ands	r2, r1
 8005e8c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2120      	movs	r1, #32
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 fa83 	bl	80063a8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8005ea2:	e02e      	b.n	8005f02 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8005eac:	189a      	adds	r2, r3, r2
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	2bff      	cmp	r3, #255	@ 0xff
 8005eba:	d903      	bls.n	8005ec4 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	22ff      	movs	r2, #255	@ 0xff
 8005ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005ec2:	e004      	b.n	8005ece <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3324      	adds	r3, #36	@ 0x24
 8005ed8:	0019      	movs	r1, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ede:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8005ee4:	f7fd fc12 	bl	800370c <HAL_DMA_Start_IT>
 8005ee8:	1e03      	subs	r3, r0, #0
 8005eea:	d005      	beq.n	8005ef8 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2110      	movs	r1, #16
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f7ff fe6f 	bl	8005bd4 <I2C_ITError>
}
 8005ef6:	e004      	b.n	8005f02 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2140      	movs	r1, #64	@ 0x40
 8005efc:	0018      	movs	r0, r3
 8005efe:	f000 fa53 	bl	80063a8 <I2C_Enable_IRQ>
}
 8005f02:	46c0      	nop			@ (mov r8, r8)
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b004      	add	sp, #16
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	46c0      	nop			@ (mov r8, r8)
 8005f0c:	ffff7fff 	.word	0xffff7fff

08005f10 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f1c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2180      	movs	r1, #128	@ 0x80
 8005f2a:	0209      	lsls	r1, r1, #8
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2110      	movs	r1, #16
 8005f34:	0018      	movs	r0, r3
 8005f36:	f7ff fe4d 	bl	8005bd4 <I2C_ITError>
}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	b004      	add	sp, #16
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7ff ff30 	bl	8005dd8 <I2C_TreatErrorCallback>
}
 8005f78:	46c0      	nop			@ (mov r8, r8)
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	b004      	add	sp, #16
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	1dfb      	adds	r3, r7, #7
 8005f8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f90:	e03a      	b.n	8006008 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f000 f8d3 	bl	8006144 <I2C_IsErrorOccurred>
 8005f9e:	1e03      	subs	r3, r0, #0
 8005fa0:	d001      	beq.n	8005fa6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e040      	b.n	8006028 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	d02d      	beq.n	8006008 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fac:	f7fd fa1a 	bl	80033e4 <HAL_GetTick>
 8005fb0:	0002      	movs	r2, r0
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d302      	bcc.n	8005fc2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d122      	bne.n	8006008 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	425a      	negs	r2, r3
 8005fd2:	4153      	adcs	r3, r2
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	001a      	movs	r2, r3
 8005fd8:	1dfb      	adds	r3, r7, #7
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d113      	bne.n	8006008 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2241      	movs	r2, #65	@ 0x41
 8005ff0:	2120      	movs	r1, #32
 8005ff2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2242      	movs	r2, #66	@ 0x42
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2240      	movs	r2, #64	@ 0x40
 8006000:	2100      	movs	r1, #0
 8006002:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e00f      	b.n	8006028 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	4013      	ands	r3, r2
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	425a      	negs	r2, r3
 8006018:	4153      	adcs	r3, r2
 800601a:	b2db      	uxtb	r3, r3
 800601c:	001a      	movs	r2, r3
 800601e:	1dfb      	adds	r3, r7, #7
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d0b5      	beq.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	0018      	movs	r0, r3
 800602a:	46bd      	mov	sp, r7
 800602c:	b004      	add	sp, #16
 800602e:	bd80      	pop	{r7, pc}

08006030 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800603c:	e032      	b.n	80060a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	68b9      	ldr	r1, [r7, #8]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	0018      	movs	r0, r3
 8006046:	f000 f87d 	bl	8006144 <I2C_IsErrorOccurred>
 800604a:	1e03      	subs	r3, r0, #0
 800604c:	d001      	beq.n	8006052 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e030      	b.n	80060b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	3301      	adds	r3, #1
 8006056:	d025      	beq.n	80060a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006058:	f7fd f9c4 	bl	80033e4 <HAL_GetTick>
 800605c:	0002      	movs	r2, r0
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	68ba      	ldr	r2, [r7, #8]
 8006064:	429a      	cmp	r2, r3
 8006066:	d302      	bcc.n	800606e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d11a      	bne.n	80060a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	2202      	movs	r2, #2
 8006076:	4013      	ands	r3, r2
 8006078:	2b02      	cmp	r3, #2
 800607a:	d013      	beq.n	80060a4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006080:	2220      	movs	r2, #32
 8006082:	431a      	orrs	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2241      	movs	r2, #65	@ 0x41
 800608c:	2120      	movs	r1, #32
 800608e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2242      	movs	r2, #66	@ 0x42
 8006094:	2100      	movs	r1, #0
 8006096:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2240      	movs	r2, #64	@ 0x40
 800609c:	2100      	movs	r1, #0
 800609e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e007      	b.n	80060b4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	2202      	movs	r2, #2
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d1c5      	bne.n	800603e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	0018      	movs	r0, r3
 80060b6:	46bd      	mov	sp, r7
 80060b8:	b004      	add	sp, #16
 80060ba:	bd80      	pop	{r7, pc}

080060bc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060c8:	e02f      	b.n	800612a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	0018      	movs	r0, r3
 80060d2:	f000 f837 	bl	8006144 <I2C_IsErrorOccurred>
 80060d6:	1e03      	subs	r3, r0, #0
 80060d8:	d001      	beq.n	80060de <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e02d      	b.n	800613a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060de:	f7fd f981 	bl	80033e4 <HAL_GetTick>
 80060e2:	0002      	movs	r2, r0
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d302      	bcc.n	80060f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d11a      	bne.n	800612a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	2220      	movs	r2, #32
 80060fc:	4013      	ands	r3, r2
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d013      	beq.n	800612a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006106:	2220      	movs	r2, #32
 8006108:	431a      	orrs	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2241      	movs	r2, #65	@ 0x41
 8006112:	2120      	movs	r1, #32
 8006114:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2242      	movs	r2, #66	@ 0x42
 800611a:	2100      	movs	r1, #0
 800611c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2240      	movs	r2, #64	@ 0x40
 8006122:	2100      	movs	r1, #0
 8006124:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e007      	b.n	800613a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2220      	movs	r2, #32
 8006132:	4013      	ands	r3, r2
 8006134:	2b20      	cmp	r3, #32
 8006136:	d1c8      	bne.n	80060ca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	0018      	movs	r0, r3
 800613c:	46bd      	mov	sp, r7
 800613e:	b004      	add	sp, #16
 8006140:	bd80      	pop	{r7, pc}
	...

08006144 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	@ 0x28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006150:	2327      	movs	r3, #39	@ 0x27
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006160:	2300      	movs	r3, #0
 8006162:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	2210      	movs	r2, #16
 800616c:	4013      	ands	r3, r2
 800616e:	d100      	bne.n	8006172 <I2C_IsErrorOccurred+0x2e>
 8006170:	e079      	b.n	8006266 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2210      	movs	r2, #16
 8006178:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800617a:	e057      	b.n	800622c <I2C_IsErrorOccurred+0xe8>
 800617c:	2227      	movs	r2, #39	@ 0x27
 800617e:	18bb      	adds	r3, r7, r2
 8006180:	18ba      	adds	r2, r7, r2
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	3301      	adds	r3, #1
 800618a:	d04f      	beq.n	800622c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800618c:	f7fd f92a 	bl	80033e4 <HAL_GetTick>
 8006190:	0002      	movs	r2, r0
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	d302      	bcc.n	80061a2 <I2C_IsErrorOccurred+0x5e>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d144      	bne.n	800622c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	2380      	movs	r3, #128	@ 0x80
 80061aa:	01db      	lsls	r3, r3, #7
 80061ac:	4013      	ands	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80061b0:	2013      	movs	r0, #19
 80061b2:	183b      	adds	r3, r7, r0
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	2142      	movs	r1, #66	@ 0x42
 80061b8:	5c52      	ldrb	r2, [r2, r1]
 80061ba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	2380      	movs	r3, #128	@ 0x80
 80061c4:	021b      	lsls	r3, r3, #8
 80061c6:	401a      	ands	r2, r3
 80061c8:	2380      	movs	r3, #128	@ 0x80
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d126      	bne.n	800621e <I2C_IsErrorOccurred+0xda>
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	2380      	movs	r3, #128	@ 0x80
 80061d4:	01db      	lsls	r3, r3, #7
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d021      	beq.n	800621e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80061da:	183b      	adds	r3, r7, r0
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	2b20      	cmp	r3, #32
 80061e0:	d01d      	beq.n	800621e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2180      	movs	r1, #128	@ 0x80
 80061ee:	01c9      	lsls	r1, r1, #7
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80061f4:	f7fd f8f6 	bl	80033e4 <HAL_GetTick>
 80061f8:	0003      	movs	r3, r0
 80061fa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061fc:	e00f      	b.n	800621e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80061fe:	f7fd f8f1 	bl	80033e4 <HAL_GetTick>
 8006202:	0002      	movs	r2, r0
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b19      	cmp	r3, #25
 800620a:	d908      	bls.n	800621e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	2220      	movs	r2, #32
 8006210:	4313      	orrs	r3, r2
 8006212:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006214:	2327      	movs	r3, #39	@ 0x27
 8006216:	18fb      	adds	r3, r7, r3
 8006218:	2201      	movs	r2, #1
 800621a:	701a      	strb	r2, [r3, #0]

              break;
 800621c:	e006      	b.n	800622c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	2220      	movs	r2, #32
 8006226:	4013      	ands	r3, r2
 8006228:	2b20      	cmp	r3, #32
 800622a:	d1e8      	bne.n	80061fe <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	2220      	movs	r2, #32
 8006234:	4013      	ands	r3, r2
 8006236:	2b20      	cmp	r3, #32
 8006238:	d004      	beq.n	8006244 <I2C_IsErrorOccurred+0x100>
 800623a:	2327      	movs	r3, #39	@ 0x27
 800623c:	18fb      	adds	r3, r7, r3
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d09b      	beq.n	800617c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006244:	2327      	movs	r3, #39	@ 0x27
 8006246:	18fb      	adds	r3, r7, r3
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d103      	bne.n	8006256 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2220      	movs	r2, #32
 8006254:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2204      	movs	r2, #4
 800625a:	4313      	orrs	r3, r2
 800625c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800625e:	2327      	movs	r3, #39	@ 0x27
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	2380      	movs	r3, #128	@ 0x80
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	4013      	ands	r3, r2
 8006276:	d00c      	beq.n	8006292 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	2201      	movs	r2, #1
 800627c:	4313      	orrs	r3, r2
 800627e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2280      	movs	r2, #128	@ 0x80
 8006286:	0052      	lsls	r2, r2, #1
 8006288:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800628a:	2327      	movs	r3, #39	@ 0x27
 800628c:	18fb      	adds	r3, r7, r3
 800628e:	2201      	movs	r2, #1
 8006290:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	2380      	movs	r3, #128	@ 0x80
 8006296:	00db      	lsls	r3, r3, #3
 8006298:	4013      	ands	r3, r2
 800629a:	d00c      	beq.n	80062b6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800629c:	6a3b      	ldr	r3, [r7, #32]
 800629e:	2208      	movs	r2, #8
 80062a0:	4313      	orrs	r3, r2
 80062a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2280      	movs	r2, #128	@ 0x80
 80062aa:	00d2      	lsls	r2, r2, #3
 80062ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062ae:	2327      	movs	r3, #39	@ 0x27
 80062b0:	18fb      	adds	r3, r7, r3
 80062b2:	2201      	movs	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	2380      	movs	r3, #128	@ 0x80
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4013      	ands	r3, r2
 80062be:	d00c      	beq.n	80062da <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2202      	movs	r2, #2
 80062c4:	4313      	orrs	r3, r2
 80062c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2280      	movs	r2, #128	@ 0x80
 80062ce:	0092      	lsls	r2, r2, #2
 80062d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80062d2:	2327      	movs	r3, #39	@ 0x27
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80062da:	2327      	movs	r3, #39	@ 0x27
 80062dc:	18fb      	adds	r3, r7, r3
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01d      	beq.n	8006320 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	0018      	movs	r0, r3
 80062e8:	f7ff fd9f 	bl	8005e2a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	490e      	ldr	r1, [pc, #56]	@ (8006330 <I2C_IsErrorOccurred+0x1ec>)
 80062f8:	400a      	ands	r2, r1
 80062fa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	431a      	orrs	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2241      	movs	r2, #65	@ 0x41
 800630c:	2120      	movs	r1, #32
 800630e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2242      	movs	r2, #66	@ 0x42
 8006314:	2100      	movs	r1, #0
 8006316:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2240      	movs	r2, #64	@ 0x40
 800631c:	2100      	movs	r1, #0
 800631e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006320:	2327      	movs	r3, #39	@ 0x27
 8006322:	18fb      	adds	r3, r7, r3
 8006324:	781b      	ldrb	r3, [r3, #0]
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b00a      	add	sp, #40	@ 0x28
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			@ (mov r8, r8)
 8006330:	fe00e800 	.word	0xfe00e800

08006334 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006334:	b590      	push	{r4, r7, lr}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	0008      	movs	r0, r1
 800633e:	0011      	movs	r1, r2
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	240a      	movs	r4, #10
 8006344:	193b      	adds	r3, r7, r4
 8006346:	1c02      	adds	r2, r0, #0
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	2009      	movs	r0, #9
 800634c:	183b      	adds	r3, r7, r0
 800634e:	1c0a      	adds	r2, r1, #0
 8006350:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006352:	193b      	adds	r3, r7, r4
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	059b      	lsls	r3, r3, #22
 8006358:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800635a:	183b      	adds	r3, r7, r0
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	0419      	lsls	r1, r3, #16
 8006360:	23ff      	movs	r3, #255	@ 0xff
 8006362:	041b      	lsls	r3, r3, #16
 8006364:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006366:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800636c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636e:	4313      	orrs	r3, r2
 8006370:	005b      	lsls	r3, r3, #1
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800637e:	0d51      	lsrs	r1, r2, #21
 8006380:	2280      	movs	r2, #128	@ 0x80
 8006382:	00d2      	lsls	r2, r2, #3
 8006384:	400a      	ands	r2, r1
 8006386:	4907      	ldr	r1, [pc, #28]	@ (80063a4 <I2C_TransferConfig+0x70>)
 8006388:	430a      	orrs	r2, r1
 800638a:	43d2      	mvns	r2, r2
 800638c:	401a      	ands	r2, r3
 800638e:	0011      	movs	r1, r2
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	430a      	orrs	r2, r1
 8006398:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	46bd      	mov	sp, r7
 800639e:	b007      	add	sp, #28
 80063a0:	bd90      	pop	{r4, r7, pc}
 80063a2:	46c0      	nop			@ (mov r8, r8)
 80063a4:	03ff63ff 	.word	0x03ff63ff

080063a8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	000a      	movs	r2, r1
 80063b2:	1cbb      	adds	r3, r7, #2
 80063b4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063be:	4b3c      	ldr	r3, [pc, #240]	@ (80064b0 <I2C_Enable_IRQ+0x108>)
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d035      	beq.n	8006430 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80063c8:	4b3a      	ldr	r3, [pc, #232]	@ (80064b4 <I2C_Enable_IRQ+0x10c>)
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d030      	beq.n	8006430 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80063d2:	4b39      	ldr	r3, [pc, #228]	@ (80064b8 <I2C_Enable_IRQ+0x110>)
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d02b      	beq.n	8006430 <I2C_Enable_IRQ+0x88>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80063d8:	1cbb      	adds	r3, r7, #2
 80063da:	2200      	movs	r2, #0
 80063dc:	5e9b      	ldrsh	r3, [r3, r2]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	da03      	bge.n	80063ea <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	22b8      	movs	r2, #184	@ 0xb8
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80063ea:	1cbb      	adds	r3, r7, #2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	2201      	movs	r2, #1
 80063f0:	4013      	ands	r3, r2
 80063f2:	d003      	beq.n	80063fc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	22f2      	movs	r2, #242	@ 0xf2
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80063fc:	1cbb      	adds	r3, r7, #2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	2202      	movs	r2, #2
 8006402:	4013      	ands	r3, r2
 8006404:	d003      	beq.n	800640e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	22f4      	movs	r2, #244	@ 0xf4
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800640e:	1cbb      	adds	r3, r7, #2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	2b10      	cmp	r3, #16
 8006414:	d103      	bne.n	800641e <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2290      	movs	r2, #144	@ 0x90
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800641e:	1cbb      	adds	r3, r7, #2
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	2b20      	cmp	r3, #32
 8006424:	d137      	bne.n	8006496 <I2C_Enable_IRQ+0xee>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	4313      	orrs	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800642e:	e032      	b.n	8006496 <I2C_Enable_IRQ+0xee>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006430:	1cbb      	adds	r3, r7, #2
 8006432:	2200      	movs	r2, #0
 8006434:	5e9b      	ldrsh	r3, [r3, r2]
 8006436:	2b00      	cmp	r3, #0
 8006438:	da03      	bge.n	8006442 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	22b8      	movs	r2, #184	@ 0xb8
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006442:	1cbb      	adds	r3, r7, #2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	2201      	movs	r2, #1
 8006448:	4013      	ands	r3, r2
 800644a:	d003      	beq.n	8006454 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	22f2      	movs	r2, #242	@ 0xf2
 8006450:	4313      	orrs	r3, r2
 8006452:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006454:	1cbb      	adds	r3, r7, #2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	2202      	movs	r2, #2
 800645a:	4013      	ands	r3, r2
 800645c:	d003      	beq.n	8006466 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	22f4      	movs	r2, #244	@ 0xf4
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006466:	1cbb      	adds	r3, r7, #2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	2b10      	cmp	r3, #16
 800646c:	d103      	bne.n	8006476 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2290      	movs	r2, #144	@ 0x90
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006476:	1cbb      	adds	r3, r7, #2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	2b20      	cmp	r3, #32
 800647c:	d103      	bne.n	8006486 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2260      	movs	r2, #96	@ 0x60
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006486:	1cbb      	adds	r3, r7, #2
 8006488:	881b      	ldrh	r3, [r3, #0]
 800648a:	2b40      	cmp	r3, #64	@ 0x40
 800648c:	d103      	bne.n	8006496 <I2C_Enable_IRQ+0xee>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2240      	movs	r2, #64	@ 0x40
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6819      	ldr	r1, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	601a      	str	r2, [r3, #0]
}
 80064a6:	46c0      	nop			@ (mov r8, r8)
 80064a8:	46bd      	mov	sp, r7
 80064aa:	b004      	add	sp, #16
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	46c0      	nop			@ (mov r8, r8)
 80064b0:	08004c39 	.word	0x08004c39
 80064b4:	08005089 	.word	0x08005089
 80064b8:	08004e31 	.word	0x08004e31

080064bc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b084      	sub	sp, #16
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	000a      	movs	r2, r1
 80064c6:	1cbb      	adds	r3, r7, #2
 80064c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80064ce:	1cbb      	adds	r3, r7, #2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	2201      	movs	r2, #1
 80064d4:	4013      	ands	r3, r2
 80064d6:	d010      	beq.n	80064fa <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2242      	movs	r2, #66	@ 0x42
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2241      	movs	r2, #65	@ 0x41
 80064e4:	5c9b      	ldrb	r3, [r3, r2]
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	001a      	movs	r2, r3
 80064ea:	2328      	movs	r3, #40	@ 0x28
 80064ec:	4013      	ands	r3, r2
 80064ee:	2b28      	cmp	r3, #40	@ 0x28
 80064f0:	d003      	beq.n	80064fa <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	22b0      	movs	r2, #176	@ 0xb0
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80064fa:	1cbb      	adds	r3, r7, #2
 80064fc:	881b      	ldrh	r3, [r3, #0]
 80064fe:	2202      	movs	r2, #2
 8006500:	4013      	ands	r3, r2
 8006502:	d010      	beq.n	8006526 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2244      	movs	r2, #68	@ 0x44
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2241      	movs	r2, #65	@ 0x41
 8006510:	5c9b      	ldrb	r3, [r3, r2]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	001a      	movs	r2, r3
 8006516:	2328      	movs	r3, #40	@ 0x28
 8006518:	4013      	ands	r3, r2
 800651a:	2b28      	cmp	r3, #40	@ 0x28
 800651c:	d003      	beq.n	8006526 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	22b0      	movs	r2, #176	@ 0xb0
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006526:	1cbb      	adds	r3, r7, #2
 8006528:	2200      	movs	r2, #0
 800652a:	5e9b      	ldrsh	r3, [r3, r2]
 800652c:	2b00      	cmp	r3, #0
 800652e:	da03      	bge.n	8006538 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	22b8      	movs	r2, #184	@ 0xb8
 8006534:	4313      	orrs	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006538:	1cbb      	adds	r3, r7, #2
 800653a:	881b      	ldrh	r3, [r3, #0]
 800653c:	2b10      	cmp	r3, #16
 800653e:	d103      	bne.n	8006548 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2290      	movs	r2, #144	@ 0x90
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006548:	1cbb      	adds	r3, r7, #2
 800654a:	881b      	ldrh	r3, [r3, #0]
 800654c:	2b20      	cmp	r3, #32
 800654e:	d103      	bne.n	8006558 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006558:	1cbb      	adds	r3, r7, #2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	2b40      	cmp	r3, #64	@ 0x40
 800655e:	d103      	bne.n	8006568 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2240      	movs	r2, #64	@ 0x40
 8006564:	4313      	orrs	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	43d9      	mvns	r1, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	400a      	ands	r2, r1
 8006578:	601a      	str	r2, [r3, #0]
}
 800657a:	46c0      	nop			@ (mov r8, r8)
 800657c:	46bd      	mov	sp, r7
 800657e:	b004      	add	sp, #16
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2241      	movs	r2, #65	@ 0x41
 8006592:	5c9b      	ldrb	r3, [r3, r2]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b20      	cmp	r3, #32
 8006598:	d138      	bne.n	800660c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2240      	movs	r2, #64	@ 0x40
 800659e:	5c9b      	ldrb	r3, [r3, r2]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e032      	b.n	800660e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2240      	movs	r2, #64	@ 0x40
 80065ac:	2101      	movs	r1, #1
 80065ae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2241      	movs	r2, #65	@ 0x41
 80065b4:	2124      	movs	r1, #36	@ 0x24
 80065b6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2101      	movs	r1, #1
 80065c4:	438a      	bics	r2, r1
 80065c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4911      	ldr	r1, [pc, #68]	@ (8006618 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80065d4:	400a      	ands	r2, r1
 80065d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6819      	ldr	r1, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2101      	movs	r1, #1
 80065f4:	430a      	orrs	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2241      	movs	r2, #65	@ 0x41
 80065fc:	2120      	movs	r1, #32
 80065fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2240      	movs	r2, #64	@ 0x40
 8006604:	2100      	movs	r1, #0
 8006606:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006608:	2300      	movs	r3, #0
 800660a:	e000      	b.n	800660e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800660c:	2302      	movs	r3, #2
  }
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	ffffefff 	.word	0xffffefff

0800661c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2241      	movs	r2, #65	@ 0x41
 800662a:	5c9b      	ldrb	r3, [r3, r2]
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b20      	cmp	r3, #32
 8006630:	d139      	bne.n	80066a6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2240      	movs	r2, #64	@ 0x40
 8006636:	5c9b      	ldrb	r3, [r3, r2]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d101      	bne.n	8006640 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800663c:	2302      	movs	r3, #2
 800663e:	e033      	b.n	80066a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2240      	movs	r2, #64	@ 0x40
 8006644:	2101      	movs	r1, #1
 8006646:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2241      	movs	r2, #65	@ 0x41
 800664c:	2124      	movs	r1, #36	@ 0x24
 800664e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2101      	movs	r1, #1
 800665c:	438a      	bics	r2, r1
 800665e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4a11      	ldr	r2, [pc, #68]	@ (80066b0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800666c:	4013      	ands	r3, r2
 800666e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68fa      	ldr	r2, [r7, #12]
 8006680:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	2101      	movs	r1, #1
 800668e:	430a      	orrs	r2, r1
 8006690:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2241      	movs	r2, #65	@ 0x41
 8006696:	2120      	movs	r1, #32
 8006698:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2240      	movs	r2, #64	@ 0x40
 800669e:	2100      	movs	r1, #0
 80066a0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e000      	b.n	80066a8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
  }
}
 80066a8:	0018      	movs	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b004      	add	sp, #16
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	fffff0ff 	.word	0xfffff0ff

080066b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	2380      	movs	r3, #128	@ 0x80
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d137      	bne.n	8006736 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80066c6:	4b27      	ldr	r3, [pc, #156]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	23c0      	movs	r3, #192	@ 0xc0
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	401a      	ands	r2, r3
 80066d0:	2380      	movs	r3, #128	@ 0x80
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d040      	beq.n	800675a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066d8:	4b22      	ldr	r3, [pc, #136]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a22      	ldr	r2, [pc, #136]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80066de:	401a      	ands	r2, r3
 80066e0:	4b20      	ldr	r3, [pc, #128]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80066e2:	2180      	movs	r1, #128	@ 0x80
 80066e4:	0089      	lsls	r1, r1, #2
 80066e6:	430a      	orrs	r2, r1
 80066e8:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066ea:	4b20      	ldr	r3, [pc, #128]	@ (800676c <HAL_PWREx_ControlVoltageScaling+0xb8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2232      	movs	r2, #50	@ 0x32
 80066f0:	4353      	muls	r3, r2
 80066f2:	491f      	ldr	r1, [pc, #124]	@ (8006770 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7f9 fd07 	bl	8000108 <__udivsi3>
 80066fa:	0003      	movs	r3, r0
 80066fc:	3301      	adds	r3, #1
 80066fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006700:	e002      	b.n	8006708 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	3b01      	subs	r3, #1
 8006706:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006708:	4b16      	ldr	r3, [pc, #88]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800670a:	695a      	ldr	r2, [r3, #20]
 800670c:	2380      	movs	r3, #128	@ 0x80
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	401a      	ands	r2, r3
 8006712:	2380      	movs	r3, #128	@ 0x80
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	429a      	cmp	r2, r3
 8006718:	d102      	bne.n	8006720 <HAL_PWREx_ControlVoltageScaling+0x6c>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1f0      	bne.n	8006702 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006720:	4b10      	ldr	r3, [pc, #64]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006722:	695a      	ldr	r2, [r3, #20]
 8006724:	2380      	movs	r3, #128	@ 0x80
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	401a      	ands	r2, r3
 800672a:	2380      	movs	r3, #128	@ 0x80
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	429a      	cmp	r2, r3
 8006730:	d113      	bne.n	800675a <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e012      	b.n	800675c <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006736:	4b0b      	ldr	r3, [pc, #44]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	23c0      	movs	r3, #192	@ 0xc0
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	401a      	ands	r2, r3
 8006740:	2380      	movs	r3, #128	@ 0x80
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	429a      	cmp	r2, r3
 8006746:	d008      	beq.n	800675a <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006748:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a06      	ldr	r2, [pc, #24]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800674e:	401a      	ands	r2, r3
 8006750:	4b04      	ldr	r3, [pc, #16]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8006752:	2180      	movs	r1, #128	@ 0x80
 8006754:	00c9      	lsls	r1, r1, #3
 8006756:	430a      	orrs	r2, r1
 8006758:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	0018      	movs	r0, r3
 800675e:	46bd      	mov	sp, r7
 8006760:	b004      	add	sp, #16
 8006762:	bd80      	pop	{r7, pc}
 8006764:	40007000 	.word	0x40007000
 8006768:	fffff9ff 	.word	0xfffff9ff
 800676c:	20000014 	.word	0x20000014
 8006770:	000f4240 	.word	0x000f4240

08006774 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006778:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <HAL_PWREx_GetVoltageRange+0x14>)
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	23c0      	movs	r3, #192	@ 0xc0
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	4013      	ands	r3, r2
}
 8006782:	0018      	movs	r0, r3
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	40007000 	.word	0x40007000

0800678c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800678c:	b5b0      	push	{r4, r5, r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006794:	4bc8      	ldr	r3, [pc, #800]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	2238      	movs	r2, #56	@ 0x38
 800679a:	4013      	ands	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800679e:	4bc6      	ldr	r3, [pc, #792]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	2203      	movs	r2, #3
 80067a4:	4013      	ands	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2210      	movs	r2, #16
 80067ae:	4013      	ands	r3, r2
 80067b0:	d100      	bne.n	80067b4 <HAL_RCC_OscConfig+0x28>
 80067b2:	e0ee      	b.n	8006992 <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80067b4:	69bb      	ldr	r3, [r7, #24]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d007      	beq.n	80067ca <HAL_RCC_OscConfig+0x3e>
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b18      	cmp	r3, #24
 80067be:	d000      	beq.n	80067c2 <HAL_RCC_OscConfig+0x36>
 80067c0:	e093      	b.n	80068ea <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d000      	beq.n	80067ca <HAL_RCC_OscConfig+0x3e>
 80067c8:	e08f      	b.n	80068ea <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067ca:	4bbb      	ldr	r3, [pc, #748]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2202      	movs	r2, #2
 80067d0:	4013      	ands	r3, r2
 80067d2:	d006      	beq.n	80067e2 <HAL_RCC_OscConfig+0x56>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	69db      	ldr	r3, [r3, #28]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d102      	bne.n	80067e2 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	f000 fbae 	bl	8006f3e <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067e6:	4bb4      	ldr	r3, [pc, #720]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2108      	movs	r1, #8
 80067ec:	400b      	ands	r3, r1
 80067ee:	d004      	beq.n	80067fa <HAL_RCC_OscConfig+0x6e>
 80067f0:	4bb1      	ldr	r3, [pc, #708]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	21f0      	movs	r1, #240	@ 0xf0
 80067f6:	400b      	ands	r3, r1
 80067f8:	e005      	b.n	8006806 <HAL_RCC_OscConfig+0x7a>
 80067fa:	49af      	ldr	r1, [pc, #700]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80067fc:	2394      	movs	r3, #148	@ 0x94
 80067fe:	58cb      	ldr	r3, [r1, r3]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	21f0      	movs	r1, #240	@ 0xf0
 8006804:	400b      	ands	r3, r1
 8006806:	4293      	cmp	r3, r2
 8006808:	d225      	bcs.n	8006856 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680e:	0018      	movs	r0, r3
 8006810:	f000 fd8c 	bl	800732c <RCC_SetFlashLatencyFromMSIRange>
 8006814:	1e03      	subs	r3, r0, #0
 8006816:	d002      	beq.n	800681e <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	f000 fb90 	bl	8006f3e <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800681e:	4ba6      	ldr	r3, [pc, #664]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	4ba5      	ldr	r3, [pc, #660]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006824:	2108      	movs	r1, #8
 8006826:	430a      	orrs	r2, r1
 8006828:	601a      	str	r2, [r3, #0]
 800682a:	4ba3      	ldr	r3, [pc, #652]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	22f0      	movs	r2, #240	@ 0xf0
 8006830:	4393      	bics	r3, r2
 8006832:	0019      	movs	r1, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006838:	4b9f      	ldr	r3, [pc, #636]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 800683a:	430a      	orrs	r2, r1
 800683c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800683e:	4b9e      	ldr	r3, [pc, #632]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	4a9e      	ldr	r2, [pc, #632]	@ (8006abc <HAL_RCC_OscConfig+0x330>)
 8006844:	4013      	ands	r3, r2
 8006846:	0019      	movs	r1, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	021a      	lsls	r2, r3, #8
 800684e:	4b9a      	ldr	r3, [pc, #616]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006850:	430a      	orrs	r2, r1
 8006852:	605a      	str	r2, [r3, #4]
 8006854:	e027      	b.n	80068a6 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006856:	4b98      	ldr	r3, [pc, #608]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b97      	ldr	r3, [pc, #604]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 800685c:	2108      	movs	r1, #8
 800685e:	430a      	orrs	r2, r1
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	4b95      	ldr	r3, [pc, #596]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	22f0      	movs	r2, #240	@ 0xf0
 8006868:	4393      	bics	r3, r2
 800686a:	0019      	movs	r1, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006870:	4b91      	ldr	r3, [pc, #580]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006872:	430a      	orrs	r2, r1
 8006874:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006876:	4b90      	ldr	r3, [pc, #576]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	4a90      	ldr	r2, [pc, #576]	@ (8006abc <HAL_RCC_OscConfig+0x330>)
 800687c:	4013      	ands	r3, r2
 800687e:	0019      	movs	r1, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a1b      	ldr	r3, [r3, #32]
 8006884:	021a      	lsls	r2, r3, #8
 8006886:	4b8c      	ldr	r3, [pc, #560]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006888:	430a      	orrs	r2, r1
 800688a:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006896:	0018      	movs	r0, r3
 8006898:	f000 fd48 	bl	800732c <RCC_SetFlashLatencyFromMSIRange>
 800689c:	1e03      	subs	r3, r0, #0
 800689e:	d002      	beq.n	80068a6 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f000 fb4c 	bl	8006f3e <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80068a6:	f000 fca7 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 80068aa:	0001      	movs	r1, r0
 80068ac:	4b82      	ldr	r3, [pc, #520]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80068ae:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	220f      	movs	r2, #15
 80068b4:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80068b6:	4a82      	ldr	r2, [pc, #520]	@ (8006ac0 <HAL_RCC_OscConfig+0x334>)
 80068b8:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80068ba:	001a      	movs	r2, r3
 80068bc:	231f      	movs	r3, #31
 80068be:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80068c0:	000a      	movs	r2, r1
 80068c2:	40da      	lsrs	r2, r3
 80068c4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ac4 <HAL_RCC_OscConfig+0x338>)
 80068c6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80068c8:	4b7f      	ldr	r3, [pc, #508]	@ (8006ac8 <HAL_RCC_OscConfig+0x33c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	250f      	movs	r5, #15
 80068ce:	197c      	adds	r4, r7, r5
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7fc fd2d 	bl	8003330 <HAL_InitTick>
 80068d6:	0003      	movs	r3, r0
 80068d8:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 80068da:	197b      	adds	r3, r7, r5
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d056      	beq.n	8006990 <HAL_RCC_OscConfig+0x204>
        {
          return status;
 80068e2:	197b      	adds	r3, r7, r5
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	f000 fb2a 	bl	8006f3e <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	69db      	ldr	r3, [r3, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d034      	beq.n	800695c <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80068f2:	4b71      	ldr	r3, [pc, #452]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	4b70      	ldr	r3, [pc, #448]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80068f8:	2101      	movs	r1, #1
 80068fa:	430a      	orrs	r2, r1
 80068fc:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80068fe:	f7fc fd71 	bl	80033e4 <HAL_GetTick>
 8006902:	0003      	movs	r3, r0
 8006904:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006908:	f7fc fd6c 	bl	80033e4 <HAL_GetTick>
 800690c:	0002      	movs	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e311      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800691a:	4b67      	ldr	r3, [pc, #412]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2202      	movs	r2, #2
 8006920:	4013      	ands	r3, r2
 8006922:	d0f1      	beq.n	8006908 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006924:	4b64      	ldr	r3, [pc, #400]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	4b63      	ldr	r3, [pc, #396]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 800692a:	2108      	movs	r1, #8
 800692c:	430a      	orrs	r2, r1
 800692e:	601a      	str	r2, [r3, #0]
 8006930:	4b61      	ldr	r3, [pc, #388]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	22f0      	movs	r2, #240	@ 0xf0
 8006936:	4393      	bics	r3, r2
 8006938:	0019      	movs	r1, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800693e:	4b5e      	ldr	r3, [pc, #376]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006940:	430a      	orrs	r2, r1
 8006942:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006944:	4b5c      	ldr	r3, [pc, #368]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	4a5c      	ldr	r2, [pc, #368]	@ (8006abc <HAL_RCC_OscConfig+0x330>)
 800694a:	4013      	ands	r3, r2
 800694c:	0019      	movs	r1, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	021a      	lsls	r2, r3, #8
 8006954:	4b58      	ldr	r3, [pc, #352]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	e01a      	b.n	8006992 <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800695c:	4b56      	ldr	r3, [pc, #344]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4b55      	ldr	r3, [pc, #340]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006962:	2101      	movs	r1, #1
 8006964:	438a      	bics	r2, r1
 8006966:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006968:	f7fc fd3c 	bl	80033e4 <HAL_GetTick>
 800696c:	0003      	movs	r3, r0
 800696e:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006970:	e008      	b.n	8006984 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8006972:	f7fc fd37 	bl	80033e4 <HAL_GetTick>
 8006976:	0002      	movs	r2, r0
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d901      	bls.n	8006984 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e2dc      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006984:	4b4c      	ldr	r3, [pc, #304]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2202      	movs	r2, #2
 800698a:	4013      	ands	r3, r2
 800698c:	d1f1      	bne.n	8006972 <HAL_RCC_OscConfig+0x1e6>
 800698e:	e000      	b.n	8006992 <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006990:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2201      	movs	r2, #1
 8006998:	4013      	ands	r3, r2
 800699a:	d100      	bne.n	800699e <HAL_RCC_OscConfig+0x212>
 800699c:	e065      	b.n	8006a6a <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	2b10      	cmp	r3, #16
 80069a2:	d005      	beq.n	80069b0 <HAL_RCC_OscConfig+0x224>
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	2b18      	cmp	r3, #24
 80069a8:	d10e      	bne.n	80069c8 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b03      	cmp	r3, #3
 80069ae:	d10b      	bne.n	80069c8 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b0:	4b41      	ldr	r3, [pc, #260]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	2380      	movs	r3, #128	@ 0x80
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	4013      	ands	r3, r2
 80069ba:	d055      	beq.n	8006a68 <HAL_RCC_OscConfig+0x2dc>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d151      	bne.n	8006a68 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e2ba      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	2380      	movs	r3, #128	@ 0x80
 80069ce:	025b      	lsls	r3, r3, #9
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d107      	bne.n	80069e4 <HAL_RCC_OscConfig+0x258>
 80069d4:	4b38      	ldr	r3, [pc, #224]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	4b37      	ldr	r3, [pc, #220]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80069da:	2180      	movs	r1, #128	@ 0x80
 80069dc:	0249      	lsls	r1, r1, #9
 80069de:	430a      	orrs	r2, r1
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e013      	b.n	8006a0c <HAL_RCC_OscConfig+0x280>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685a      	ldr	r2, [r3, #4]
 80069e8:	23a0      	movs	r3, #160	@ 0xa0
 80069ea:	02db      	lsls	r3, r3, #11
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d107      	bne.n	8006a00 <HAL_RCC_OscConfig+0x274>
 80069f0:	4b31      	ldr	r3, [pc, #196]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	4b30      	ldr	r3, [pc, #192]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 80069f6:	21a0      	movs	r1, #160	@ 0xa0
 80069f8:	02c9      	lsls	r1, r1, #11
 80069fa:	430a      	orrs	r2, r1
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e005      	b.n	8006a0c <HAL_RCC_OscConfig+0x280>
 8006a00:	4b2d      	ldr	r3, [pc, #180]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	4b2c      	ldr	r3, [pc, #176]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006a06:	4931      	ldr	r1, [pc, #196]	@ (8006acc <HAL_RCC_OscConfig+0x340>)
 8006a08:	400a      	ands	r2, r1
 8006a0a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d014      	beq.n	8006a3e <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a14:	f7fc fce6 	bl	80033e4 <HAL_GetTick>
 8006a18:	0003      	movs	r3, r0
 8006a1a:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a1c:	e008      	b.n	8006a30 <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006a1e:	f7fc fce1 	bl	80033e4 <HAL_GetTick>
 8006a22:	0002      	movs	r2, r0
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b64      	cmp	r3, #100	@ 0x64
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e286      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a30:	4b21      	ldr	r3, [pc, #132]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	2380      	movs	r3, #128	@ 0x80
 8006a36:	029b      	lsls	r3, r3, #10
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d0f0      	beq.n	8006a1e <HAL_RCC_OscConfig+0x292>
 8006a3c:	e015      	b.n	8006a6a <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a3e:	f7fc fcd1 	bl	80033e4 <HAL_GetTick>
 8006a42:	0003      	movs	r3, r0
 8006a44:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006a48:	f7fc fccc 	bl	80033e4 <HAL_GetTick>
 8006a4c:	0002      	movs	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b64      	cmp	r3, #100	@ 0x64
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e271      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a5a:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	2380      	movs	r3, #128	@ 0x80
 8006a60:	029b      	lsls	r3, r3, #10
 8006a62:	4013      	ands	r3, r2
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0x2bc>
 8006a66:	e000      	b.n	8006a6a <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a68:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	4013      	ands	r3, r2
 8006a72:	d100      	bne.n	8006a76 <HAL_RCC_OscConfig+0x2ea>
 8006a74:	e073      	b.n	8006b5e <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b08      	cmp	r3, #8
 8006a7a:	d005      	beq.n	8006a88 <HAL_RCC_OscConfig+0x2fc>
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b18      	cmp	r3, #24
 8006a80:	d128      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d125      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a88:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	2380      	movs	r3, #128	@ 0x80
 8006a8e:	00db      	lsls	r3, r3, #3
 8006a90:	4013      	ands	r3, r2
 8006a92:	d005      	beq.n	8006aa0 <HAL_RCC_OscConfig+0x314>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e24e      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa0:	4b05      	ldr	r3, [pc, #20]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad0 <HAL_RCC_OscConfig+0x344>)
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	0019      	movs	r1, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	061a      	lsls	r2, r3, #24
 8006ab0:	4b01      	ldr	r3, [pc, #4]	@ (8006ab8 <HAL_RCC_OscConfig+0x32c>)
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ab6:	e052      	b.n	8006b5e <HAL_RCC_OscConfig+0x3d2>
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	ffff00ff 	.word	0xffff00ff
 8006ac0:	08007d4c 	.word	0x08007d4c
 8006ac4:	20000014 	.word	0x20000014
 8006ac8:	20000018 	.word	0x20000018
 8006acc:	fffaffff 	.word	0xfffaffff
 8006ad0:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d026      	beq.n	8006b2a <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006adc:	4bc7      	ldr	r3, [pc, #796]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4bc6      	ldr	r3, [pc, #792]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006ae2:	2180      	movs	r1, #128	@ 0x80
 8006ae4:	0049      	lsls	r1, r1, #1
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aea:	f7fc fc7b 	bl	80033e4 <HAL_GetTick>
 8006aee:	0003      	movs	r3, r0
 8006af0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006af2:	e008      	b.n	8006b06 <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006af4:	f7fc fc76 	bl	80033e4 <HAL_GetTick>
 8006af8:	0002      	movs	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d901      	bls.n	8006b06 <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 8006b02:	2303      	movs	r3, #3
 8006b04:	e21b      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b06:	4bbd      	ldr	r3, [pc, #756]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	2380      	movs	r3, #128	@ 0x80
 8006b0c:	00db      	lsls	r3, r3, #3
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d0f0      	beq.n	8006af4 <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b12:	4bba      	ldr	r3, [pc, #744]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	4aba      	ldr	r2, [pc, #744]	@ (8006e00 <HAL_RCC_OscConfig+0x674>)
 8006b18:	4013      	ands	r3, r2
 8006b1a:	0019      	movs	r1, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	691b      	ldr	r3, [r3, #16]
 8006b20:	061a      	lsls	r2, r3, #24
 8006b22:	4bb6      	ldr	r3, [pc, #728]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b24:	430a      	orrs	r2, r1
 8006b26:	605a      	str	r2, [r3, #4]
 8006b28:	e019      	b.n	8006b5e <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b2a:	4bb4      	ldr	r3, [pc, #720]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	4bb3      	ldr	r3, [pc, #716]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b30:	49b4      	ldr	r1, [pc, #720]	@ (8006e04 <HAL_RCC_OscConfig+0x678>)
 8006b32:	400a      	ands	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b36:	f7fc fc55 	bl	80033e4 <HAL_GetTick>
 8006b3a:	0003      	movs	r3, r0
 8006b3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006b40:	f7fc fc50 	bl	80033e4 <HAL_GetTick>
 8006b44:	0002      	movs	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e1f5      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b52:	4baa      	ldr	r3, [pc, #680]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	2380      	movs	r3, #128	@ 0x80
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d1f0      	bne.n	8006b40 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2208      	movs	r2, #8
 8006b64:	4013      	ands	r3, r2
 8006b66:	d051      	beq.n	8006c0c <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d031      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d108      	bne.n	8006b8a <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006b78:	4aa0      	ldr	r2, [pc, #640]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b7a:	2394      	movs	r3, #148	@ 0x94
 8006b7c:	58d3      	ldr	r3, [r2, r3]
 8006b7e:	499f      	ldr	r1, [pc, #636]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b80:	2204      	movs	r2, #4
 8006b82:	4393      	bics	r3, r2
 8006b84:	2294      	movs	r2, #148	@ 0x94
 8006b86:	508b      	str	r3, [r1, r2]
 8006b88:	e007      	b.n	8006b9a <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8006b8a:	4a9c      	ldr	r2, [pc, #624]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b8c:	2394      	movs	r3, #148	@ 0x94
 8006b8e:	58d3      	ldr	r3, [r2, r3]
 8006b90:	499a      	ldr	r1, [pc, #616]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b92:	2204      	movs	r2, #4
 8006b94:	4313      	orrs	r3, r2
 8006b96:	2294      	movs	r2, #148	@ 0x94
 8006b98:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b9a:	4a98      	ldr	r2, [pc, #608]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006b9c:	2394      	movs	r3, #148	@ 0x94
 8006b9e:	58d3      	ldr	r3, [r2, r3]
 8006ba0:	4996      	ldr	r1, [pc, #600]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	2294      	movs	r2, #148	@ 0x94
 8006ba8:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006baa:	f7fc fc1b 	bl	80033e4 <HAL_GetTick>
 8006bae:	0003      	movs	r3, r0
 8006bb0:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bb4:	f7fc fc16 	bl	80033e4 <HAL_GetTick>
 8006bb8:	0002      	movs	r2, r0
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b11      	cmp	r3, #17
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e1bb      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bc6:	4a8d      	ldr	r2, [pc, #564]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006bc8:	2394      	movs	r3, #148	@ 0x94
 8006bca:	58d3      	ldr	r3, [r2, r3]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	4013      	ands	r3, r2
 8006bd0:	d0f0      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x428>
 8006bd2:	e01b      	b.n	8006c0c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bd4:	4a89      	ldr	r2, [pc, #548]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006bd6:	2394      	movs	r3, #148	@ 0x94
 8006bd8:	58d3      	ldr	r3, [r2, r3]
 8006bda:	4988      	ldr	r1, [pc, #544]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006bdc:	2201      	movs	r2, #1
 8006bde:	4393      	bics	r3, r2
 8006be0:	2294      	movs	r2, #148	@ 0x94
 8006be2:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be4:	f7fc fbfe 	bl	80033e4 <HAL_GetTick>
 8006be8:	0003      	movs	r3, r0
 8006bea:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bee:	f7fc fbf9 	bl	80033e4 <HAL_GetTick>
 8006bf2:	0002      	movs	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b11      	cmp	r3, #17
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e19e      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c00:	4a7e      	ldr	r2, [pc, #504]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006c02:	2394      	movs	r3, #148	@ 0x94
 8006c04:	58d3      	ldr	r3, [r2, r3]
 8006c06:	2202      	movs	r2, #2
 8006c08:	4013      	ands	r3, r2
 8006c0a:	d1f0      	bne.n	8006bee <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2204      	movs	r2, #4
 8006c12:	4013      	ands	r3, r2
 8006c14:	d100      	bne.n	8006c18 <HAL_RCC_OscConfig+0x48c>
 8006c16:	e10d      	b.n	8006e34 <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c18:	201f      	movs	r0, #31
 8006c1a:	183b      	adds	r3, r7, r0
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8006c20:	4b76      	ldr	r3, [pc, #472]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006c22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c24:	2380      	movs	r3, #128	@ 0x80
 8006c26:	055b      	lsls	r3, r3, #21
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d110      	bne.n	8006c4e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c2c:	4b73      	ldr	r3, [pc, #460]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006c2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c30:	4b72      	ldr	r3, [pc, #456]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006c32:	2180      	movs	r1, #128	@ 0x80
 8006c34:	0549      	lsls	r1, r1, #21
 8006c36:	430a      	orrs	r2, r1
 8006c38:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c3a:	4b70      	ldr	r3, [pc, #448]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006c3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c3e:	2380      	movs	r3, #128	@ 0x80
 8006c40:	055b      	lsls	r3, r3, #21
 8006c42:	4013      	ands	r3, r2
 8006c44:	60bb      	str	r3, [r7, #8]
 8006c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c48:	183b      	adds	r3, r7, r0
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8006e08 <HAL_RCC_OscConfig+0x67c>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	2380      	movs	r3, #128	@ 0x80
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	4013      	ands	r3, r2
 8006c58:	d11a      	bne.n	8006c90 <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c5a:	4b6b      	ldr	r3, [pc, #428]	@ (8006e08 <HAL_RCC_OscConfig+0x67c>)
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e08 <HAL_RCC_OscConfig+0x67c>)
 8006c60:	2180      	movs	r1, #128	@ 0x80
 8006c62:	0049      	lsls	r1, r1, #1
 8006c64:	430a      	orrs	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c68:	f7fc fbbc 	bl	80033e4 <HAL_GetTick>
 8006c6c:	0003      	movs	r3, r0
 8006c6e:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c72:	f7fc fbb7 	bl	80033e4 <HAL_GetTick>
 8006c76:	0002      	movs	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e15c      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c84:	4b60      	ldr	r3, [pc, #384]	@ (8006e08 <HAL_RCC_OscConfig+0x67c>)
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	2380      	movs	r3, #128	@ 0x80
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	4013      	ands	r3, r2
 8006c8e:	d0f0      	beq.n	8006c72 <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2201      	movs	r2, #1
 8006c96:	4013      	ands	r3, r2
 8006c98:	d01e      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d010      	beq.n	8006cc6 <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ca4:	4a55      	ldr	r2, [pc, #340]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006ca6:	2390      	movs	r3, #144	@ 0x90
 8006ca8:	58d3      	ldr	r3, [r2, r3]
 8006caa:	4954      	ldr	r1, [pc, #336]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006cac:	2204      	movs	r2, #4
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	2290      	movs	r2, #144	@ 0x90
 8006cb2:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006cb4:	4a51      	ldr	r2, [pc, #324]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006cb6:	2390      	movs	r3, #144	@ 0x90
 8006cb8:	58d3      	ldr	r3, [r2, r3]
 8006cba:	4950      	ldr	r1, [pc, #320]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	2290      	movs	r2, #144	@ 0x90
 8006cc2:	508b      	str	r3, [r1, r2]
 8006cc4:	e018      	b.n	8006cf8 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006cc6:	4a4d      	ldr	r2, [pc, #308]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006cc8:	2390      	movs	r3, #144	@ 0x90
 8006cca:	58d3      	ldr	r3, [r2, r3]
 8006ccc:	494b      	ldr	r1, [pc, #300]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	2290      	movs	r2, #144	@ 0x90
 8006cd4:	508b      	str	r3, [r1, r2]
 8006cd6:	e00f      	b.n	8006cf8 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006cd8:	4a48      	ldr	r2, [pc, #288]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006cda:	2390      	movs	r3, #144	@ 0x90
 8006cdc:	58d3      	ldr	r3, [r2, r3]
 8006cde:	4947      	ldr	r1, [pc, #284]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	4393      	bics	r3, r2
 8006ce4:	2290      	movs	r2, #144	@ 0x90
 8006ce6:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006ce8:	4a44      	ldr	r2, [pc, #272]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006cea:	2390      	movs	r3, #144	@ 0x90
 8006cec:	58d3      	ldr	r3, [r2, r3]
 8006cee:	4943      	ldr	r1, [pc, #268]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006cf0:	2204      	movs	r2, #4
 8006cf2:	4393      	bics	r3, r2
 8006cf4:	2290      	movs	r2, #144	@ 0x90
 8006cf6:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d04f      	beq.n	8006da0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d00:	f7fc fb70 	bl	80033e4 <HAL_GetTick>
 8006d04:	0003      	movs	r3, r0
 8006d06:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d08:	e009      	b.n	8006d1e <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d0a:	f7fc fb6b 	bl	80033e4 <HAL_GetTick>
 8006d0e:	0002      	movs	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	4a3d      	ldr	r2, [pc, #244]	@ (8006e0c <HAL_RCC_OscConfig+0x680>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e10f      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d1e:	4a37      	ldr	r2, [pc, #220]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006d20:	2390      	movs	r3, #144	@ 0x90
 8006d22:	58d3      	ldr	r3, [r2, r3]
 8006d24:	2202      	movs	r2, #2
 8006d26:	4013      	ands	r3, r2
 8006d28:	d0ef      	beq.n	8006d0a <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2280      	movs	r2, #128	@ 0x80
 8006d30:	4013      	ands	r3, r2
 8006d32:	d01a      	beq.n	8006d6a <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d34:	4a31      	ldr	r2, [pc, #196]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006d36:	2390      	movs	r3, #144	@ 0x90
 8006d38:	58d3      	ldr	r3, [r2, r3]
 8006d3a:	4930      	ldr	r1, [pc, #192]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006d3c:	2280      	movs	r2, #128	@ 0x80
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	2290      	movs	r2, #144	@ 0x90
 8006d42:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006d44:	e009      	b.n	8006d5a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d46:	f7fc fb4d 	bl	80033e4 <HAL_GetTick>
 8006d4a:	0002      	movs	r2, r0
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	4a2e      	ldr	r2, [pc, #184]	@ (8006e0c <HAL_RCC_OscConfig+0x680>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d901      	bls.n	8006d5a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8006d56:	2303      	movs	r3, #3
 8006d58:	e0f1      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006d5a:	4a28      	ldr	r2, [pc, #160]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006d5c:	2390      	movs	r3, #144	@ 0x90
 8006d5e:	58d2      	ldr	r2, [r2, r3]
 8006d60:	2380      	movs	r3, #128	@ 0x80
 8006d62:	011b      	lsls	r3, r3, #4
 8006d64:	4013      	ands	r3, r2
 8006d66:	d0ee      	beq.n	8006d46 <HAL_RCC_OscConfig+0x5ba>
 8006d68:	e059      	b.n	8006e1e <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006d6a:	4a24      	ldr	r2, [pc, #144]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006d6c:	2390      	movs	r3, #144	@ 0x90
 8006d6e:	58d3      	ldr	r3, [r2, r3]
 8006d70:	4922      	ldr	r1, [pc, #136]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006d72:	2280      	movs	r2, #128	@ 0x80
 8006d74:	4393      	bics	r3, r2
 8006d76:	2290      	movs	r2, #144	@ 0x90
 8006d78:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d7a:	e009      	b.n	8006d90 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7c:	f7fc fb32 	bl	80033e4 <HAL_GetTick>
 8006d80:	0002      	movs	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	4a21      	ldr	r2, [pc, #132]	@ (8006e0c <HAL_RCC_OscConfig+0x680>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d901      	bls.n	8006d90 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e0d6      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006d90:	4a1a      	ldr	r2, [pc, #104]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006d92:	2390      	movs	r3, #144	@ 0x90
 8006d94:	58d2      	ldr	r2, [r2, r3]
 8006d96:	2380      	movs	r3, #128	@ 0x80
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	d1ee      	bne.n	8006d7c <HAL_RCC_OscConfig+0x5f0>
 8006d9e:	e03e      	b.n	8006e1e <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da0:	f7fc fb20 	bl	80033e4 <HAL_GetTick>
 8006da4:	0003      	movs	r3, r0
 8006da6:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006da8:	e009      	b.n	8006dbe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006daa:	f7fc fb1b 	bl	80033e4 <HAL_GetTick>
 8006dae:	0002      	movs	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	4a15      	ldr	r2, [pc, #84]	@ (8006e0c <HAL_RCC_OscConfig+0x680>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e0bf      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006dc0:	2390      	movs	r3, #144	@ 0x90
 8006dc2:	58d3      	ldr	r3, [r2, r3]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	d1ef      	bne.n	8006daa <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006dca:	4a0c      	ldr	r2, [pc, #48]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006dcc:	2390      	movs	r3, #144	@ 0x90
 8006dce:	58d3      	ldr	r3, [r2, r3]
 8006dd0:	2280      	movs	r2, #128	@ 0x80
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	d023      	beq.n	8006e1e <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006dd6:	4a09      	ldr	r2, [pc, #36]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006dd8:	2390      	movs	r3, #144	@ 0x90
 8006dda:	58d3      	ldr	r3, [r2, r3]
 8006ddc:	4907      	ldr	r1, [pc, #28]	@ (8006dfc <HAL_RCC_OscConfig+0x670>)
 8006dde:	2280      	movs	r2, #128	@ 0x80
 8006de0:	4393      	bics	r3, r2
 8006de2:	2290      	movs	r2, #144	@ 0x90
 8006de4:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006de6:	e013      	b.n	8006e10 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de8:	f7fc fafc 	bl	80033e4 <HAL_GetTick>
 8006dec:	0002      	movs	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	4a06      	ldr	r2, [pc, #24]	@ (8006e0c <HAL_RCC_OscConfig+0x680>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d90b      	bls.n	8006e10 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e0a0      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	80ffffff 	.word	0x80ffffff
 8006e04:	fffffeff 	.word	0xfffffeff
 8006e08:	40007000 	.word	0x40007000
 8006e0c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e10:	4a4d      	ldr	r2, [pc, #308]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006e12:	2390      	movs	r3, #144	@ 0x90
 8006e14:	58d2      	ldr	r2, [r2, r3]
 8006e16:	2380      	movs	r3, #128	@ 0x80
 8006e18:	011b      	lsls	r3, r3, #4
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	d1e4      	bne.n	8006de8 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e1e:	231f      	movs	r3, #31
 8006e20:	18fb      	adds	r3, r7, r3
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d105      	bne.n	8006e34 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e28:	4b47      	ldr	r3, [pc, #284]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006e2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006e2c:	4b46      	ldr	r3, [pc, #280]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006e2e:	4947      	ldr	r1, [pc, #284]	@ (8006f4c <HAL_RCC_OscConfig+0x7c0>)
 8006e30:	400a      	ands	r2, r1
 8006e32:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d100      	bne.n	8006e3e <HAL_RCC_OscConfig+0x6b2>
 8006e3c:	e07e      	b.n	8006f3c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e3e:	4b42      	ldr	r3, [pc, #264]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	2238      	movs	r2, #56	@ 0x38
 8006e44:	4013      	ands	r3, r2
 8006e46:	2b18      	cmp	r3, #24
 8006e48:	d100      	bne.n	8006e4c <HAL_RCC_OscConfig+0x6c0>
 8006e4a:	e075      	b.n	8006f38 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	2b02      	cmp	r3, #2
 8006e52:	d156      	bne.n	8006f02 <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e54:	4b3c      	ldr	r3, [pc, #240]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b3b      	ldr	r3, [pc, #236]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006e5a:	493d      	ldr	r1, [pc, #244]	@ (8006f50 <HAL_RCC_OscConfig+0x7c4>)
 8006e5c:	400a      	ands	r2, r1
 8006e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e60:	f7fc fac0 	bl	80033e4 <HAL_GetTick>
 8006e64:	0003      	movs	r3, r0
 8006e66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6a:	f7fc fabb 	bl	80033e4 <HAL_GetTick>
 8006e6e:	0002      	movs	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e060      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e7c:	4b32      	ldr	r3, [pc, #200]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	2380      	movs	r3, #128	@ 0x80
 8006e82:	049b      	lsls	r3, r3, #18
 8006e84:	4013      	ands	r3, r2
 8006e86:	d1f0      	bne.n	8006e6a <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e88:	4b2f      	ldr	r3, [pc, #188]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	4a31      	ldr	r2, [pc, #196]	@ (8006f54 <HAL_RCC_OscConfig+0x7c8>)
 8006e8e:	4013      	ands	r3, r2
 8006e90:	0019      	movs	r1, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea0:	021b      	lsls	r3, r3, #8
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	431a      	orrs	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	4b24      	ldr	r3, [pc, #144]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8006ebc:	4b22      	ldr	r3, [pc, #136]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	4b21      	ldr	r3, [pc, #132]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006ec2:	2180      	movs	r1, #128	@ 0x80
 8006ec4:	0549      	lsls	r1, r1, #21
 8006ec6:	430a      	orrs	r2, r1
 8006ec8:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eca:	4b1f      	ldr	r3, [pc, #124]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	4b1e      	ldr	r3, [pc, #120]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006ed0:	2180      	movs	r1, #128	@ 0x80
 8006ed2:	0449      	lsls	r1, r1, #17
 8006ed4:	430a      	orrs	r2, r1
 8006ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ed8:	f7fc fa84 	bl	80033e4 <HAL_GetTick>
 8006edc:	0003      	movs	r3, r0
 8006ede:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ee0:	e008      	b.n	8006ef4 <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ee2:	f7fc fa7f 	bl	80033e4 <HAL_GetTick>
 8006ee6:	0002      	movs	r2, r0
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d901      	bls.n	8006ef4 <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e024      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ef4:	4b14      	ldr	r3, [pc, #80]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	2380      	movs	r3, #128	@ 0x80
 8006efa:	049b      	lsls	r3, r3, #18
 8006efc:	4013      	ands	r3, r2
 8006efe:	d0f0      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x756>
 8006f00:	e01c      	b.n	8006f3c <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f02:	4b11      	ldr	r3, [pc, #68]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b10      	ldr	r3, [pc, #64]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006f08:	4911      	ldr	r1, [pc, #68]	@ (8006f50 <HAL_RCC_OscConfig+0x7c4>)
 8006f0a:	400a      	ands	r2, r1
 8006f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f0e:	f7fc fa69 	bl	80033e4 <HAL_GetTick>
 8006f12:	0003      	movs	r3, r0
 8006f14:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f16:	e008      	b.n	8006f2a <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f18:	f7fc fa64 	bl	80033e4 <HAL_GetTick>
 8006f1c:	0002      	movs	r2, r0
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d901      	bls.n	8006f2a <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e009      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f2a:	4b07      	ldr	r3, [pc, #28]	@ (8006f48 <HAL_RCC_OscConfig+0x7bc>)
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	2380      	movs	r3, #128	@ 0x80
 8006f30:	049b      	lsls	r3, r3, #18
 8006f32:	4013      	ands	r3, r2
 8006f34:	d1f0      	bne.n	8006f18 <HAL_RCC_OscConfig+0x78c>
 8006f36:	e001      	b.n	8006f3c <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	0018      	movs	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	b008      	add	sp, #32
 8006f44:	bdb0      	pop	{r4, r5, r7, pc}
 8006f46:	46c0      	nop			@ (mov r8, r8)
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	efffffff 	.word	0xefffffff
 8006f50:	feffffff 	.word	0xfeffffff
 8006f54:	11c1808c 	.word	0x11c1808c

08006f58 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f58:	b5b0      	push	{r4, r5, r7, lr}
 8006f5a:	b084      	sub	sp, #16
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f62:	4b6c      	ldr	r3, [pc, #432]	@ (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2207      	movs	r2, #7
 8006f68:	4013      	ands	r3, r2
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d911      	bls.n	8006f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f70:	4b68      	ldr	r3, [pc, #416]	@ (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2207      	movs	r2, #7
 8006f76:	4393      	bics	r3, r2
 8006f78:	0019      	movs	r1, r3
 8006f7a:	4b66      	ldr	r3, [pc, #408]	@ (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	430a      	orrs	r2, r1
 8006f80:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f82:	4b64      	ldr	r3, [pc, #400]	@ (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2207      	movs	r2, #7
 8006f88:	4013      	ands	r3, r2
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d001      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0bb      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	d100      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0x48>
 8006f9e:	e064      	b.n	800706a <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d107      	bne.n	8006fb8 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	2380      	movs	r3, #128	@ 0x80
 8006fae:	049b      	lsls	r3, r3, #18
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	d138      	bne.n	8007026 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e0a9      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	2b02      	cmp	r3, #2
 8006fbe:	d107      	bne.n	8006fd0 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fc0:	4b55      	ldr	r3, [pc, #340]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	2380      	movs	r3, #128	@ 0x80
 8006fc6:	029b      	lsls	r3, r3, #10
 8006fc8:	4013      	ands	r3, r2
 8006fca:	d12c      	bne.n	8007026 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e09d      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d106      	bne.n	8006fe6 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006fd8:	4b4f      	ldr	r3, [pc, #316]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	4013      	ands	r3, r2
 8006fe0:	d121      	bne.n	8007026 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e092      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d107      	bne.n	8006ffe <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fee:	4b4a      	ldr	r3, [pc, #296]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	2380      	movs	r3, #128	@ 0x80
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	d115      	bne.n	8007026 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e086      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b04      	cmp	r3, #4
 8007004:	d107      	bne.n	8007016 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007006:	4a44      	ldr	r2, [pc, #272]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8007008:	2394      	movs	r3, #148	@ 0x94
 800700a:	58d3      	ldr	r3, [r2, r3]
 800700c:	2202      	movs	r2, #2
 800700e:	4013      	ands	r3, r2
 8007010:	d109      	bne.n	8007026 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e07a      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007016:	4a40      	ldr	r2, [pc, #256]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8007018:	2390      	movs	r3, #144	@ 0x90
 800701a:	58d3      	ldr	r3, [r2, r3]
 800701c:	2202      	movs	r2, #2
 800701e:	4013      	ands	r3, r2
 8007020:	d101      	bne.n	8007026 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e072      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007026:	4b3c      	ldr	r3, [pc, #240]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2207      	movs	r2, #7
 800702c:	4393      	bics	r3, r2
 800702e:	0019      	movs	r1, r3
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	4b38      	ldr	r3, [pc, #224]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8007036:	430a      	orrs	r2, r1
 8007038:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800703a:	f7fc f9d3 	bl	80033e4 <HAL_GetTick>
 800703e:	0003      	movs	r3, r0
 8007040:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007042:	e009      	b.n	8007058 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007044:	f7fc f9ce 	bl	80033e4 <HAL_GetTick>
 8007048:	0002      	movs	r2, r0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	4a33      	ldr	r2, [pc, #204]	@ (800711c <HAL_RCC_ClockConfig+0x1c4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d901      	bls.n	8007058 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8007054:	2303      	movs	r3, #3
 8007056:	e059      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007058:	4b2f      	ldr	r3, [pc, #188]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2238      	movs	r2, #56	@ 0x38
 800705e:	401a      	ands	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	00db      	lsls	r3, r3, #3
 8007066:	429a      	cmp	r2, r3
 8007068:	d1ec      	bne.n	8007044 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2202      	movs	r2, #2
 8007070:	4013      	ands	r3, r2
 8007072:	d009      	beq.n	8007088 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007074:	4b28      	ldr	r3, [pc, #160]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	4a29      	ldr	r2, [pc, #164]	@ (8007120 <HAL_RCC_ClockConfig+0x1c8>)
 800707a:	4013      	ands	r3, r2
 800707c:	0019      	movs	r1, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	4b25      	ldr	r3, [pc, #148]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 8007084:	430a      	orrs	r2, r1
 8007086:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007088:	4b22      	ldr	r3, [pc, #136]	@ (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2207      	movs	r2, #7
 800708e:	4013      	ands	r3, r2
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d211      	bcs.n	80070ba <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007096:	4b1f      	ldr	r3, [pc, #124]	@ (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2207      	movs	r2, #7
 800709c:	4393      	bics	r3, r2
 800709e:	0019      	movs	r1, r3
 80070a0:	4b1c      	ldr	r3, [pc, #112]	@ (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007114 <HAL_RCC_ClockConfig+0x1bc>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2207      	movs	r2, #7
 80070ae:	4013      	ands	r3, r2
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d001      	beq.n	80070ba <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e028      	b.n	800710c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2204      	movs	r2, #4
 80070c0:	4013      	ands	r3, r2
 80070c2:	d009      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80070c4:	4b14      	ldr	r3, [pc, #80]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	4a16      	ldr	r2, [pc, #88]	@ (8007124 <HAL_RCC_ClockConfig+0x1cc>)
 80070ca:	4013      	ands	r3, r2
 80070cc:	0019      	movs	r1, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68da      	ldr	r2, [r3, #12]
 80070d2:	4b11      	ldr	r3, [pc, #68]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 80070d4:	430a      	orrs	r2, r1
 80070d6:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80070d8:	f000 f88e 	bl	80071f8 <HAL_RCC_GetSysClockFreq>
 80070dc:	0001      	movs	r1, r0
 80070de:	4b0e      	ldr	r3, [pc, #56]	@ (8007118 <HAL_RCC_ClockConfig+0x1c0>)
 80070e0:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070e2:	0a1b      	lsrs	r3, r3, #8
 80070e4:	220f      	movs	r2, #15
 80070e6:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80070e8:	4a0f      	ldr	r2, [pc, #60]	@ (8007128 <HAL_RCC_ClockConfig+0x1d0>)
 80070ea:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070ec:	001a      	movs	r2, r3
 80070ee:	231f      	movs	r3, #31
 80070f0:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 80070f2:	000a      	movs	r2, r1
 80070f4:	40da      	lsrs	r2, r3
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <HAL_RCC_ClockConfig+0x1d4>)
 80070f8:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 80070fa:	250b      	movs	r5, #11
 80070fc:	197c      	adds	r4, r7, r5
 80070fe:	2003      	movs	r0, #3
 8007100:	f7fc f916 	bl	8003330 <HAL_InitTick>
 8007104:	0003      	movs	r3, r0
 8007106:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8007108:	197b      	adds	r3, r7, r5
 800710a:	781b      	ldrb	r3, [r3, #0]
}
 800710c:	0018      	movs	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	b004      	add	sp, #16
 8007112:	bdb0      	pop	{r4, r5, r7, pc}
 8007114:	40022000 	.word	0x40022000
 8007118:	40021000 	.word	0x40021000
 800711c:	00001388 	.word	0x00001388
 8007120:	fffff0ff 	.word	0xfffff0ff
 8007124:	ffff8fff 	.word	0xffff8fff
 8007128:	08007d4c 	.word	0x08007d4c
 800712c:	20000014 	.word	0x20000014

08007130 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCO2DIV_512 division by 512 applied to MCO clock
  *            @arg @ref RCC_MCO2DIV_1024 division by 1024 applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b08c      	sub	sp, #48	@ 0x30
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
  uint32_t mco_gpio_index;
  GPIO_TypeDef *mco_gpio_port;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));

  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800713c:	2010      	movs	r0, #16
 800713e:	183b      	adds	r3, r7, r0
 8007140:	2202      	movs	r2, #2
 8007142:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007144:	183b      	adds	r3, r7, r0
 8007146:	2203      	movs	r2, #3
 8007148:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800714a:	183b      	adds	r3, r7, r0
 800714c:	2200      	movs	r2, #0
 800714e:	609a      	str	r2, [r3, #8]

  /* Get MCOx selection */
  mcoindex = RCC_MCOx & RCC_MCO_INDEX_MASK;
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	2380      	movs	r3, #128	@ 0x80
 8007154:	055b      	lsls	r3, r3, #21
 8007156:	4013      	ands	r3, r2
 8007158:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get MCOx GPIO Port */
  mco_gpio_port = (GPIO_TypeDef *) RCC_GET_MCO_GPIO_PORT(RCC_MCOx);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	0c1b      	lsrs	r3, r3, #16
 800715e:	220f      	movs	r2, #15
 8007160:	4013      	ands	r3, r2
 8007162:	22a0      	movs	r2, #160	@ 0xa0
 8007164:	0352      	lsls	r2, r2, #13
 8007166:	4694      	mov	ip, r2
 8007168:	4463      	add	r3, ip
 800716a:	029b      	lsls	r3, r3, #10
 800716c:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* MCOx Clock Enable */
  mco_gpio_index = RCC_GET_MCO_GPIO_INDEX(RCC_MCOx);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	0c1b      	lsrs	r3, r3, #16
 8007172:	220f      	movs	r2, #15
 8007174:	4013      	ands	r3, r2
 8007176:	627b      	str	r3, [r7, #36]	@ 0x24
  SET_BIT(RCC->IOPENR, (1UL << mco_gpio_index));
 8007178:	4b1d      	ldr	r3, [pc, #116]	@ (80071f0 <HAL_RCC_MCOConfig+0xc0>)
 800717a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800717c:	2201      	movs	r2, #1
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	409a      	lsls	r2, r3
 8007182:	4b1b      	ldr	r3, [pc, #108]	@ (80071f0 <HAL_RCC_MCOConfig+0xc0>)
 8007184:	430a      	orrs	r2, r1
 8007186:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure the MCOx pin in alternate function mode */
  GPIO_InitStruct.Pin = RCC_GET_MCO_GPIO_PIN(RCC_MCOx);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	041b      	lsls	r3, r3, #16
 800718c:	0c1a      	lsrs	r2, r3, #16
 800718e:	183b      	adds	r3, r7, r0
 8007190:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Alternate = RCC_GET_MCO_GPIO_AF(RCC_MCOx);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	0d1b      	lsrs	r3, r3, #20
 8007196:	22ff      	movs	r2, #255	@ 0xff
 8007198:	401a      	ands	r2, r3
 800719a:	183b      	adds	r3, r7, r0
 800719c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(mco_gpio_port, &GPIO_InitStruct);
 800719e:	183a      	adds	r2, r7, r0
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	0011      	movs	r1, r2
 80071a4:	0018      	movs	r0, r3
 80071a6:	f7fc fcef 	bl	8003b88 <HAL_GPIO_Init>

  if (mcoindex == RCC_MCO1_INDEX)
 80071aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10a      	bne.n	80071c6 <HAL_RCC_MCOConfig+0x96>
  {
    assert_param(IS_RCC_MCO1DIV(RCC_MCODiv));
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1SEL | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80071b0:	4b0f      	ldr	r3, [pc, #60]	@ (80071f0 <HAL_RCC_MCOConfig+0xc0>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	021b      	lsls	r3, r3, #8
 80071b6:	0a19      	lsrs	r1, r3, #8
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	431a      	orrs	r2, r3
 80071be:	4b0c      	ldr	r3, [pc, #48]	@ (80071f0 <HAL_RCC_MCOConfig+0xc0>)
 80071c0:	430a      	orrs	r2, r1
 80071c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    /* unexpected case: added to resolve MISRA 15.7 rule */
  }
}
 80071c4:	e00f      	b.n	80071e6 <HAL_RCC_MCOConfig+0xb6>
  else if (mcoindex == RCC_MCO2_INDEX)
 80071c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c8:	2380      	movs	r3, #128	@ 0x80
 80071ca:	055b      	lsls	r3, r3, #21
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d10a      	bne.n	80071e6 <HAL_RCC_MCOConfig+0xb6>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2SEL | RCC_CFGR_MCO2PRE), (RCC_MCOSource | RCC_MCODiv));
 80071d0:	4b07      	ldr	r3, [pc, #28]	@ (80071f0 <HAL_RCC_MCOConfig+0xc0>)
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	4a07      	ldr	r2, [pc, #28]	@ (80071f4 <HAL_RCC_MCOConfig+0xc4>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	0019      	movs	r1, r3
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	431a      	orrs	r2, r3
 80071e0:	4b03      	ldr	r3, [pc, #12]	@ (80071f0 <HAL_RCC_MCOConfig+0xc0>)
 80071e2:	430a      	orrs	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]
}
 80071e6:	46c0      	nop			@ (mov r8, r8)
 80071e8:	46bd      	mov	sp, r7
 80071ea:	b00c      	add	sp, #48	@ 0x30
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	46c0      	nop			@ (mov r8, r8)
 80071f0:	40021000 	.word	0x40021000
 80071f4:	ff00ffff 	.word	0xff00ffff

080071f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b08a      	sub	sp, #40	@ 0x28
 80071fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007206:	4b46      	ldr	r3, [pc, #280]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2238      	movs	r2, #56	@ 0x38
 800720c:	4013      	ands	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007210:	4b43      	ldr	r3, [pc, #268]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2203      	movs	r2, #3
 8007216:	4013      	ands	r3, r2
 8007218:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_RCC_GetSysClockFreq+0x34>
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	2b18      	cmp	r3, #24
 8007224:	d125      	bne.n	8007272 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d122      	bne.n	8007272 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800722c:	4b3c      	ldr	r3, [pc, #240]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2208      	movs	r2, #8
 8007232:	4013      	ands	r3, r2
 8007234:	d107      	bne.n	8007246 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8007236:	4a3a      	ldr	r2, [pc, #232]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 8007238:	2394      	movs	r3, #148	@ 0x94
 800723a:	58d3      	ldr	r3, [r2, r3]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	220f      	movs	r2, #15
 8007240:	4013      	ands	r3, r2
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
 8007244:	e005      	b.n	8007252 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007246:	4b36      	ldr	r3, [pc, #216]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	091b      	lsrs	r3, r3, #4
 800724c:	220f      	movs	r2, #15
 800724e:	4013      	ands	r3, r2
 8007250:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	2b0b      	cmp	r3, #11
 8007256:	d901      	bls.n	800725c <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8007258:	2300      	movs	r3, #0
 800725a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 800725c:	4b31      	ldr	r3, [pc, #196]	@ (8007324 <HAL_RCC_GetSysClockFreq+0x12c>)
 800725e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007260:	0092      	lsls	r2, r2, #2
 8007262:	58d3      	ldr	r3, [r2, r3]
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d11b      	bne.n	80072a4 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007270:	e018      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b08      	cmp	r3, #8
 8007276:	d102      	bne.n	800727e <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007278:	4b2b      	ldr	r3, [pc, #172]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x130>)
 800727a:	623b      	str	r3, [r7, #32]
 800727c:	e012      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	2b10      	cmp	r3, #16
 8007282:	d102      	bne.n	800728a <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007284:	4b28      	ldr	r3, [pc, #160]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x130>)
 8007286:	623b      	str	r3, [r7, #32]
 8007288:	e00c      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b20      	cmp	r3, #32
 800728e:	d103      	bne.n	8007298 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007290:	23fa      	movs	r3, #250	@ 0xfa
 8007292:	01db      	lsls	r3, r3, #7
 8007294:	623b      	str	r3, [r7, #32]
 8007296:	e005      	b.n	80072a4 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	2b28      	cmp	r3, #40	@ 0x28
 800729c:	d102      	bne.n	80072a4 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800729e:	2380      	movs	r3, #128	@ 0x80
 80072a0:	021b      	lsls	r3, r3, #8
 80072a2:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b18      	cmp	r3, #24
 80072a8:	d135      	bne.n	8007316 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072aa:	4b1d      	ldr	r3, [pc, #116]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2203      	movs	r2, #3
 80072b0:	4013      	ands	r3, r2
 80072b2:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	2207      	movs	r2, #7
 80072bc:	4013      	ands	r3, r2
 80072be:	3301      	adds	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d003      	beq.n	80072d0 <HAL_RCC_GetSysClockFreq+0xd8>
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d003      	beq.n	80072d6 <HAL_RCC_GetSysClockFreq+0xde>
 80072ce:	e005      	b.n	80072dc <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 80072d0:	4b15      	ldr	r3, [pc, #84]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x130>)
 80072d2:	61fb      	str	r3, [r7, #28]
        break;
 80072d4:	e005      	b.n	80072e2 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 80072d6:	4b14      	ldr	r3, [pc, #80]	@ (8007328 <HAL_RCC_GetSysClockFreq+0x130>)
 80072d8:	61fb      	str	r3, [r7, #28]
        break;
 80072da:	e002      	b.n	80072e2 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 80072dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072de:	61fb      	str	r3, [r7, #28]
        break;
 80072e0:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 80072e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	0a1b      	lsrs	r3, r3, #8
 80072e8:	227f      	movs	r2, #127	@ 0x7f
 80072ea:	4013      	ands	r3, r2
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	4353      	muls	r3, r2
 80072f0:	68f9      	ldr	r1, [r7, #12]
 80072f2:	0018      	movs	r0, r3
 80072f4:	f7f8 ff08 	bl	8000108 <__udivsi3>
 80072f8:	0003      	movs	r3, r0
 80072fa:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80072fc:	4b08      	ldr	r3, [pc, #32]	@ (8007320 <HAL_RCC_GetSysClockFreq+0x128>)
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	0f5b      	lsrs	r3, r3, #29
 8007302:	2207      	movs	r2, #7
 8007304:	4013      	ands	r3, r2
 8007306:	3301      	adds	r3, #1
 8007308:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	68b8      	ldr	r0, [r7, #8]
 800730e:	f7f8 fefb 	bl	8000108 <__udivsi3>
 8007312:	0003      	movs	r3, r0
 8007314:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8007316:	6a3b      	ldr	r3, [r7, #32]
}
 8007318:	0018      	movs	r0, r3
 800731a:	46bd      	mov	sp, r7
 800731c:	b00a      	add	sp, #40	@ 0x28
 800731e:	bd80      	pop	{r7, pc}
 8007320:	40021000 	.word	0x40021000
 8007324:	08007d5c 	.word	0x08007d5c
 8007328:	00f42400 	.word	0x00f42400

0800732c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007334:	2300      	movs	r3, #0
 8007336:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007338:	4b2f      	ldr	r3, [pc, #188]	@ (80073f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800733a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800733c:	2380      	movs	r3, #128	@ 0x80
 800733e:	055b      	lsls	r3, r3, #21
 8007340:	4013      	ands	r3, r2
 8007342:	d004      	beq.n	800734e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007344:	f7ff fa16 	bl	8006774 <HAL_PWREx_GetVoltageRange>
 8007348:	0003      	movs	r3, r0
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	e017      	b.n	800737e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800734e:	4b2a      	ldr	r3, [pc, #168]	@ (80073f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007350:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007352:	4b29      	ldr	r3, [pc, #164]	@ (80073f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007354:	2180      	movs	r1, #128	@ 0x80
 8007356:	0549      	lsls	r1, r1, #21
 8007358:	430a      	orrs	r2, r1
 800735a:	659a      	str	r2, [r3, #88]	@ 0x58
 800735c:	4b26      	ldr	r3, [pc, #152]	@ (80073f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800735e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007360:	2380      	movs	r3, #128	@ 0x80
 8007362:	055b      	lsls	r3, r3, #21
 8007364:	4013      	ands	r3, r2
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800736a:	f7ff fa03 	bl	8006774 <HAL_PWREx_GetVoltageRange>
 800736e:	0003      	movs	r3, r0
 8007370:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007372:	4b21      	ldr	r3, [pc, #132]	@ (80073f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007374:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007376:	4b20      	ldr	r3, [pc, #128]	@ (80073f8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8007378:	4920      	ldr	r1, [pc, #128]	@ (80073fc <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 800737a:	400a      	ands	r2, r1
 800737c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	2380      	movs	r3, #128	@ 0x80
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	429a      	cmp	r2, r3
 8007386:	d111      	bne.n	80073ac <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b80      	cmp	r3, #128	@ 0x80
 800738c:	d91c      	bls.n	80073c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2bb0      	cmp	r3, #176	@ 0xb0
 8007392:	d902      	bls.n	800739a <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007394:	2302      	movs	r3, #2
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	e016      	b.n	80073c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b90      	cmp	r3, #144	@ 0x90
 800739e:	d902      	bls.n	80073a6 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80073a0:	2301      	movs	r3, #1
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	e010      	b.n	80073c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80073a6:	2300      	movs	r3, #0
 80073a8:	613b      	str	r3, [r7, #16]
 80073aa:	e00d      	b.n	80073c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80073b0:	d902      	bls.n	80073b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80073b2:	2302      	movs	r3, #2
 80073b4:	613b      	str	r3, [r7, #16]
 80073b6:	e007      	b.n	80073c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2b70      	cmp	r3, #112	@ 0x70
 80073bc:	d102      	bne.n	80073c4 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80073be:	2301      	movs	r3, #1
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	e001      	b.n	80073c8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80073c4:	2300      	movs	r3, #0
 80073c6:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80073c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007400 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2207      	movs	r2, #7
 80073ce:	4393      	bics	r3, r2
 80073d0:	0019      	movs	r1, r3
 80073d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007400 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80073d4:	693a      	ldr	r2, [r7, #16]
 80073d6:	430a      	orrs	r2, r1
 80073d8:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80073da:	4b09      	ldr	r3, [pc, #36]	@ (8007400 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2207      	movs	r2, #7
 80073e0:	4013      	ands	r3, r2
 80073e2:	693a      	ldr	r2, [r7, #16]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d001      	beq.n	80073ec <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e000      	b.n	80073ee <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	0018      	movs	r0, r3
 80073f0:	46bd      	mov	sp, r7
 80073f2:	b006      	add	sp, #24
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	46c0      	nop			@ (mov r8, r8)
 80073f8:	40021000 	.word	0x40021000
 80073fc:	efffffff 	.word	0xefffffff
 8007400:	40022000 	.word	0x40022000

08007404 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800740c:	2313      	movs	r3, #19
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	2200      	movs	r2, #0
 8007412:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007414:	2312      	movs	r3, #18
 8007416:	18fb      	adds	r3, r7, r3
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	2380      	movs	r3, #128	@ 0x80
 8007422:	021b      	lsls	r3, r3, #8
 8007424:	4013      	ands	r3, r2
 8007426:	d100      	bne.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8007428:	e0b7      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 800742a:	2011      	movs	r0, #17
 800742c:	183b      	adds	r3, r7, r0
 800742e:	2200      	movs	r2, #0
 8007430:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007432:	4b4c      	ldr	r3, [pc, #304]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007434:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007436:	2380      	movs	r3, #128	@ 0x80
 8007438:	055b      	lsls	r3, r3, #21
 800743a:	4013      	ands	r3, r2
 800743c:	d110      	bne.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800743e:	4b49      	ldr	r3, [pc, #292]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007440:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007442:	4b48      	ldr	r3, [pc, #288]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007444:	2180      	movs	r1, #128	@ 0x80
 8007446:	0549      	lsls	r1, r1, #21
 8007448:	430a      	orrs	r2, r1
 800744a:	659a      	str	r2, [r3, #88]	@ 0x58
 800744c:	4b45      	ldr	r3, [pc, #276]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800744e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007450:	2380      	movs	r3, #128	@ 0x80
 8007452:	055b      	lsls	r3, r3, #21
 8007454:	4013      	ands	r3, r2
 8007456:	60bb      	str	r3, [r7, #8]
 8007458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800745a:	183b      	adds	r3, r7, r0
 800745c:	2201      	movs	r2, #1
 800745e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007460:	4b41      	ldr	r3, [pc, #260]	@ (8007568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	4b40      	ldr	r3, [pc, #256]	@ (8007568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007466:	2180      	movs	r1, #128	@ 0x80
 8007468:	0049      	lsls	r1, r1, #1
 800746a:	430a      	orrs	r2, r1
 800746c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800746e:	f7fb ffb9 	bl	80033e4 <HAL_GetTick>
 8007472:	0003      	movs	r3, r0
 8007474:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007476:	e00b      	b.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007478:	f7fb ffb4 	bl	80033e4 <HAL_GetTick>
 800747c:	0002      	movs	r2, r0
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	1ad3      	subs	r3, r2, r3
 8007482:	2b02      	cmp	r3, #2
 8007484:	d904      	bls.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007486:	2313      	movs	r3, #19
 8007488:	18fb      	adds	r3, r7, r3
 800748a:	2203      	movs	r2, #3
 800748c:	701a      	strb	r2, [r3, #0]
        break;
 800748e:	e005      	b.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007490:	4b35      	ldr	r3, [pc, #212]	@ (8007568 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	2380      	movs	r3, #128	@ 0x80
 8007496:	005b      	lsls	r3, r3, #1
 8007498:	4013      	ands	r3, r2
 800749a:	d0ed      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800749c:	2313      	movs	r3, #19
 800749e:	18fb      	adds	r3, r7, r3
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d168      	bne.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074a6:	4a2f      	ldr	r2, [pc, #188]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074a8:	2390      	movs	r3, #144	@ 0x90
 80074aa:	58d2      	ldr	r2, [r2, r3]
 80074ac:	23c0      	movs	r3, #192	@ 0xc0
 80074ae:	009b      	lsls	r3, r3, #2
 80074b0:	4013      	ands	r3, r2
 80074b2:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01f      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d01a      	beq.n	80074fa <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074c4:	4a27      	ldr	r2, [pc, #156]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074c6:	2390      	movs	r3, #144	@ 0x90
 80074c8:	58d3      	ldr	r3, [r2, r3]
 80074ca:	4a28      	ldr	r2, [pc, #160]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074d0:	4a24      	ldr	r2, [pc, #144]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074d2:	2390      	movs	r3, #144	@ 0x90
 80074d4:	58d3      	ldr	r3, [r2, r3]
 80074d6:	4923      	ldr	r1, [pc, #140]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074d8:	2280      	movs	r2, #128	@ 0x80
 80074da:	0252      	lsls	r2, r2, #9
 80074dc:	4313      	orrs	r3, r2
 80074de:	2290      	movs	r2, #144	@ 0x90
 80074e0:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074e2:	4a20      	ldr	r2, [pc, #128]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074e4:	2390      	movs	r3, #144	@ 0x90
 80074e6:	58d3      	ldr	r3, [r2, r3]
 80074e8:	491e      	ldr	r1, [pc, #120]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074ea:	4a21      	ldr	r2, [pc, #132]	@ (8007570 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	2290      	movs	r2, #144	@ 0x90
 80074f0:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074f2:	491c      	ldr	r1, [pc, #112]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80074f4:	2290      	movs	r2, #144	@ 0x90
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	2201      	movs	r2, #1
 80074fe:	4013      	ands	r3, r2
 8007500:	d017      	beq.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007502:	f7fb ff6f 	bl	80033e4 <HAL_GetTick>
 8007506:	0003      	movs	r3, r0
 8007508:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800750a:	e00c      	b.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800750c:	f7fb ff6a 	bl	80033e4 <HAL_GetTick>
 8007510:	0002      	movs	r2, r0
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	4a17      	ldr	r2, [pc, #92]	@ (8007574 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d904      	bls.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 800751c:	2313      	movs	r3, #19
 800751e:	18fb      	adds	r3, r7, r3
 8007520:	2203      	movs	r2, #3
 8007522:	701a      	strb	r2, [r3, #0]
            break;
 8007524:	e005      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007526:	4a0f      	ldr	r2, [pc, #60]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007528:	2390      	movs	r3, #144	@ 0x90
 800752a:	58d3      	ldr	r3, [r2, r3]
 800752c:	2202      	movs	r2, #2
 800752e:	4013      	ands	r3, r2
 8007530:	d0ec      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8007532:	2313      	movs	r3, #19
 8007534:	18fb      	adds	r3, r7, r3
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800753c:	4a09      	ldr	r2, [pc, #36]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800753e:	2390      	movs	r3, #144	@ 0x90
 8007540:	58d3      	ldr	r3, [r2, r3]
 8007542:	4a0a      	ldr	r2, [pc, #40]	@ (800756c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007544:	401a      	ands	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800754a:	4906      	ldr	r1, [pc, #24]	@ (8007564 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800754c:	4313      	orrs	r3, r2
 800754e:	2290      	movs	r2, #144	@ 0x90
 8007550:	508b      	str	r3, [r1, r2]
 8007552:	e017      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007554:	2312      	movs	r3, #18
 8007556:	18fb      	adds	r3, r7, r3
 8007558:	2213      	movs	r2, #19
 800755a:	18ba      	adds	r2, r7, r2
 800755c:	7812      	ldrb	r2, [r2, #0]
 800755e:	701a      	strb	r2, [r3, #0]
 8007560:	e010      	b.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007562:	46c0      	nop			@ (mov r8, r8)
 8007564:	40021000 	.word	0x40021000
 8007568:	40007000 	.word	0x40007000
 800756c:	fffffcff 	.word	0xfffffcff
 8007570:	fffeffff 	.word	0xfffeffff
 8007574:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007578:	2312      	movs	r3, #18
 800757a:	18fb      	adds	r3, r7, r3
 800757c:	2213      	movs	r2, #19
 800757e:	18ba      	adds	r2, r7, r2
 8007580:	7812      	ldrb	r2, [r2, #0]
 8007582:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007584:	2311      	movs	r3, #17
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d105      	bne.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800758e:	4b84      	ldr	r3, [pc, #528]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007590:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007592:	4b83      	ldr	r3, [pc, #524]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007594:	4983      	ldr	r1, [pc, #524]	@ (80077a4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8007596:	400a      	ands	r2, r1
 8007598:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2201      	movs	r2, #1
 80075a0:	4013      	ands	r3, r2
 80075a2:	d00b      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075a4:	4a7e      	ldr	r2, [pc, #504]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80075a6:	2388      	movs	r3, #136	@ 0x88
 80075a8:	58d3      	ldr	r3, [r2, r3]
 80075aa:	2203      	movs	r2, #3
 80075ac:	4393      	bics	r3, r2
 80075ae:	001a      	movs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	497a      	ldr	r1, [pc, #488]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	2288      	movs	r2, #136	@ 0x88
 80075ba:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	2202      	movs	r2, #2
 80075c2:	4013      	ands	r3, r2
 80075c4:	d00b      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075c6:	4a76      	ldr	r2, [pc, #472]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80075c8:	2388      	movs	r3, #136	@ 0x88
 80075ca:	58d3      	ldr	r3, [r2, r3]
 80075cc:	220c      	movs	r2, #12
 80075ce:	4393      	bics	r3, r2
 80075d0:	001a      	movs	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	4972      	ldr	r1, [pc, #456]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	2288      	movs	r2, #136	@ 0x88
 80075dc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2210      	movs	r2, #16
 80075e4:	4013      	ands	r3, r2
 80075e6:	d00a      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80075e8:	4a6d      	ldr	r2, [pc, #436]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80075ea:	2388      	movs	r3, #136	@ 0x88
 80075ec:	58d3      	ldr	r3, [r2, r3]
 80075ee:	4a6e      	ldr	r2, [pc, #440]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80075f0:	401a      	ands	r2, r3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	496a      	ldr	r1, [pc, #424]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	2288      	movs	r2, #136	@ 0x88
 80075fc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2208      	movs	r2, #8
 8007604:	4013      	ands	r3, r2
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8007608:	4a65      	ldr	r2, [pc, #404]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800760a:	2388      	movs	r3, #136	@ 0x88
 800760c:	58d3      	ldr	r3, [r2, r3]
 800760e:	4a67      	ldr	r2, [pc, #412]	@ (80077ac <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8007610:	401a      	ands	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	4962      	ldr	r1, [pc, #392]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007618:	4313      	orrs	r3, r2
 800761a:	2288      	movs	r2, #136	@ 0x88
 800761c:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2220      	movs	r2, #32
 8007624:	4013      	ands	r3, r2
 8007626:	d00a      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007628:	4a5d      	ldr	r2, [pc, #372]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800762a:	2388      	movs	r3, #136	@ 0x88
 800762c:	58d3      	ldr	r3, [r2, r3]
 800762e:	4a60      	ldr	r2, [pc, #384]	@ (80077b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8007630:	401a      	ands	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	495a      	ldr	r1, [pc, #360]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007638:	4313      	orrs	r3, r2
 800763a:	2288      	movs	r2, #136	@ 0x88
 800763c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2240      	movs	r2, #64	@ 0x40
 8007644:	4013      	ands	r3, r2
 8007646:	d00a      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007648:	4a55      	ldr	r2, [pc, #340]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800764a:	2388      	movs	r3, #136	@ 0x88
 800764c:	58d3      	ldr	r3, [r2, r3]
 800764e:	4a59      	ldr	r2, [pc, #356]	@ (80077b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8007650:	401a      	ands	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	4952      	ldr	r1, [pc, #328]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007658:	4313      	orrs	r3, r2
 800765a:	2288      	movs	r2, #136	@ 0x88
 800765c:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2280      	movs	r2, #128	@ 0x80
 8007664:	4013      	ands	r3, r2
 8007666:	d00a      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007668:	4a4d      	ldr	r2, [pc, #308]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800766a:	2388      	movs	r3, #136	@ 0x88
 800766c:	58d3      	ldr	r3, [r2, r3]
 800766e:	4a52      	ldr	r2, [pc, #328]	@ (80077b8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8007670:	401a      	ands	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	494a      	ldr	r1, [pc, #296]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007678:	4313      	orrs	r3, r2
 800767a:	2288      	movs	r2, #136	@ 0x88
 800767c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	2380      	movs	r3, #128	@ 0x80
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	4013      	ands	r3, r2
 8007688:	d00a      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800768a:	4a45      	ldr	r2, [pc, #276]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800768c:	2388      	movs	r3, #136	@ 0x88
 800768e:	58d3      	ldr	r3, [r2, r3]
 8007690:	4a4a      	ldr	r2, [pc, #296]	@ (80077bc <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8007692:	401a      	ands	r2, r3
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	4941      	ldr	r1, [pc, #260]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800769a:	4313      	orrs	r3, r2
 800769c:	2288      	movs	r2, #136	@ 0x88
 800769e:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	2380      	movs	r3, #128	@ 0x80
 80076a6:	01db      	lsls	r3, r3, #7
 80076a8:	4013      	ands	r3, r2
 80076aa:	d017      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076b0:	2380      	movs	r3, #128	@ 0x80
 80076b2:	055b      	lsls	r3, r3, #21
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d106      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80076b8:	4b39      	ldr	r3, [pc, #228]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	4b38      	ldr	r3, [pc, #224]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80076be:	2180      	movs	r1, #128	@ 0x80
 80076c0:	0249      	lsls	r1, r1, #9
 80076c2:	430a      	orrs	r2, r1
 80076c4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076c6:	4a36      	ldr	r2, [pc, #216]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80076c8:	2388      	movs	r3, #136	@ 0x88
 80076ca:	58d3      	ldr	r3, [r2, r3]
 80076cc:	4a3c      	ldr	r2, [pc, #240]	@ (80077c0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80076ce:	401a      	ands	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d4:	4932      	ldr	r1, [pc, #200]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80076d6:	4313      	orrs	r3, r2
 80076d8:	2288      	movs	r2, #136	@ 0x88
 80076da:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	2380      	movs	r3, #128	@ 0x80
 80076e2:	019b      	lsls	r3, r3, #6
 80076e4:	4013      	ands	r3, r2
 80076e6:	d017      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ec:	2380      	movs	r3, #128	@ 0x80
 80076ee:	051b      	lsls	r3, r3, #20
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d106      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80076f4:	4b2a      	ldr	r3, [pc, #168]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80076f6:	68da      	ldr	r2, [r3, #12]
 80076f8:	4b29      	ldr	r3, [pc, #164]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80076fa:	2180      	movs	r1, #128	@ 0x80
 80076fc:	0449      	lsls	r1, r1, #17
 80076fe:	430a      	orrs	r2, r1
 8007700:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007702:	4a27      	ldr	r2, [pc, #156]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007704:	2388      	movs	r3, #136	@ 0x88
 8007706:	58d3      	ldr	r3, [r2, r3]
 8007708:	4a2e      	ldr	r2, [pc, #184]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 800770a:	401a      	ands	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	4923      	ldr	r1, [pc, #140]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007712:	4313      	orrs	r3, r2
 8007714:	2288      	movs	r2, #136	@ 0x88
 8007716:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	2380      	movs	r3, #128	@ 0x80
 800771e:	00db      	lsls	r3, r3, #3
 8007720:	4013      	ands	r3, r2
 8007722:	d017      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007728:	2380      	movs	r3, #128	@ 0x80
 800772a:	045b      	lsls	r3, r3, #17
 800772c:	429a      	cmp	r2, r3
 800772e:	d106      	bne.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8007730:	4b1b      	ldr	r3, [pc, #108]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	4b1a      	ldr	r3, [pc, #104]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007736:	2180      	movs	r1, #128	@ 0x80
 8007738:	0449      	lsls	r1, r1, #17
 800773a:	430a      	orrs	r2, r1
 800773c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800773e:	4a18      	ldr	r2, [pc, #96]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007740:	2388      	movs	r3, #136	@ 0x88
 8007742:	58d3      	ldr	r3, [r2, r3]
 8007744:	4a20      	ldr	r2, [pc, #128]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8007746:	401a      	ands	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774c:	4914      	ldr	r1, [pc, #80]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800774e:	4313      	orrs	r3, r2
 8007750:	2288      	movs	r2, #136	@ 0x88
 8007752:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681a      	ldr	r2, [r3, #0]
 8007758:	2380      	movs	r3, #128	@ 0x80
 800775a:	011b      	lsls	r3, r3, #4
 800775c:	4013      	ands	r3, r2
 800775e:	d017      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007764:	2380      	movs	r3, #128	@ 0x80
 8007766:	049b      	lsls	r3, r3, #18
 8007768:	429a      	cmp	r2, r3
 800776a:	d106      	bne.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800776c:	4b0c      	ldr	r3, [pc, #48]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800776e:	68da      	ldr	r2, [r3, #12]
 8007770:	4b0b      	ldr	r3, [pc, #44]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8007772:	2180      	movs	r1, #128	@ 0x80
 8007774:	0449      	lsls	r1, r1, #17
 8007776:	430a      	orrs	r2, r1
 8007778:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800777a:	4a09      	ldr	r2, [pc, #36]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800777c:	2388      	movs	r3, #136	@ 0x88
 800777e:	58d3      	ldr	r3, [r2, r3]
 8007780:	4a11      	ldr	r2, [pc, #68]	@ (80077c8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8007782:	401a      	ands	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	4905      	ldr	r1, [pc, #20]	@ (80077a0 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800778a:	4313      	orrs	r3, r2
 800778c:	2288      	movs	r2, #136	@ 0x88
 800778e:	508b      	str	r3, [r1, r2]

  }

  return status;
 8007790:	2312      	movs	r3, #18
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	781b      	ldrb	r3, [r3, #0]
}
 8007796:	0018      	movs	r0, r3
 8007798:	46bd      	mov	sp, r7
 800779a:	b006      	add	sp, #24
 800779c:	bd80      	pop	{r7, pc}
 800779e:	46c0      	nop			@ (mov r8, r8)
 80077a0:	40021000 	.word	0x40021000
 80077a4:	efffffff 	.word	0xefffffff
 80077a8:	fffff3ff 	.word	0xfffff3ff
 80077ac:	fffffcff 	.word	0xfffffcff
 80077b0:	ffffcfff 	.word	0xffffcfff
 80077b4:	fffcffff 	.word	0xfffcffff
 80077b8:	fff3ffff 	.word	0xfff3ffff
 80077bc:	ffcfffff 	.word	0xffcfffff
 80077c0:	cfffffff 	.word	0xcfffffff
 80077c4:	f3ffffff 	.word	0xf3ffffff
 80077c8:	feffffff 	.word	0xfeffffff

080077cc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80077d4:	210f      	movs	r1, #15
 80077d6:	187b      	adds	r3, r7, r1
 80077d8:	2201      	movs	r2, #1
 80077da:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d100      	bne.n	80077e4 <HAL_RTC_Init+0x18>
 80077e2:	e08b      	b.n	80078fc <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 80077e4:	187b      	adds	r3, r7, r1
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	222d      	movs	r2, #45	@ 0x2d
 80077ee:	5c9b      	ldrb	r3, [r3, r2]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d107      	bne.n	8007806 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	222c      	movs	r2, #44	@ 0x2c
 80077fa:	2100      	movs	r1, #0
 80077fc:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	0018      	movs	r0, r3
 8007802:	f7fb fc9b 	bl	800313c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	222d      	movs	r2, #45	@ 0x2d
 800780a:	2102      	movs	r1, #2
 800780c:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800780e:	4b3f      	ldr	r3, [pc, #252]	@ (800790c <HAL_RTC_Init+0x140>)
 8007810:	22ca      	movs	r2, #202	@ 0xca
 8007812:	625a      	str	r2, [r3, #36]	@ 0x24
 8007814:	4b3d      	ldr	r3, [pc, #244]	@ (800790c <HAL_RTC_Init+0x140>)
 8007816:	2253      	movs	r2, #83	@ 0x53
 8007818:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	0018      	movs	r0, r3
 800781e:	f000 fa07 	bl	8007c30 <RTC_EnterInitMode>
 8007822:	1e03      	subs	r3, r0, #0
 8007824:	d00b      	beq.n	800783e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007826:	4b39      	ldr	r3, [pc, #228]	@ (800790c <HAL_RTC_Init+0x140>)
 8007828:	22ff      	movs	r2, #255	@ 0xff
 800782a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	222d      	movs	r2, #45	@ 0x2d
 8007830:	2104      	movs	r1, #4
 8007832:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8007834:	230f      	movs	r3, #15
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2201      	movs	r2, #1
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	e05e      	b.n	80078fc <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800783e:	4b33      	ldr	r3, [pc, #204]	@ (800790c <HAL_RTC_Init+0x140>)
 8007840:	699a      	ldr	r2, [r3, #24]
 8007842:	4b32      	ldr	r3, [pc, #200]	@ (800790c <HAL_RTC_Init+0x140>)
 8007844:	4932      	ldr	r1, [pc, #200]	@ (8007910 <HAL_RTC_Init+0x144>)
 8007846:	400a      	ands	r2, r1
 8007848:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800784a:	4b30      	ldr	r3, [pc, #192]	@ (800790c <HAL_RTC_Init+0x140>)
 800784c:	6999      	ldr	r1, [r3, #24]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	431a      	orrs	r2, r3
 800785e:	4b2b      	ldr	r3, [pc, #172]	@ (800790c <HAL_RTC_Init+0x140>)
 8007860:	430a      	orrs	r2, r1
 8007862:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68d9      	ldr	r1, [r3, #12]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	041a      	lsls	r2, r3, #16
 800786e:	4b27      	ldr	r3, [pc, #156]	@ (800790c <HAL_RTC_Init+0x140>)
 8007870:	430a      	orrs	r2, r1
 8007872:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007874:	4b25      	ldr	r3, [pc, #148]	@ (800790c <HAL_RTC_Init+0x140>)
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	4a26      	ldr	r2, [pc, #152]	@ (8007914 <HAL_RTC_Init+0x148>)
 800787a:	4013      	ands	r3, r2
 800787c:	0019      	movs	r1, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	431a      	orrs	r2, r3
 8007888:	4b20      	ldr	r3, [pc, #128]	@ (800790c <HAL_RTC_Init+0x140>)
 800788a:	430a      	orrs	r2, r1
 800788c:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800788e:	4b1f      	ldr	r3, [pc, #124]	@ (800790c <HAL_RTC_Init+0x140>)
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	4b1e      	ldr	r3, [pc, #120]	@ (800790c <HAL_RTC_Init+0x140>)
 8007894:	2180      	movs	r1, #128	@ 0x80
 8007896:	438a      	bics	r2, r1
 8007898:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800789a:	4b1c      	ldr	r3, [pc, #112]	@ (800790c <HAL_RTC_Init+0x140>)
 800789c:	699b      	ldr	r3, [r3, #24]
 800789e:	2220      	movs	r2, #32
 80078a0:	4013      	ands	r3, r2
 80078a2:	d110      	bne.n	80078c6 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	0018      	movs	r0, r3
 80078a8:	f000 f99c 	bl	8007be4 <HAL_RTC_WaitForSynchro>
 80078ac:	1e03      	subs	r3, r0, #0
 80078ae:	d00a      	beq.n	80078c6 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078b0:	4b16      	ldr	r3, [pc, #88]	@ (800790c <HAL_RTC_Init+0x140>)
 80078b2:	22ff      	movs	r2, #255	@ 0xff
 80078b4:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	222d      	movs	r2, #45	@ 0x2d
 80078ba:	2104      	movs	r1, #4
 80078bc:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 80078be:	230f      	movs	r3, #15
 80078c0:	18fb      	adds	r3, r7, r3
 80078c2:	2201      	movs	r2, #1
 80078c4:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80078c6:	230f      	movs	r3, #15
 80078c8:	18fb      	adds	r3, r7, r3
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d115      	bne.n	80078fc <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 80078d0:	4b0e      	ldr	r3, [pc, #56]	@ (800790c <HAL_RTC_Init+0x140>)
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	08d9      	lsrs	r1, r3, #3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a1a      	ldr	r2, [r3, #32]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	4b08      	ldr	r3, [pc, #32]	@ (800790c <HAL_RTC_Init+0x140>)
 80078ea:	430a      	orrs	r2, r1
 80078ec:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078ee:	4b07      	ldr	r3, [pc, #28]	@ (800790c <HAL_RTC_Init+0x140>)
 80078f0:	22ff      	movs	r2, #255	@ 0xff
 80078f2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	222d      	movs	r2, #45	@ 0x2d
 80078f8:	2101      	movs	r1, #1
 80078fa:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 80078fc:	230f      	movs	r3, #15
 80078fe:	18fb      	adds	r3, r7, r3
 8007900:	781b      	ldrb	r3, [r3, #0]
}
 8007902:	0018      	movs	r0, r3
 8007904:	46bd      	mov	sp, r7
 8007906:	b004      	add	sp, #16
 8007908:	bd80      	pop	{r7, pc}
 800790a:	46c0      	nop			@ (mov r8, r8)
 800790c:	40002800 	.word	0x40002800
 8007910:	fb8fffbf 	.word	0xfb8fffbf
 8007914:	ffffe0ff 	.word	0xffffe0ff

08007918 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007918:	b590      	push	{r4, r7, lr}
 800791a:	b087      	sub	sp, #28
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	222c      	movs	r2, #44	@ 0x2c
 8007928:	5c9b      	ldrb	r3, [r3, r2]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_RTC_SetTime+0x1a>
 800792e:	2302      	movs	r3, #2
 8007930:	e0a7      	b.n	8007a82 <HAL_RTC_SetTime+0x16a>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	222c      	movs	r2, #44	@ 0x2c
 8007936:	2101      	movs	r1, #1
 8007938:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	222d      	movs	r2, #45	@ 0x2d
 800793e:	2102      	movs	r1, #2
 8007940:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007942:	4b52      	ldr	r3, [pc, #328]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007944:	22ca      	movs	r2, #202	@ 0xca
 8007946:	625a      	str	r2, [r3, #36]	@ 0x24
 8007948:	4b50      	ldr	r3, [pc, #320]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 800794a:	2253      	movs	r2, #83	@ 0x53
 800794c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	0018      	movs	r0, r3
 8007952:	f000 f96d 	bl	8007c30 <RTC_EnterInitMode>
 8007956:	1e03      	subs	r3, r0, #0
 8007958:	d00c      	beq.n	8007974 <HAL_RTC_SetTime+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800795a:	4b4c      	ldr	r3, [pc, #304]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 800795c:	22ff      	movs	r2, #255	@ 0xff
 800795e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	222d      	movs	r2, #45	@ 0x2d
 8007964:	2104      	movs	r1, #4
 8007966:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	222c      	movs	r2, #44	@ 0x2c
 800796c:	2100      	movs	r1, #0
 800796e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e086      	b.n	8007a82 <HAL_RTC_SetTime+0x16a>
  }
  else
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007974:	4b45      	ldr	r3, [pc, #276]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	23c0      	movs	r3, #192	@ 0xc0
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	401a      	ands	r2, r3
 800797e:	2380      	movs	r3, #128	@ 0x80
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	429a      	cmp	r2, r3
 8007984:	d053      	beq.n	8007a2e <HAL_RTC_SetTime+0x116>
    {
      if (Format == RTC_FORMAT_BIN)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d124      	bne.n	80079d6 <HAL_RTC_SetTime+0xbe>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800798c:	4b3f      	ldr	r3, [pc, #252]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	2240      	movs	r2, #64	@ 0x40
 8007992:	4013      	ands	r3, r2
 8007994:	d102      	bne.n	800799c <HAL_RTC_SetTime+0x84>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2200      	movs	r2, #0
 800799a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	0018      	movs	r0, r3
 80079a2:	f000 f971 	bl	8007c88 <RTC_ByteToBcd2>
 80079a6:	0003      	movs	r3, r0
 80079a8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	785b      	ldrb	r3, [r3, #1]
 80079ae:	0018      	movs	r0, r3
 80079b0:	f000 f96a 	bl	8007c88 <RTC_ByteToBcd2>
 80079b4:	0003      	movs	r3, r0
 80079b6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079b8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	789b      	ldrb	r3, [r3, #2]
 80079be:	0018      	movs	r0, r3
 80079c0:	f000 f962 	bl	8007c88 <RTC_ByteToBcd2>
 80079c4:	0003      	movs	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80079c6:	0022      	movs	r2, r4
 80079c8:	431a      	orrs	r2, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	78db      	ldrb	r3, [r3, #3]
 80079ce:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079d0:	4313      	orrs	r3, r2
 80079d2:	617b      	str	r3, [r7, #20]
 80079d4:	e016      	b.n	8007a04 <HAL_RTC_SetTime+0xec>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80079d6:	4b2d      	ldr	r3, [pc, #180]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	2240      	movs	r2, #64	@ 0x40
 80079dc:	4013      	ands	r3, r2
 80079de:	d102      	bne.n	80079e6 <HAL_RTC_SetTime+0xce>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	785b      	ldrb	r3, [r3, #1]
 80079f0:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80079f2:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80079f8:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	78db      	ldrb	r3, [r3, #3]
 80079fe:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007a00:	4313      	orrs	r3, r2
 8007a02:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8007a04:	4b21      	ldr	r3, [pc, #132]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a06:	697a      	ldr	r2, [r7, #20]
 8007a08:	4921      	ldr	r1, [pc, #132]	@ (8007a90 <HAL_RTC_SetTime+0x178>)
 8007a0a:	400a      	ands	r2, r1
 8007a0c:	601a      	str	r2, [r3, #0]

      /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8007a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a10:	699a      	ldr	r2, [r3, #24]
 8007a12:	4b1e      	ldr	r3, [pc, #120]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a14:	491f      	ldr	r1, [pc, #124]	@ (8007a94 <HAL_RTC_SetTime+0x17c>)
 8007a16:	400a      	ands	r2, r1
 8007a18:	619a      	str	r2, [r3, #24]

      /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8007a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a1c:	6999      	ldr	r1, [r3, #24]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	4b18      	ldr	r3, [pc, #96]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a2a:	430a      	orrs	r2, r1
 8007a2c:	619a      	str	r2, [r3, #24]
    }

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007a2e:	4b17      	ldr	r3, [pc, #92]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	4b16      	ldr	r3, [pc, #88]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a34:	2180      	movs	r1, #128	@ 0x80
 8007a36:	438a      	bics	r2, r1
 8007a38:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007a3a:	4b14      	ldr	r3, [pc, #80]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	4013      	ands	r3, r2
 8007a42:	d112      	bne.n	8007a6a <HAL_RTC_SetTime+0x152>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	0018      	movs	r0, r3
 8007a48:	f000 f8cc 	bl	8007be4 <HAL_RTC_WaitForSynchro>
 8007a4c:	1e03      	subs	r3, r0, #0
 8007a4e:	d00c      	beq.n	8007a6a <HAL_RTC_SetTime+0x152>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a50:	4b0e      	ldr	r3, [pc, #56]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a52:	22ff      	movs	r2, #255	@ 0xff
 8007a54:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	222d      	movs	r2, #45	@ 0x2d
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	222c      	movs	r2, #44	@ 0x2c
 8007a62:	2100      	movs	r1, #0
 8007a64:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e00b      	b.n	8007a82 <HAL_RTC_SetTime+0x16a>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a6a:	4b08      	ldr	r3, [pc, #32]	@ (8007a8c <HAL_RTC_SetTime+0x174>)
 8007a6c:	22ff      	movs	r2, #255	@ 0xff
 8007a6e:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	222d      	movs	r2, #45	@ 0x2d
 8007a74:	2101      	movs	r1, #1
 8007a76:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	222c      	movs	r2, #44	@ 0x2c
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007a80:	2300      	movs	r3, #0
  }
}
 8007a82:	0018      	movs	r0, r3
 8007a84:	46bd      	mov	sp, r7
 8007a86:	b007      	add	sp, #28
 8007a88:	bd90      	pop	{r4, r7, pc}
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	40002800 	.word	0x40002800
 8007a90:	007f7f7f 	.word	0x007f7f7f
 8007a94:	fffbffff 	.word	0xfffbffff

08007a98 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	222c      	movs	r2, #44	@ 0x2c
 8007aa8:	5c9b      	ldrb	r3, [r3, r2]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d101      	bne.n	8007ab2 <HAL_RTC_SetDate+0x1a>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	e090      	b.n	8007bd4 <HAL_RTC_SetDate+0x13c>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	222c      	movs	r2, #44	@ 0x2c
 8007ab6:	2101      	movs	r1, #1
 8007ab8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	222d      	movs	r2, #45	@ 0x2d
 8007abe:	2102      	movs	r1, #2
 8007ac0:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10e      	bne.n	8007ae6 <HAL_RTC_SetDate+0x4e>
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	785b      	ldrb	r3, [r3, #1]
 8007acc:	001a      	movs	r2, r3
 8007ace:	2310      	movs	r3, #16
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	d008      	beq.n	8007ae6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	785b      	ldrb	r3, [r3, #1]
 8007ad8:	2210      	movs	r2, #16
 8007ada:	4393      	bics	r3, r2
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	330a      	adds	r3, #10
 8007ae0:	b2da      	uxtb	r2, r3
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11c      	bne.n	8007b26 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	78db      	ldrb	r3, [r3, #3]
 8007af0:	0018      	movs	r0, r3
 8007af2:	f000 f8c9 	bl	8007c88 <RTC_ByteToBcd2>
 8007af6:	0003      	movs	r3, r0
 8007af8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	0018      	movs	r0, r3
 8007b00:	f000 f8c2 	bl	8007c88 <RTC_ByteToBcd2>
 8007b04:	0003      	movs	r3, r0
 8007b06:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007b08:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	789b      	ldrb	r3, [r3, #2]
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f000 f8ba 	bl	8007c88 <RTC_ByteToBcd2>
 8007b14:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007b16:	0022      	movs	r2, r4
 8007b18:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
 8007b24:	e00e      	b.n	8007b44 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	785b      	ldrb	r3, [r3, #1]
 8007b30:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007b32:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007b38:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007b40:	4313      	orrs	r3, r2
 8007b42:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b44:	4b25      	ldr	r3, [pc, #148]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007b46:	22ca      	movs	r2, #202	@ 0xca
 8007b48:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b4a:	4b24      	ldr	r3, [pc, #144]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007b4c:	2253      	movs	r2, #83	@ 0x53
 8007b4e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f000 f86c 	bl	8007c30 <RTC_EnterInitMode>
 8007b58:	1e03      	subs	r3, r0, #0
 8007b5a:	d00c      	beq.n	8007b76 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007b5e:	22ff      	movs	r2, #255	@ 0xff
 8007b60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	222d      	movs	r2, #45	@ 0x2d
 8007b66:	2104      	movs	r1, #4
 8007b68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	222c      	movs	r2, #44	@ 0x2c
 8007b6e:	2100      	movs	r1, #0
 8007b70:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e02e      	b.n	8007bd4 <HAL_RTC_SetDate+0x13c>
  }
  else
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8007b76:	4b19      	ldr	r3, [pc, #100]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4919      	ldr	r1, [pc, #100]	@ (8007be0 <HAL_RTC_SetDate+0x148>)
 8007b7c:	400a      	ands	r2, r1
 8007b7e:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007b80:	4b16      	ldr	r3, [pc, #88]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007b82:	68da      	ldr	r2, [r3, #12]
 8007b84:	4b15      	ldr	r3, [pc, #84]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007b86:	2180      	movs	r1, #128	@ 0x80
 8007b88:	438a      	bics	r2, r1
 8007b8a:	60da      	str	r2, [r3, #12]

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007b8c:	4b13      	ldr	r3, [pc, #76]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	2220      	movs	r2, #32
 8007b92:	4013      	ands	r3, r2
 8007b94:	d112      	bne.n	8007bbc <HAL_RTC_SetDate+0x124>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	0018      	movs	r0, r3
 8007b9a:	f000 f823 	bl	8007be4 <HAL_RTC_WaitForSynchro>
 8007b9e:	1e03      	subs	r3, r0, #0
 8007ba0:	d00c      	beq.n	8007bbc <HAL_RTC_SetDate+0x124>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007ba4:	22ff      	movs	r2, #255	@ 0xff
 8007ba6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	222d      	movs	r2, #45	@ 0x2d
 8007bac:	2104      	movs	r1, #4
 8007bae:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	222c      	movs	r2, #44	@ 0x2c
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	e00b      	b.n	8007bd4 <HAL_RTC_SetDate+0x13c>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007bbc:	4b07      	ldr	r3, [pc, #28]	@ (8007bdc <HAL_RTC_SetDate+0x144>)
 8007bbe:	22ff      	movs	r2, #255	@ 0xff
 8007bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	222d      	movs	r2, #45	@ 0x2d
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	222c      	movs	r2, #44	@ 0x2c
 8007bce:	2100      	movs	r1, #0
 8007bd0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
  }
}
 8007bd4:	0018      	movs	r0, r3
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	b007      	add	sp, #28
 8007bda:	bd90      	pop	{r4, r7, pc}
 8007bdc:	40002800 	.word	0x40002800
 8007be0:	00ffff3f 	.word	0x00ffff3f

08007be4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8007bec:	4b0f      	ldr	r3, [pc, #60]	@ (8007c2c <HAL_RTC_WaitForSynchro+0x48>)
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8007c2c <HAL_RTC_WaitForSynchro+0x48>)
 8007bf2:	2120      	movs	r1, #32
 8007bf4:	438a      	bics	r2, r1
 8007bf6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007bf8:	f7fb fbf4 	bl	80033e4 <HAL_GetTick>
 8007bfc:	0003      	movs	r3, r0
 8007bfe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007c00:	e00a      	b.n	8007c18 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c02:	f7fb fbef 	bl	80033e4 <HAL_GetTick>
 8007c06:	0002      	movs	r2, r0
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	1ad2      	subs	r2, r2, r3
 8007c0c:	23fa      	movs	r3, #250	@ 0xfa
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d901      	bls.n	8007c18 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e005      	b.n	8007c24 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8007c18:	4b04      	ldr	r3, [pc, #16]	@ (8007c2c <HAL_RTC_WaitForSynchro+0x48>)
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	4013      	ands	r3, r2
 8007c20:	d0ef      	beq.n	8007c02 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b004      	add	sp, #16
 8007c2a:	bd80      	pop	{r7, pc}
 8007c2c:	40002800 	.word	0x40002800

08007c30 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007c38:	4b12      	ldr	r3, [pc, #72]	@ (8007c84 <RTC_EnterInitMode+0x54>)
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	2240      	movs	r2, #64	@ 0x40
 8007c3e:	4013      	ands	r3, r2
 8007c40:	d11a      	bne.n	8007c78 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007c42:	4b10      	ldr	r3, [pc, #64]	@ (8007c84 <RTC_EnterInitMode+0x54>)
 8007c44:	68da      	ldr	r2, [r3, #12]
 8007c46:	4b0f      	ldr	r3, [pc, #60]	@ (8007c84 <RTC_EnterInitMode+0x54>)
 8007c48:	2180      	movs	r1, #128	@ 0x80
 8007c4a:	430a      	orrs	r2, r1
 8007c4c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c4e:	f7fb fbc9 	bl	80033e4 <HAL_GetTick>
 8007c52:	0003      	movs	r3, r0
 8007c54:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007c56:	e00a      	b.n	8007c6e <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c58:	f7fb fbc4 	bl	80033e4 <HAL_GetTick>
 8007c5c:	0002      	movs	r2, r0
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	1ad2      	subs	r2, r2, r3
 8007c62:	23fa      	movs	r3, #250	@ 0xfa
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d901      	bls.n	8007c6e <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e005      	b.n	8007c7a <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8007c6e:	4b05      	ldr	r3, [pc, #20]	@ (8007c84 <RTC_EnterInitMode+0x54>)
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	2240      	movs	r2, #64	@ 0x40
 8007c74:	4013      	ands	r3, r2
 8007c76:	d0ef      	beq.n	8007c58 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	b004      	add	sp, #16
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	46c0      	nop			@ (mov r8, r8)
 8007c84:	40002800 	.word	0x40002800

08007c88 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	0002      	movs	r2, r0
 8007c90:	1dfb      	adds	r3, r7, #7
 8007c92:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8007c98:	230b      	movs	r3, #11
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	1dfa      	adds	r2, r7, #7
 8007c9e:	7812      	ldrb	r2, [r2, #0]
 8007ca0:	701a      	strb	r2, [r3, #0]

  while (tmp_Value >= 10U)
 8007ca2:	e008      	b.n	8007cb6 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8007caa:	220b      	movs	r2, #11
 8007cac:	18bb      	adds	r3, r7, r2
 8007cae:	18ba      	adds	r2, r7, r2
 8007cb0:	7812      	ldrb	r2, [r2, #0]
 8007cb2:	3a0a      	subs	r2, #10
 8007cb4:	701a      	strb	r2, [r3, #0]
  while (tmp_Value >= 10U)
 8007cb6:	210b      	movs	r1, #11
 8007cb8:	187b      	adds	r3, r7, r1
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	2b09      	cmp	r3, #9
 8007cbe:	d8f1      	bhi.n	8007ca4 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	011b      	lsls	r3, r3, #4
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	187b      	adds	r3, r7, r1
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	b2db      	uxtb	r3, r3
}
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	b004      	add	sp, #16
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <memset>:
 8007cd8:	0003      	movs	r3, r0
 8007cda:	1882      	adds	r2, r0, r2
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d100      	bne.n	8007ce2 <memset+0xa>
 8007ce0:	4770      	bx	lr
 8007ce2:	7019      	strb	r1, [r3, #0]
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	e7f9      	b.n	8007cdc <memset+0x4>

08007ce8 <__libc_init_array>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	2600      	movs	r6, #0
 8007cec:	4c0c      	ldr	r4, [pc, #48]	@ (8007d20 <__libc_init_array+0x38>)
 8007cee:	4d0d      	ldr	r5, [pc, #52]	@ (8007d24 <__libc_init_array+0x3c>)
 8007cf0:	1b64      	subs	r4, r4, r5
 8007cf2:	10a4      	asrs	r4, r4, #2
 8007cf4:	42a6      	cmp	r6, r4
 8007cf6:	d109      	bne.n	8007d0c <__libc_init_array+0x24>
 8007cf8:	2600      	movs	r6, #0
 8007cfa:	f000 f819 	bl	8007d30 <_init>
 8007cfe:	4c0a      	ldr	r4, [pc, #40]	@ (8007d28 <__libc_init_array+0x40>)
 8007d00:	4d0a      	ldr	r5, [pc, #40]	@ (8007d2c <__libc_init_array+0x44>)
 8007d02:	1b64      	subs	r4, r4, r5
 8007d04:	10a4      	asrs	r4, r4, #2
 8007d06:	42a6      	cmp	r6, r4
 8007d08:	d105      	bne.n	8007d16 <__libc_init_array+0x2e>
 8007d0a:	bd70      	pop	{r4, r5, r6, pc}
 8007d0c:	00b3      	lsls	r3, r6, #2
 8007d0e:	58eb      	ldr	r3, [r5, r3]
 8007d10:	4798      	blx	r3
 8007d12:	3601      	adds	r6, #1
 8007d14:	e7ee      	b.n	8007cf4 <__libc_init_array+0xc>
 8007d16:	00b3      	lsls	r3, r6, #2
 8007d18:	58eb      	ldr	r3, [r5, r3]
 8007d1a:	4798      	blx	r3
 8007d1c:	3601      	adds	r6, #1
 8007d1e:	e7f2      	b.n	8007d06 <__libc_init_array+0x1e>
 8007d20:	08007d8c 	.word	0x08007d8c
 8007d24:	08007d8c 	.word	0x08007d8c
 8007d28:	08007d90 	.word	0x08007d90
 8007d2c:	08007d8c 	.word	0x08007d8c

08007d30 <_init>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	46c0      	nop			@ (mov r8, r8)
 8007d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d36:	bc08      	pop	{r3}
 8007d38:	469e      	mov	lr, r3
 8007d3a:	4770      	bx	lr

08007d3c <_fini>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	46c0      	nop			@ (mov r8, r8)
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr
